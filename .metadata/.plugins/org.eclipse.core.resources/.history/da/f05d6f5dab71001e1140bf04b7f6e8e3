/*
 * uart.c
 *
 *  Created on: 2023. 10. 16.
 *      Author: kjkim
 */


#include "uart.h"
#include "qbuffer.h"

#define UART_MODE_POLLING                   0
#define UART_MODE_INTERRUPT                 1
#define UART_MODE_DMA                       2
#define UART_MODE_VCP                       4

#define UART_RX_BUF_LENGTH                  16
#define UART_RX_QBUF_LENGTH                 256

DMA_HandleTypeDef hdma_tx;
DMA_HandleTypeDef hdma_rx;

/*
 * @ uart 사용하기 위해 관련 변수를 구조체로 정의
 * */
typedef struct
{
  bool      is_open;    //해당 채널 오픈유무 확인용 변수 정의
  uint32_t  baud;       //통신속도 변수 정의
  bool      vcp_mode;
  uint8_t   tx_mode;
  uint8_t   rx_mode;

  uint8_t   rx_buf[UART_RX_BUF_LENGTH]; //수신버퍼 정의

  qbuffer_t   qbuffer_rx;               //큐버퍼 구조체 변수

  DMA_HandleTypeDef         hdma;       //DMA를 다루기 위한 구조체 변수
  UART_HandleTypeDef        handle;     //UART를 다루기 위한 구조체 변수
}uart_t;


uart_t      uart_tbl[UART_MAX_CH];  //채널별 UART 핸들링위한 UART 구조체 변수 선언
uint8_t     uart_rx_qbuf[UART_MAX_CH][UART_RX_QBUF_LENGTH];   //uart채널별 큐버퍼 선언

void uartStartRx(uint8_t ch);         //uart 수신시작 설정 함수
void uartRxHandler(uint8_t ch);       //uart 수신 핸들러 함수

void uartInit(void)
{
  uint8_t i;
  for(i=0;i<UART_MAX_CH;i++)
  {
    uart_tbl[i].is_open   = false;
    uart_tbl[i].vcp_mode  = false;
    uart_tbl[i].rx_mode   = UART_MODE_POLLING;
    uart_tbl[i].tx_mode   = UART_MODE_POLLING;
  }
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = true;
  uart_t  *p_uart;        //uart 핸들용 구조체 포인터 변수 선언

  p_uart = &uart_tbl[ch];

  if(ch > UART_MAX_CH)    return false;

  switch(ch)
  {
    case _DEF_UART1:
      p_uart = &uart_tbl[ch];

      p_uart->baud = baud;
      p_uart->is_open = true;
      p_uart->vcp_mode  = false;
      p_uart->rx_mode   = UART_MODE_DMA;
      p_uart->tx_mode   = UART_MODE_DMA;

      p_uart->handle.Init.BaudRate      = baud;
      p_uart->handle.Init.WordLength    = UART_WORDLENGTH_8B;
      p_uart->handle.Init.StopBits      = UART_STOPBITS_1;
      p_uart->handle.Init.Parity        = UART_PARITY_ODD;
      p_uart->handle.Init.Mode          = UART_MODE_TX_RX;
      p_uart->handle.Init.HwFlowCtl     = UART_HWCONTROL_NONE;
      p_uart->handle.Init.OverSampling  = UART_OVERSAMPLING_16;

      if(HAL_UART_Init(&p_uart->handle) != HAL_OK)
      {
        ret = false;
      }
      uartStartRx(ch);
      break;
  }



  return ret;
}

/**
 * @uart 수신시작 설정 함수
 */
void uartStartRx(uint8_t ch)
{
  uart_t        *p_uart;

  p_uart = &uart_tbl[ch];

  switch(ch)
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
        HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);

      if(p_uart->rx_mode == UART_MODE_DMA)
      {
        HAL_UART_Receive_DMA(&p_uart->handle, p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
      }
      break;
  }
}

bool uartClose(uint8_t ch)
{
  bool ret = false;

  if(ch > UART_MAX_CH) return false;

  if(uart_tbl[ch].is_open == true)
  {
    if(HAL_UART_DeInit(&uart_tbl[ch].handle) == HAL_OK)
    {
      ret = true;
    }
  }

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
  uint32_ ret;

  uart_t    *p_uart;

  p_uart = &uart_tbl[ch];

  if(p_uart->rx_mode == UART_MODE_DMA)
  {
    //
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma.Instance->NDTR;
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
  }

  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
  {
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
  }

  return ret;
}

void uartFlush(uint8_t ch)
{
  uart_t    *p_uart;

  p_uart = &uart_tbl[ch];

  if(p_uart->rx_mode == UART_MODE_DMA)
  {
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma.Instance->NDTR;
    p_uart->qbuffer_rx.ptr_out = p_uart->qbuffer_rx.ptr_in;
  }
}

void uartPutch(uint8_t ch, uint8_t c)
{
  uartWrite(ch, &ch, 1);
}

uint8_t uartGetch(uint8_t ch)
{
  uint8_t ret = 0;

  if(uartAvailable(ch) > 0)
  {
    ret = uartRead(ch);
  }

  return ret;
}

int32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
  int32_t ret = 0;

  uart_t    *p_uart;
  p_uart = &uart_tbl[ch];

  if(p_uart->rx_mode == UART_MODE_DMA)
  {
    //qbufferWrite(&p_uart->qbuffer_rx, p_data, length);
  }


  return ret;
}
uint8_t uartRead(uint8_t ch)
{

}

int32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{

}


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
  /* Enable DMA2 clock */
  DMAx_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;

  hdma_tx.Init.Channel             = USARTx_TX_DMA_CHANNEL;
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;

  HAL_DMA_Init(&hdma_tx);

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;

  hdma_rx.Init.Channel             = USARTx_RX_DMA_CHANNEL;
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

  HAL_DMA_Init(&hdma_rx);

  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);

  /* NVIC configuration for USART TC interrupt */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
}

/**
  * @brief UART MSP De-Initialization
  *        This function frees the hardware resources used in this example:
  *          - Disable the Peripheral's clock
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{

  static DMA_HandleTypeDef hdma_tx;
  static DMA_HandleTypeDef hdma_rx;

  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
  USARTx_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure UART Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
  /* Configure UART Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);

  /*##-3- Disable the DMA Streams ############################################*/
  /* De-Initialize the DMA Stream associate to transmission process */
  HAL_DMA_DeInit(&hdma_tx);
  /* De-Initialize the DMA Stream associate to reception process */
  HAL_DMA_DeInit(&hdma_rx);

  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
  HAL_NVIC_DisableIRQ(USARTx_DMA_RX_IRQn);
}

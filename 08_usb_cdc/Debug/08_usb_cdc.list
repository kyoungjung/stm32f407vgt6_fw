
08_usb_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800b154  0800b154  0001b154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b20c  0800b20c  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b20c  0800b20c  0001b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b214  0800b214  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  0800b21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201c0  2**0
                  CONTENTS
 10 .bss          00002064  200001c0  200001c0  000201c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002224  20002224  000201c0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019696  00000000  00000000  000201ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000407e  00000000  00000000  00039880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d0  00000000  00000000  0003eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e43  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000224a2  00000000  00000000  000670cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cff06  00000000  00000000  0008956d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159473  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c80  00000000  00000000  001594c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c0 	.word	0x200001c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b13c 	.word	0x0800b13c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c4 	.word	0x200001c4
 80001cc:	0800b13c 	.word	0x0800b13c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14d      	bne.n	800034c <__udivmoddi4+0xac>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d968      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b152      	cbz	r2, 80002d2 <__udivmoddi4+0x32>
 80002bc:	fa01 f302 	lsl.w	r3, r1, r2
 80002c0:	f1c2 0120 	rsb	r1, r2, #32
 80002c4:	fa20 f101 	lsr.w	r1, r0, r1
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	ea41 0803 	orr.w	r8, r1, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fbb8 fef5 	udiv	lr, r8, r5
 80002dc:	fa1f f78c 	uxth.w	r7, ip
 80002e0:	fb05 831e 	mls	r3, r5, lr, r8
 80002e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e8:	fb0e f107 	mul.w	r1, lr, r7
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d90b      	bls.n	8000308 <__udivmoddi4+0x68>
 80002f0:	eb1c 0303 	adds.w	r3, ip, r3
 80002f4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002f8:	f080 811e 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fc:	4299      	cmp	r1, r3
 80002fe:	f240 811b 	bls.w	8000538 <__udivmoddi4+0x298>
 8000302:	f1ae 0e02 	sub.w	lr, lr, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000310:	fb05 3310 	mls	r3, r5, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x96>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 8108 	bcs.w	800053c <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8105 	bls.w	800053c <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800033c:	2100      	movs	r1, #0
 800033e:	b11e      	cbz	r6, 8000348 <__udivmoddi4+0xa8>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c6 4300 	strd	r4, r3, [r6]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0xc2>
 8000350:	2e00      	cmp	r6, #0
 8000352:	f000 80ee 	beq.w	8000532 <__udivmoddi4+0x292>
 8000356:	2100      	movs	r1, #0
 8000358:	e9c6 0500 	strd	r0, r5, [r6]
 800035c:	4608      	mov	r0, r1
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0303 	sbc.w	r3, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e2      	beq.n	8000348 <__udivmoddi4+0xa8>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7df      	b.n	8000348 <__udivmoddi4+0xa8>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8091 	bne.w	80004b8 <__udivmoddi4+0x218>
 8000396:	eba1 050c 	sub.w	r5, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2101      	movs	r1, #1
 80003a4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003a8:	fb07 5013 	mls	r0, r7, r3, r5
 80003ac:	0c25      	lsrs	r5, r4, #16
 80003ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0505 	adds.w	r5, ip, r5
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	42a8      	cmp	r0, r5
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a2d      	subs	r5, r5, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003d4:	fb07 5510 	mls	r5, r7, r0, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4628      	mov	r0, r5
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79e      	b.n	800033e <__udivmoddi4+0x9e>
 8000400:	f1c1 0720 	rsb	r7, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa05 f301 	lsl.w	r3, r5, r1
 8000416:	431c      	orrs	r4, r3
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f301 	lsl.w	r3, r0, r1
 8000422:	fbb5 f8f9 	udiv	r8, r5, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 5518 	mls	r5, r9, r8, r5
 8000430:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	42a8      	cmp	r0, r5
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0505 	adds.w	r5, ip, r5
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	42a8      	cmp	r0, r5
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4465      	add	r5, ip
 8000458:	1a2d      	subs	r5, r5, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000460:	fb09 5510 	mls	r5, r9, r0, r5
 8000464:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	45ae      	cmp	lr, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	45ae      	cmp	lr, r5
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba5 050e 	sub.w	r5, r5, lr
 800048e:	42a5      	cmp	r5, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15e      	cbz	r6, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb65 050e 	sbc.w	r5, r5, lr
 80004a2:	fa05 f707 	lsl.w	r7, r5, r7
 80004a6:	fa22 f301 	lsr.w	r3, r2, r1
 80004aa:	40cd      	lsrs	r5, r1
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c6 7500 	strd	r7, r5, [r6]
 80004b2:	2100      	movs	r1, #0
 80004b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa25 f303 	lsr.w	r3, r5, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	430d      	orrs	r5, r1
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004d8:	fb07 3011 	mls	r0, r7, r1, r3
 80004dc:	0c2b      	lsrs	r3, r5, #16
 80004de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004e2:	fb01 f00e 	mul.w	r0, r1, lr
 80004e6:	4298      	cmp	r0, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	4298      	cmp	r0, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3902      	subs	r1, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a1b      	subs	r3, r3, r0
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3310 	mls	r3, r7, r0, r3
 800050c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000510:	fb00 f30e 	mul.w	r3, r0, lr
 8000514:	42ab      	cmp	r3, r5
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0505 	adds.w	r5, ip, r5
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3802      	subs	r0, #2
 8000528:	4465      	add	r5, ip
 800052a:	1aed      	subs	r5, r5, r3
 800052c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	4631      	mov	r1, r6
 8000534:	4630      	mov	r0, r6
 8000536:	e707      	b.n	8000348 <__udivmoddi4+0xa8>
 8000538:	4686      	mov	lr, r0
 800053a:	e6e5      	b.n	8000308 <__udivmoddi4+0x68>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fa      	b.n	8000336 <__udivmoddi4+0x96>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4640      	mov	r0, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4641      	mov	r1, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4465      	add	r5, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4608      	mov	r0, r1
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ledISR>:


#include "ap.h"

void ledISR(void *arg)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  ledToggle(_DEF_LED3);     //led3 토글한다
 800057c:	2002      	movs	r0, #2
 800057e:	f000 fb29 	bl	8000bd4 <ledToggle>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <apInit>:

void apInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af02      	add	r7, sp, #8
  swtimer_handle_t          h_led_timer;    //동작할 타이머 인덱스 변수

  //하드웨어 타이머 인터럽트 발생 주기가 1000us(1ms) 되도록 아래와 같이 설정한다.
  timerSetPeriod(_DEF_TIMER1, 1000);
 8000592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fcc2 	bl	8000f20 <timerSetPeriod>
  //timerAttachInterrupt(_DEF_TIMER1, func);
  timerStart(_DEF_TIMER1);                      //start timer...
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fcf5 	bl	8000f8c <timerStart>

  h_led_timer = swtimerGetHandle();             //타이머 인덱스값을 받아서 변수에 저장
 80005a2:	f000 fc69 	bl	8000e78 <swtimerGetHandle>
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  swtimerSet(h_led_timer, 500, LOOP_TIME, ledISR, NULL);  //500ms 주기로 ledISR함수가 동작하도록 swtimer 설정
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <apInit+0x58>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ba:	f000 fbf1 	bl	8000da0 <swtimerSet>
  swtimerStart(h_led_timer);    //swtimer 시작
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fc2e 	bl	8000e24 <swtimerStart>

  uartOpen(_DEF_UART1, 115200);
 80005c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fded 	bl	80011ac <uartOpen>

  uartPrintf(_DEF_UART1, "UART 1 OPEN \r\n");
 80005d2:	4905      	ldr	r1, [pc, #20]	; (80005e8 <apInit+0x5c>)
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fef5 	bl	80013c4 <uartPrintf>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08000575 	.word	0x08000575
 80005e8:	0800b154 	.word	0x0800b154

080005ec <apMain>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void apMain(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  pre_time = millis();
 80005f2:	f000 f89a 	bl	800072a <millis>
 80005f6:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if(millis() - pre_time >= 500)
 80005f8:	f000 f897 	bl	800072a <millis>
 80005fc:	4602      	mov	r2, r0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000606:	d3f7      	bcc.n	80005f8 <apMain+0xc>
    {
      pre_time = millis();
 8000608:	f000 f88f 	bl	800072a <millis>
 800060c:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fae0 	bl	8000bd4 <ledToggle>
      CDC_Transmit_FS("test cdc\r\n", 11);
 8000614:	210b      	movs	r1, #11
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <apMain+0x34>)
 8000618:	f009 fc72 	bl	8009f00 <CDC_Transmit_FS>
    if(millis() - pre_time >= 500)
 800061c:	e7ec      	b.n	80005f8 <apMain+0xc>
 800061e:	bf00      	nop
 8000620:	0800b164 	.word	0x0800b164

08000624 <bspInit>:
static void SystemClock_Config(void);
static void Error_Handler(void);


void bspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
  HAL_Init();
 800062a:	f000 ffe9 	bl	8001600 <HAL_Init>

  SystemClock_Config();
 800062e:	f000 f883 	bl	8000738 <SystemClock_Config>

  GPIO_InitTypeDef    GPIO_InitStruct = {0,};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <bspInit+0xe8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a30      	ldr	r2, [pc, #192]	; (800070c <bspInit+0xe8>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <bspInit+0xe8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <bspInit+0xe8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <bspInit+0xe8>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <bspInit+0xe8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <bspInit+0xe8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a22      	ldr	r2, [pc, #136]	; (800070c <bspInit+0xe8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <bspInit+0xe8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <bspInit+0xe8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a1b      	ldr	r2, [pc, #108]	; (800070c <bspInit+0xe8>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <bspInit+0xe8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  //mcu reset 이후 usb가 정상적으로 실행되지 않을 경우가 있어서
  //usb dp 핀을 low -> 100ms -> high 로 제어해준다.
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006b8:	2311      	movs	r3, #17
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4811      	ldr	r0, [pc, #68]	; (8000710 <bspInit+0xec>)
 80006cc:	f001 fdc6 	bl	800225c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <bspInit+0xec>)
 80006d8:	f002 f854 	bl	8002784 <HAL_GPIO_WritePin>
  delay(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f000 f819 	bl	8000714 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <bspInit+0xec>)
 80006ea:	f002 f84b 	bl	8002784 <HAL_GPIO_WritePin>

  //usb dp를 입력핀으로 설정해준다.
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <bspInit+0xec>)
 80006fa:	f001 fdaf 	bl	800225c <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 80006fe:	f009 fb41 	bl	8009d84 <MX_USB_DEVICE_Init>
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000

08000714 <delay>:

void delay(uint32_t ms)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 ffdd 	bl	80016dc <HAL_Delay>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <millis>:

uint32_t millis(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800072e:	f000 ffcb 	bl	80016c8 <HAL_GetTick>
 8000732:	4603      	mov	r3, r0
}
 8000734:	4618      	mov	r0, r3
 8000736:	bd80      	pop	{r7, pc}

08000738 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00a f86a 	bl	800a820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <SystemClock_Config+0xd0>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007a8:	2319      	movs	r3, #25
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fa8c 	bl	8003cdc <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ca:	f000 f81f 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2105      	movs	r1, #5
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fced 	bl	80041cc <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f8:	f000 f808 	bl	800080c <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x4>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x48>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x48>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x48>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x48>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_MspInit+0x48>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_MspInit+0x48>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40023800 	.word	0x40023800

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 fefd 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	f004 fd43 	bl	8005340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000380 	.word	0x20000380

080008c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <DMA2_Stream2_IRQHandler+0x10>)
 80008ca:	f001 fa61 	bl	8001d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200003c4 	.word	0x200003c4

080008d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <OTG_FS_IRQHandler+0x10>)
 80008de:	f002 f8d2 	bl	8002a86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20001ae8 	.word	0x20001ae8

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f009 ff56 	bl	800a7cc <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20020000 	.word	0x20020000
 800094c:	00000400 	.word	0x00000400
 8000950:	200001dc 	.word	0x200001dc
 8000954:	20002228 	.word	0x20002228

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffe3 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f009 ff21 	bl	800a7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f009 ff09 	bl	800a7ac <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 80009a8:	0800b21c 	.word	0x0800b21c
  ldr r2, =_sbss
 80009ac:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 80009b0:	20002224 	.word	0x20002224

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>

080009b6 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b087      	sub	sp, #28
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80009c2:	2301      	movs	r3, #1
 80009c4:	75fb      	strb	r3, [r7, #23]

  //q buffer 입/출력 인덱스 초기화
  p_node->ptr_in    = 0;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
  p_node->ptr_out   = 0;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  p_node->p_buf     = p_buf;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  p_node->length    = length;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	609a      	str	r2, [r3, #8]

  if(p_node->p_buf == NULL)   //생성할 버퍼가 null이면 비정상 리턴
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d104      	bne.n	80009f0 <qbufferCreate+0x3a>
  {
    p_node->length = 0;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    ret = false;
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	371c      	adds	r7, #28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t i;
  uint32_t index;
  uint32_t next_index;

  if(p_node->p_buf == NULL)     return false;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <qbufferWrite+0x1c>
 8000a14:	2300      	movs	r3, #0
 8000a16:	e02d      	b.n	8000a74 <qbufferWrite+0x78>

  for(i=0;i<length;i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	e025      	b.n	8000a6a <qbufferWrite+0x6e>
  {
    index       = p_node->ptr_in;       //q 버퍼 입력 인덱스를 index에 저장
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
    next_index  = p_node->ptr_in + 1;   //q 버퍼 입력 인덱스 1 증가한 값을 next_index에 저장
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
    //큐버퍼 읽지 않고 쓰기만 하다보면....
    //아래 조건을 만족하게 되고
    //next_index가 0으로 초기화 된다.
    //next_index가 0이 되면
    //prt out 인덱스와 같아지므로 buffer full error를 반환한다.
    if(next_index == p_node->length)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d101      	bne.n	8000a3a <qbufferWrite+0x3e>
    {
      next_index = 0;   //next index 초기화
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
    }

    //next_index가 out 인덱스와 같지 않다는것은
    //write할수 있는 버퍼 공간이 있다는 의미
    if(next_index != p_node->ptr_out)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d00c      	beq.n	8000a5e <qbufferWrite+0x62>
    {
      //외부에서 입력된 length 길이의 p_buf i번째 데이터를 정의된 큐버퍼 index번째에 저장
      p_node->p_buf[index] = p_buf[i];
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	441a      	add	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	68d9      	ldr	r1, [r3, #12]
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	440b      	add	r3, r1
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	701a      	strb	r2, [r3, #0]
      //in index 1증가
      p_node->ptr_in   = next_index;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e002      	b.n	8000a64 <qbufferWrite+0x68>
    }
    else
    {
      ret = false;    // buffer full error
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
      break;          // stop loop
 8000a62:	e006      	b.n	8000a72 <qbufferWrite+0x76>
  for(i=0;i<length;i++)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	3301      	adds	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d3d5      	bcc.n	8000a1e <qbufferWrite+0x22>
    }
  }

  return ret;
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <buttonInit>:
        {GPIOC, GPIO_PIN_0, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOC, GPIO_PIN_1, GPIO_PIN_RESET, GPIO_PIN_SET}
    };

void buttonInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <buttonInit+0x64>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <buttonInit+0x64>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <buttonInit+0x64>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <buttonInit+0x68>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]

  for(i=0; i<HW_BUTTON_MAX_CH; i++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	e010      	b.n	8000ad4 <buttonInit+0x54>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <buttonInit+0x6c>)
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	4413      	add	r3, r2
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <buttonInit+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(button_tbl[HW_BUTTON_MAX_CH].port, &GPIO_InitStruct);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <buttonInit+0x6c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <buttonInit+0x68>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fbc7 	bl	800225c <HAL_GPIO_Init>
  for(i=0; i<HW_BUTTON_MAX_CH; i++)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d9eb      	bls.n	8000ab2 <buttonInit+0x32>
  }
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	200001e0 	.word	0x200001e0
 8000aec:	20000004 	.word	0x20000004

08000af0 <ledInit>:
        {GPIOE, GPIO_PIN_5, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOB, GPIO_PIN_9, GPIO_PIN_SET  , GPIO_PIN_RESET}
    };

void ledInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <ledInit+0x98>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <ledInit+0x98>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <ledInit+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <ledInit+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <ledInit+0x98>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <ledInit+0x98>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <ledInit+0x9c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <ledInit+0x9c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <ledInit+0x9c>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	60da      	str	r2, [r3, #12]

  for(i=0;i<MAX_HW_LED_CH;i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e016      	b.n	8000b78 <ledInit+0x88>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <ledInit+0xa0>)
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4413      	add	r3, r2
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <ledInit+0x9c>)
 8000b58:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <ledInit+0xa0>)
 8000b5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b62:	490a      	ldr	r1, [pc, #40]	; (8000b8c <ledInit+0x9c>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fb79 	bl	800225c <HAL_GPIO_Init>

    ledOff(i);
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f811 	bl	8000b94 <ledOff>
  for(i=0;i<MAX_HW_LED_CH;i++)
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	3301      	adds	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d9e5      	bls.n	8000b4a <ledInit+0x5a>
  }


}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	200001f4 	.word	0x200001f4
 8000b90:	2000001c 	.word	0x2000001c

08000b94 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if(ch > MAX_HW_LED_CH)    return;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d811      	bhi.n	8000bc8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <ledOff+0x3c>)
 8000ba8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <ledOff+0x3c>)
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	8899      	ldrh	r1, [r3, #4]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <ledOff+0x3c>)
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	79db      	ldrb	r3, [r3, #7]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f001 fddf 	bl	8002784 <HAL_GPIO_WritePin>
 8000bc6:	e000      	b.n	8000bca <ledOff+0x36>
  if(ch > MAX_HW_LED_CH)    return;
 8000bc8:	bf00      	nop
}
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000001c 	.word	0x2000001c

08000bd4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if(ch > MAX_HW_LED_CH)    return;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b05      	cmp	r3, #5
 8000be2:	d80d      	bhi.n	8000c00 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <ledToggle+0x34>)
 8000be8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4906      	ldr	r1, [pc, #24]	; (8000c08 <ledToggle+0x34>)
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
 8000bf4:	889b      	ldrh	r3, [r3, #4]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	f001 fddb 	bl	80027b4 <HAL_GPIO_TogglePin>
 8000bfe:	e000      	b.n	8000c02 <ledToggle+0x2e>
  if(ch > MAX_HW_LED_CH)    return;
 8000c00:	bf00      	nop
}
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000001c 	.word	0x2000001c

08000c0c <swtimerInit>:
static volatile uint32_t sw_timer_counter         = 0;
static volatile uint16_t sw_timer_handle_index    = 0;
static swtimer_t    swtimer_tbl[SW_TIMER_MAX];            //타이머 배열 선언

bool swtimerInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;

  if(excute == 1)
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <swtimerInit+0x84>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <swtimerInit+0x12>
  {
    return false;           //이미 한번 실행했다면 정지
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e033      	b.n	8000c86 <swtimerInit+0x7a>
  }

  //구조체 초기화
  for(i=0;i<SW_TIMER_MAX;i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e029      	b.n	8000c78 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_Cnt      = 0;          //현재 타이머값 0으로 초기화
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	491b      	ldr	r1, [pc, #108]	; (8000c94 <swtimerInit+0x88>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	3304      	adds	r3, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_En       = OFF;        //타이머는 초기에 비활성화
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	4916      	ldr	r1, [pc, #88]	; (8000c94 <swtimerInit+0x88>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init     = 0;          //타이머 초기화될때 타이머값 변수 초기화
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4911      	ldr	r1, [pc, #68]	; (8000c94 <swtimerInit+0x88>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	440b      	add	r3, r1
 8000c58:	3308      	adds	r3, #8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFunt        = NULL;       //타이머 만료시 실행할 함수는 Null로 초기화
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <swtimerInit+0x88>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	330c      	adds	r3, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
  for(i=0;i<SW_TIMER_MAX;i++)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	3301      	adds	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d9d2      	bls.n	8000c24 <swtimerInit+0x18>
  }

  //한번 실행됬으므로 변수 1로 설정
  excute = 1;
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <swtimerInit+0x84>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]

  return true;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	200002b0 	.word	0x200002b0
 8000c94:	20000210 	.word	0x20000210

08000c98 <swtimerISR>:

/*
 * @ 타이머 인터럽트 발생시 ㅅ실행되는 인럽텁트 서비스 루틴
 */
void swtimerISR(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  uint8_t i;

  //설정된 주기마다 이 함수가 실행되므로 카운터 변수가 설정된 주기마다 1씩 증가한다.
  //여기서는 주기가 1ms이므로 1ms 주기로 카운터 변수가 1씩 증가한다.
  sw_timer_counter++;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <swtimerISR+0xfc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a3b      	ldr	r2, [pc, #236]	; (8000d94 <swtimerISR+0xfc>)
 8000ca6:	6013      	str	r3, [r2, #0]

  for(i=0;i<SW_TIMER_MAX && i<sw_timer_handle_index; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	e063      	b.n	8000d76 <swtimerISR+0xde>
  {
    if(swtimer_tbl[i].Timer_En == ON)                             //해당 타이머가 활성화 됬는지??
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	4939      	ldr	r1, [pc, #228]	; (8000d98 <swtimerISR+0x100>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d156      	bne.n	8000d70 <swtimerISR+0xd8>
    {
      swtimer_tbl[i].Timer_Cnt--;                                 //타이머 1씩 감소
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	4934      	ldr	r1, [pc, #208]	; (8000d98 <swtimerISR+0x100>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1e59      	subs	r1, r3, #1
 8000cd6:	4830      	ldr	r0, [pc, #192]	; (8000d98 <swtimerISR+0x100>)
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4403      	add	r3, r0
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Cnt == 0)                           //해당 활성화된 타이머가 계속감소하여 0이 됬다면
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	492b      	ldr	r1, [pc, #172]	; (8000d98 <swtimerISR+0x100>)
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d139      	bne.n	8000d70 <swtimerISR+0xd8>
      {
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)                 //타이머를 한번만 실행하는 모드라면
 8000cfc:	79fa      	ldrb	r2, [r7, #7]
 8000cfe:	4926      	ldr	r1, [pc, #152]	; (8000d98 <swtimerISR+0x100>)
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d108      	bne.n	8000d24 <swtimerISR+0x8c>
        {
          swtimer_tbl[i].Timer_En = OFF;                          //타이머를 비활성화 시킨다.
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	4920      	ldr	r1, [pc, #128]	; (8000d98 <swtimerISR+0x100>)
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
        }

        swtimer_tbl[i].Timer_Cnt = swtimer_tbl[i].Timer_Init;     //현재 타이머 값을 초기화 한다.
 8000d24:	79f9      	ldrb	r1, [r7, #7]
 8000d26:	79fa      	ldrb	r2, [r7, #7]
 8000d28:	481b      	ldr	r0, [pc, #108]	; (8000d98 <swtimerISR+0x100>)
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4403      	add	r3, r0
 8000d34:	3308      	adds	r3, #8
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	4817      	ldr	r0, [pc, #92]	; (8000d98 <swtimerISR+0x100>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4403      	add	r3, r0
 8000d44:	3304      	adds	r3, #4
 8000d46:	6019      	str	r1, [r3, #0]

        (*swtimer_tbl[i].TmrFunt)(swtimer_tbl[i].TmrFuntArg);     //함수를 실행한다.
 8000d48:	79fa      	ldrb	r2, [r7, #7]
 8000d4a:	4913      	ldr	r1, [pc, #76]	; (8000d98 <swtimerISR+0x100>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	330c      	adds	r3, #12
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	480e      	ldr	r0, [pc, #56]	; (8000d98 <swtimerISR+0x100>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4403      	add	r3, r0
 8000d68:	3310      	adds	r3, #16
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4788      	blx	r1
  for(i=0;i<SW_TIMER_MAX && i<sw_timer_handle_index; i++)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	3301      	adds	r3, #1
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	d806      	bhi.n	8000d8a <swtimerISR+0xf2>
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <swtimerISR+0x104>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d391      	bcc.n	8000cae <swtimerISR+0x16>
      }
    }
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000208 	.word	0x20000208
 8000d98:	20000210 	.word	0x20000210
 8000d9c:	2000020c 	.word	0x2000020c

08000da0 <swtimerSet>:

/*
 * @ 타이머 번호별로 모드, 실행할 함수설정
 * */
void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Func)(void*), void *arg)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	4613      	mov	r3, r2
 8000db0:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode    = TmrMode;      //해당 타이머 번호의 동작 모드
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	491a      	ldr	r1, [pc, #104]	; (8000e20 <swtimerSet+0x80>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	7bba      	ldrb	r2, [r7, #14]
 8000dc4:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFunt       = Func;          //해당 타이머 번호 타이머 만료 시 실행할 함수
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	4915      	ldr	r1, [pc, #84]	; (8000e20 <swtimerSet+0x80>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFuntArg    = arg;          //해당 타이머 번호 타이머 만료 시 실행할 함수의 입력 매개변수
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	4910      	ldr	r1, [pc, #64]	; (8000e20 <swtimerSet+0x80>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	3310      	adds	r3, #16
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Cnt     = TmrData;      //해당 타이머의 현재 카운터 값
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	490b      	ldr	r1, [pc, #44]	; (8000e20 <swtimerSet+0x80>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init    = TmrData;      //해당 타이머의 초기화 시 카운터 값
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	4906      	ldr	r1, [pc, #24]	; (8000e20 <swtimerSet+0x80>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	3308      	adds	r3, #8
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	601a      	str	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000210 	.word	0x20000210

08000e24 <swtimerStart>:


void swtimerStart(uint8_t TmrNum)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if(TmrNum  < SW_TIMER_MAX)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b07      	cmp	r3, #7
 8000e32:	d81a      	bhi.n	8000e6a <swtimerStart+0x46>
  {
    swtimer_tbl[TmrNum].Timer_Cnt = swtimer_tbl[TmrNum].Timer_Init;     //타이머 시작전에 카운터 변수 초기화
 8000e34:	79f9      	ldrb	r1, [r7, #7]
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <swtimerStart+0x50>)
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4403      	add	r3, r0
 8000e44:	3308      	adds	r3, #8
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <swtimerStart+0x50>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4403      	add	r3, r0
 8000e54:	3304      	adds	r3, #4
 8000e56:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En = ON;                                  //해당 타이머 번호가 시작됨을 알리는 변수 ON 설정
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	4906      	ldr	r1, [pc, #24]	; (8000e74 <swtimerStart+0x50>)
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000210 	.word	0x20000210

08000e78 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_Cnt = swtimer_tbl[TmrNum].Timer_Init;     //해당 타미머 카운터 변수 초기화
  swtimer_tbl[TmrNum].Timer_En  = OFF;                                //해당 타이머 비활성화
}

swtimer_handle_t swtimerGetHandle(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  swtimer_handle_t  TmrIndex = sw_timer_handle_index;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <swtimerGetHandle+0x2c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	80fb      	strh	r3, [r7, #6]

  sw_timer_handle_index++;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <swtimerGetHandle+0x2c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <swtimerGetHandle+0x2c>)
 8000e92:	801a      	strh	r2, [r3, #0]

  return TmrIndex;
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000020c 	.word	0x2000020c

08000ea8 <timerInit>:
    };

static hwtimer_t          timer_tbl[HWTIMER_MAX_CH];

void timerInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  timer_tbl[HWTIMER_TIMER1].freq                        = 1000000;      //인터럽트 발샐시키고자 하는 최소 단위 주파수 => 1MHz ==> 1us
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <timerInit+0x68>)
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <timerInit+0x6c>)
 8000eb0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                                                                        //Period와 곱하면 최종 인터럽트 발생주기(주파수)가 됨
  timer_tbl[HWTIMER_TIMER1].hTIM.Instance               = TIM3;         //TIM3 사용 설정
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <timerInit+0x68>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <timerInit+0x70>)
 8000eb8:	601a      	str	r2, [r3, #0]
   *  TIM3 Timer Max Clock : 84Mhz (System Clock / 2)
   *  (TIM3 Timer Max Clock / Prescaler)
   *
   *  84,000,000Hz / 4000Hz = 21,000
   */
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.Prescaler         = ((uint32_t)(SystemCoreClock / 2) / timer_tbl[HWTIMER_TIMER1].freq) - 1;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <timerInit+0x74>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	085a      	lsrs	r2, r3, #1
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <timerInit+0x68>)
 8000ec2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <timerInit+0x68>)
 8000ece:	6053      	str	r3, [r2, #4]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.ClockDivision     = 0;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <timerInit+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <timerInit+0x68>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <timerInit+0x68>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.RepetitionCounter = 0;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <timerInit+0x68>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]

  timer_tbl[HWTIMER_TIMER1].p_func[0]                   = NULL;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <timerInit+0x68>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  timer_tbl[HWTIMER_TIMER1].p_func[1]                   = NULL;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <timerInit+0x68>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  timer_tbl[HWTIMER_TIMER1].p_func[2]                   = NULL;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <timerInit+0x68>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  timer_tbl[HWTIMER_TIMER1].p_func[3]                   = NULL;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <timerInit+0x68>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	200002b4 	.word	0x200002b4
 8000f14:	000f4240 	.word	0x000f4240
 8000f18:	40000400 	.word	0x40000400
 8000f1c:	20000000 	.word	0x20000000

08000f20 <timerSetPeriod>:
/*
 *  @ 하드웨어 타이머가 가지고 있는 출력 비교 채널중 사용자가 설정하고자 하는 채널이
 *  인터럽트를 발생할 주기를 설정하는 함수임
 */
void timerSetPeriod(uint8_t ch, uint32_t us)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  hwtimer_t         *p_timer;   //타이머 핸들러 구조체 포인터 변수 선언

  uint32_t period;
  uint32_t time_div;

  if(ch > TIMER_MAX_CH)        return;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d820      	bhi.n	8000f74 <timerSetPeriod+0x54>

  p_timer = &timer_tbl[hwtimer_index[ch].number];   //해당 채널의 구조체 변수 주소값 포인터 변수에 저장
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <timerSetPeriod+0x60>)
 8000f36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	23cc      	movs	r3, #204	; 0xcc
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <timerSetPeriod+0x64>)
 8000f44:	4413      	add	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

  time_div = 1000000 / p_timer->freq;     //1000000 / 4000 = 250
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <timerSetPeriod+0x68>)
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	60fb      	str	r3, [r7, #12]

  period = us / time_div;   // ex) 만약 us 가 1000*1000 이라면 period는 1000000 / 250 = 4000 이다.
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]

  if(period == 0)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <timerSetPeriod+0x4a>
  {
    period = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  //최종 타이머 인터럽트 발생 주기는 Timer Max Clock / Prescaler 을 시간으로 환산한 다음
  //아래 Period 값을 곱해준다.
  //Timer Max Clock / Prescaler 은 4000 이고 시간으로 환산하면 0.00025 sec 이다.
  //0.00025 sec 를 period 4000 곱하면 1 sec가 되어
  //1초 주기로 타이머 인터럽트가 발생하도록 설정되게 된다.
  p_timer->hTIM.Init.Period = period - 1;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	e000      	b.n	8000f76 <timerSetPeriod+0x56>
  if(ch > TIMER_MAX_CH)        return;
 8000f74:	bf00      	nop
}
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000044 	.word	0x20000044
 8000f84:	200002b4 	.word	0x200002b4
 8000f88:	000f4240 	.word	0x000f4240

08000f8c <timerStart>:
  //구조파 함수 포인터 변수를 null 처리한다.
  p_timer->p_func[hwtimer_index[ch].index] = NULL;
}

void timerStart(uint8_t ch)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  //함수내에서 구조체 변수에 접근하기 위해 구조체 포인터 변수 선언한다.
  hwtimer_t         *p_timer;
  uint32_t timer_sub_ch = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]

  if(ch > TIMER_MAX_CH)         return;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d845      	bhi.n	800102c <timerStart+0xa0>

  p_timer = &timer_tbl[hwtimer_index[ch].number];
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4a24      	ldr	r2, [pc, #144]	; (8001034 <timerStart+0xa8>)
 8000fa4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	23cc      	movs	r3, #204	; 0xcc
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <timerStart+0xac>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]

  switch(hwtimer_index[ch].index)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <timerStart+0xa8>)
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	785b      	ldrb	r3, [r3, #1]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d817      	bhi.n	8000ff4 <timerStart+0x68>
 8000fc4:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <timerStart+0x40>)
 8000fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fca:	bf00      	nop
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000fe3 	.word	0x08000fe3
 8000fd4:	08000fe9 	.word	0x08000fe9
 8000fd8:	08000fef 	.word	0x08000fef
  {
    case HWTIMER_CH1:
      timer_sub_ch = TIM_CHANNEL_1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
      break;
 8000fe0:	e008      	b.n	8000ff4 <timerStart+0x68>

    case HWTIMER_CH2:
      timer_sub_ch = TIM_CHANNEL_2;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	60fb      	str	r3, [r7, #12]
     break;
 8000fe6:	e005      	b.n	8000ff4 <timerStart+0x68>

    case HWTIMER_CH3:
      timer_sub_ch = TIM_CHANNEL_3;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	60fb      	str	r3, [r7, #12]
     break;
 8000fec:	e002      	b.n	8000ff4 <timerStart+0x68>

    case HWTIMER_CH4:
      timer_sub_ch = TIM_CHANNEL_4;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	60fb      	str	r3, [r7, #12]
     break;
 8000ff2:	bf00      	nop
  }
  //TIM3의 Output Compare 기능을 사용하므로 해당 초기화 함수를 이용하여 초기화 한다.
  HAL_TIM_OC_Init(&p_timer->hTIM);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fac6 	bl	8004588 <HAL_TIM_OC_Init>
  //TIM3 Output Compare 파라미터를 설정한다.
  HAL_TIM_OC_ConfigChannel(&p_timer->hTIM, &p_timer->sConfig[hwtimer_index[ch].index], timer_sub_ch);
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <timerStart+0xa8>)
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	461a      	mov	r2, r3
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	3348      	adds	r3, #72	; 0x48
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4619      	mov	r1, r3
 800101c:	f003 fd22 	bl	8004a64 <HAL_TIM_OC_ConfigChannel>
  //TIM3 Output Compare 인터럽트 동작을 시작한다.
  HAL_TIM_OC_Start_IT(&p_timer->hTIM, timer_sub_ch);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	4618      	mov	r0, r3
 8001026:	f003 faff 	bl	8004628 <HAL_TIM_OC_Start_IT>
 800102a:	e000      	b.n	800102e <timerStart+0xa2>
  if(ch > TIMER_MAX_CH)         return;
 800102c:	bf00      	nop
}
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000044 	.word	0x20000044
 8001038:	200002b4 	.word	0x200002b4

0800103c <timerCallBack>:

void timerCallBack(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t index;
  hwtimer_t         *p_timer;

  for(i=0;i<TIMER_MAX_CH;i++)
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
 8001048:	e02c      	b.n	80010a4 <timerCallBack+0x68>
  {
    p_timer = &timer_tbl[hwtimer_index[i].number];
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <timerCallBack+0x78>)
 800104e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001052:	461a      	mov	r2, r3
 8001054:	23cc      	movs	r3, #204	; 0xcc
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <timerCallBack+0x7c>)
 800105c:	4413      	add	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
    index   = hwtimer_index[i].index;
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <timerCallBack+0x78>)
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	60fb      	str	r3, [r7, #12]

    //사용할 Output Compare 채널이 맞다면
    if(htim->Channel == hwtimer_index[i].active_channel)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7f1b      	ldrb	r3, [r3, #28]
 8001070:	4619      	mov	r1, r3
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <timerCallBack+0x78>)
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4299      	cmp	r1, r3
 800107e:	d10e      	bne.n	800109e <timerCallBack+0x62>
    {
      //등록된 함수가 존재한다면
      if(p_timer->p_func[index] != NULL)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	332e      	adds	r3, #46	; 0x2e
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <timerCallBack+0x62>
      {
        //등록된 함수를 불려온다.
        (*p_timer->p_func[index])();
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	332e      	adds	r3, #46	; 0x2e
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4798      	blx	r3
  for(i=0;i<TIMER_MAX_CH;i++)
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	3301      	adds	r3, #1
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d9cf      	bls.n	800104a <timerCallBack+0xe>
      }
    }
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000044 	.word	0x20000044
 80010b8:	200002b4 	.word	0x200002b4

080010bc <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&timer_tbl[HWTIMER_CH1].hTIM);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM3_IRQHandler+0x10>)
 80010c2:	f003 fbc7 	bl	8004854 <HAL_TIM_IRQHandler>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002b4 	.word	0x200002b4

080010d0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  timerCallBack(htim);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffaf 	bl	800103c <timerCallBack>
  swtimerISR();
 80010de:	f7ff fddb 	bl	8000c98 <swtimerISR>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_TIM_OC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  }
}

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == timer_tbl[HWTIMER_CH1].hTIM.Instance)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_TIM_OC_MspInit+0x48>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d115      	bne.n	800112c <HAL_TIM_OC_MspInit+0x40>
  {
    //TIM3 클릭을 활성화 한다.
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_TIM_OC_MspInit+0x4c>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_TIM_OC_MspInit+0x4c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_TIM_OC_MspInit+0x4c>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    //인터럽트 우선순위를 설정하고, 활성화 한다.
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	210f      	movs	r1, #15
 8001120:	201d      	movs	r0, #29
 8001122:	f000 fbfa 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001126:	201d      	movs	r0, #29
 8001128:	f000 fc13 	bl	8001952 <HAL_NVIC_EnableIRQ>
  }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002b4 	.word	0x200002b4
 8001138:	40023800 	.word	0x40023800

0800113c <uartInit>:

void uartStartRx(uint8_t ch);         //uart 수신시작 설정 함수
void uartRxHandler(uint8_t ch);       //uart 수신 핸들러 함수

void uartInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i=0;i<UART_MAX_CH;i++)
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e025      	b.n	8001194 <uartInit+0x58>
  {
    uart_tbl[i].is_open   = false;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <uartInit+0x6c>)
 800114c:	21d0      	movs	r1, #208	; 0xd0
 800114e:	fb01 f303 	mul.w	r3, r1, r3
 8001152:	4413      	add	r3, r2
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].vcp_mode  = false;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <uartInit+0x6c>)
 800115c:	21d0      	movs	r1, #208	; 0xd0
 800115e:	fb01 f303 	mul.w	r3, r1, r3
 8001162:	4413      	add	r3, r2
 8001164:	3308      	adds	r3, #8
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    //uart_tbl[i].rx_mode   = UART_MODE_INTERRUPT;
    //uart_tbl[i].tx_mode   = UART_MODE_INTERRUPT;
    uart_tbl[i].rx_mode   = UART_MODE_DMA;
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <uartInit+0x6c>)
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	4413      	add	r3, r2
 8001176:	330a      	adds	r3, #10
 8001178:	2202      	movs	r2, #2
 800117a:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode   = UART_MODE_DMA;
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <uartInit+0x6c>)
 8001180:	21d0      	movs	r1, #208	; 0xd0
 8001182:	fb01 f303 	mul.w	r3, r1, r3
 8001186:	4413      	add	r3, r2
 8001188:	3309      	adds	r3, #9
 800118a:	2202      	movs	r2, #2
 800118c:	701a      	strb	r2, [r3, #0]
  for(i=0;i<UART_MAX_CH;i++)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3301      	adds	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0d6      	beq.n	8001148 <uartInit+0xc>
  }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000434 	.word	0x20000434

080011ac <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 80011b8:	2301      	movs	r3, #1
 80011ba:	75fb      	strb	r3, [r7, #23]
  uart_t  *p_uart;        //uart 핸들용 구조체 포인터 변수 선언


  if(ch > UART_MAX_CH)    return false;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d901      	bls.n	80011c6 <uartOpen+0x1a>
 80011c2:	2300      	movs	r3, #0
 80011c4:	e060      	b.n	8001288 <uartOpen+0xdc>

  switch(ch)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d15c      	bne.n	8001286 <uartOpen+0xda>
  {
    case _DEF_UART1:

      p_uart = &uart_tbl[ch];
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	22d0      	movs	r2, #208	; 0xd0
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <uartOpen+0xe4>)
 80011d6:	4413      	add	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]

      p_uart->baud = baud;
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
      p_uart->vcp_mode  = false;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2200      	movs	r2, #0
 80011ea:	721a      	strb	r2, [r3, #8]
      //p_uart->rx_mode   = UART_MODE_DMA;
      //p_uart->tx_mode   = UART_MODE_DMA;
      //p_uart->rx_mode     = UART_MODE_INTERRUPT;
      //p_uart->tx_mode     = UART_MODE_INTERRUPT;

      huart1.Instance           = USART1;
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <uartOpen+0xe8>)
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <uartOpen+0xec>)
 80011f0:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate      = baud;
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <uartOpen+0xe8>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength    = UART_WORDLENGTH_8B;
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <uartOpen+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits      = UART_STOPBITS_1;
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <uartOpen+0xe8>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity        = UART_PARITY_NONE;
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <uartOpen+0xe8>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode          = UART_MODE_TX_RX;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <uartOpen+0xe8>)
 800120c:	220c      	movs	r2, #12
 800120e:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl     = UART_HWCONTROL_NONE;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <uartOpen+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling  = UART_OVERSAMPLING_16;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <uartOpen+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 800121c:	481d      	ldr	r0, [pc, #116]	; (8001294 <uartOpen+0xe8>)
 800121e:	f003 ff6e 	bl	80050fe <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &uart_rx_qbuf[0], UART_RX_QBUF_LENGTH);    //큐 버퍼 생성
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <uartOpen+0xf0>)
 8001228:	4413      	add	r3, r2
 800122a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122e:	491c      	ldr	r1, [pc, #112]	; (80012a0 <uartOpen+0xf4>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbc0 	bl	80009b6 <qbufferCreate>

      if(p_uart->rx_mode == UART_MODE_DMA)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	7a9b      	ldrb	r3, [r3, #10]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d115      	bne.n	800126a <uartOpen+0xbe>
      {
        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <uartOpen+0xf8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <uartOpen+0xf8>)
 8001248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <uartOpen+0xf8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	203a      	movs	r0, #58	; 0x3a
 8001260:	f000 fb5b 	bl	800191a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001264:	203a      	movs	r0, #58	; 0x3a
 8001266:	f000 fb74 	bl	8001952 <HAL_NVIC_EnableIRQ>
      }

      if(HAL_UART_Init(&huart1) != HAL_OK)                                          //uart 초기화
 800126a:	480a      	ldr	r0, [pc, #40]	; (8001294 <uartOpen+0xe8>)
 800126c:	f003 fefa 	bl	8005064 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <uartOpen+0xd0>
      {
        ret = false;
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]
      else
      {
        uartStartRx(ch);
      }

      break;
 800127a:	e003      	b.n	8001284 <uartOpen+0xd8>
        uartStartRx(ch);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f812 	bl	80012a8 <uartStartRx>
      break;
 8001284:	bf00      	nop
  }
  return ret;
 8001286:	7dfb      	ldrb	r3, [r7, #23]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000434 	.word	0x20000434
 8001294:	20000380 	.word	0x20000380
 8001298:	40011000 	.word	0x40011000
 800129c:	20000424 	.word	0x20000424
 80012a0:	20000504 	.word	0x20000504
 80012a4:	40023800 	.word	0x40023800

080012a8 <uartStartRx>:

/**
 * @uart 수신시작 설정 함수
 */
void uartStartRx(uint8_t ch)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  uart_t        *p_uart;

  p_uart = &uart_tbl[ch];
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	22d0      	movs	r2, #208	; 0xd0
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <uartStartRx+0x8c>)
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d132      	bne.n	800132c <uartStartRx+0x84>
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	7a9b      	ldrb	r3, [r3, #10]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d104      	bne.n	80012d8 <uartStartRx+0x30>
      {
        //HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_qbuf[0], 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	4919      	ldr	r1, [pc, #100]	; (8001338 <uartStartRx+0x90>)
 80012d2:	481a      	ldr	r0, [pc, #104]	; (800133c <uartStartRx+0x94>)
 80012d4:	f003 ffd4 	bl	8005280 <HAL_UART_Receive_IT>
      }

      if(p_uart->rx_mode == UART_MODE_DMA)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	7a9b      	ldrb	r3, [r3, #10]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d122      	bne.n	8001326 <uartStartRx+0x7e>
      {
        //if(HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t*)&uart_rx_qbuf[0], 256) != HAL_OK)
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t*)&uart_rx_qbuf[0], 256) != HAL_OK)
 80012e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e4:	4914      	ldr	r1, [pc, #80]	; (8001338 <uartStartRx+0x90>)
 80012e6:	4815      	ldr	r0, [pc, #84]	; (800133c <uartStartRx+0x94>)
 80012e8:	f003 fffa 	bl	80052e0 <HAL_UART_Receive_DMA>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11b      	bne.n	800132a <uartStartRx+0x82>
        {
          return;
        }
        //p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma.Instance->NDTR;
        qbuffer[ch].ptr_in = qbuffer[ch].length - hdma_usart1_rx.Instance->NDTR;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <uartStartRx+0x98>)
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	3308      	adds	r3, #8
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <uartStartRx+0x9c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	1a8a      	subs	r2, r1, r2
 8001308:	490d      	ldr	r1, [pc, #52]	; (8001340 <uartStartRx+0x98>)
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	440b      	add	r3, r1
 800130e:	601a      	str	r2, [r3, #0]
        //p_uart->qbuffer_rx.ptr_out = p_uart->qbuffer_rx.ptr_in;
        qbuffer[ch].ptr_out = qbuffer[ch].ptr_in;
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	490a      	ldr	r1, [pc, #40]	; (8001340 <uartStartRx+0x98>)
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	440a      	add	r2, r1
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	4908      	ldr	r1, [pc, #32]	; (8001340 <uartStartRx+0x98>)
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	3304      	adds	r3, #4
 8001324:	601a      	str	r2, [r3, #0]
      }
      break;
 8001326:	bf00      	nop
 8001328:	e000      	b.n	800132c <uartStartRx+0x84>
          return;
 800132a:	bf00      	nop
  }
}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000434 	.word	0x20000434
 8001338:	20000504 	.word	0x20000504
 800133c:	20000380 	.word	0x20000380
 8001340:	20000424 	.word	0x20000424
 8001344:	200003c4 	.word	0x200003c4

08001348 <uartWrite>:

  return ret;
}

int32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]

  uart_t    *p_uart;
  p_uart = &uart_tbl[ch];
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	22d0      	movs	r2, #208	; 0xd0
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <uartWrite+0x74>)
 8001364:	4413      	add	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

  switch(ch)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d120      	bne.n	80013b0 <uartWrite+0x68>
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_DMA)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	7a9b      	ldrb	r3, [r3, #10]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d10b      	bne.n	800138e <uartWrite+0x46>
      {
        if(HAL_UART_Transmit(&huart1, p_data, length, 100) == HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	b29a      	uxth	r2, r3
 800137a:	2364      	movs	r3, #100	; 0x64
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4810      	ldr	r0, [pc, #64]	; (80013c0 <uartWrite+0x78>)
 8001380:	f003 feec 	bl	800515c <HAL_UART_Transmit>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <uartWrite+0x46>
        {
          ret = length;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	617b      	str	r3, [r7, #20]
        }
      }

      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	7a9b      	ldrb	r3, [r3, #10]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10b      	bne.n	80013ae <uartWrite+0x66>
      {
        if(HAL_UART_Transmit(&huart1, p_data, length, 100) == HAL_OK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	b29a      	uxth	r2, r3
 800139a:	2364      	movs	r3, #100	; 0x64
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <uartWrite+0x78>)
 80013a0:	f003 fedc 	bl	800515c <HAL_UART_Transmit>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <uartWrite+0x66>
        {
          ret = length;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	617b      	str	r3, [r7, #20]
        }
      }
      break;
 80013ae:	bf00      	nop
  }

  return ret;
 80013b0:	697b      	ldr	r3, [r7, #20]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000434 	.word	0x20000434
 80013c0:	20000380 	.word	0x20000380

080013c4 <uartPrintf>:

  return ret;
}

int32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 80013c4:	b40e      	push	{r1, r2, r3}
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b0c7      	sub	sp, #284	; 0x11c
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4602      	mov	r2, r0
 80013ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013d2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80013d6:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list   args;
  int len;
  int32_t ret = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_start(args, fmt);
 80013de:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80013e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013ea:	601a      	str	r2, [r3, #0]

  len = vsnprintf(buf, 256, fmt, args);
 80013ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013f4:	f107 0010 	add.w	r0, r7, #16
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001402:	f009 fa41 	bl	800a888 <vsniprintf>
 8001406:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  ret = uartWrite(ch, (uint8_t*)buf, len);
 800140a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800140e:	f107 0110 	add.w	r1, r7, #16
 8001412:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001416:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff93 	bl	8001348 <uartWrite>
 8001422:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  va_end(args);

  return ret;
 8001426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 800142a:	4618      	mov	r0, r3
 800142c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001430:	46bd      	mov	sp, r7
 8001432:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001436:	b003      	add	sp, #12
 8001438:	4770      	bx	lr
	...

0800143c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(uart_tbl[_DEF_UART1].rx_mode == UART_MODE_INTERRUPT)
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_UART_RxCpltCallback+0x34>)
 8001446:	7a9b      	ldrb	r3, [r3, #10]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d10c      	bne.n	8001466 <HAL_UART_RxCpltCallback+0x2a>
  {
    qbufferWrite(&qbuffer[_DEF_UART1], &qbuffer[_DEF_UART1].p_buf[0], 1); //uart rx 수신데이터를 큐버퍼에 쓴다.
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_UART_RxCpltCallback+0x38>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <HAL_UART_RxCpltCallback+0x38>)
 8001456:	f7ff fad1 	bl	80009fc <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_qbuf[0], 1);  //수신인터럽트를 다시 활성화 한다.
 800145a:	2201      	movs	r2, #1
 800145c:	4906      	ldr	r1, [pc, #24]	; (8001478 <HAL_UART_RxCpltCallback+0x3c>)
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <HAL_UART_RxCpltCallback+0x40>)
 8001460:	f003 ff0e 	bl	8005280 <HAL_UART_Receive_IT>
 8001464:	e000      	b.n	8001468 <HAL_UART_RxCpltCallback+0x2c>
  }
  else
  {
    return;
 8001466:	bf00      	nop
  }
}
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000434 	.word	0x20000434
 8001474:	20000424 	.word	0x20000424
 8001478:	20000504 	.word	0x20000504
 800147c:	20000380 	.word	0x20000380

08001480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a35      	ldr	r2, [pc, #212]	; (8001574 <HAL_UART_MspInit+0xf4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d163      	bne.n	800156a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_UART_MspInit+0xf8>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <HAL_UART_MspInit+0xf8>)
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_UART_MspInit+0xf8>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_UART_MspInit+0xf8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <HAL_UART_MspInit+0xf8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_UART_MspInit+0xf8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ec:	2307      	movs	r3, #7
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4821      	ldr	r0, [pc, #132]	; (800157c <HAL_UART_MspInit+0xfc>)
 80014f8:	f000 feb0 	bl	800225c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_UART_MspInit+0x100>)
 80014fe:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_UART_MspInit+0x104>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001508:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_UART_MspInit+0x100>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x100>)
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_UART_MspInit+0x100>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800153e:	4810      	ldr	r0, [pc, #64]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001540:	f000 fa30 	bl	80019a4 <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800154a:	f000 f843 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001552:	639a      	str	r2, [r3, #56]	; 0x38
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_UART_MspInit+0x100>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2025      	movs	r0, #37	; 0x25
 8001560:	f000 f9db 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001564:	2025      	movs	r0, #37	; 0x25
 8001566:	f000 f9f4 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40011000 	.word	0x40011000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	200003c4 	.word	0x200003c4
 8001584:	40026440 	.word	0x40026440

08001588 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_UART_MspDeInit+0x40>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d112      	bne.n	80015c0 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_UART_MspDeInit+0x44>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_UART_MspDeInit+0x44>)
 80015a0:	f023 0310 	bic.w	r3, r3, #16
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80015a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <HAL_UART_MspDeInit+0x48>)
 80015ac:	f000 fff0 	bl	8002590 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 faa3 	bl	8001b00 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80015ba:	2025      	movs	r0, #37	; 0x25
 80015bc:	f000 f9d7 	bl	800196e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40011000 	.word	0x40011000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <Error_Handler>:
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>

080015de <hwInit>:




void hwInit(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  bspInit();
 80015e2:	f7ff f81f 	bl	8000624 <bspInit>
  ledInit();
 80015e6:	f7ff fa83 	bl	8000af0 <ledInit>
  buttonInit();
 80015ea:	f7ff fa49 	bl	8000a80 <buttonInit>
  timerInit();
 80015ee:	f7ff fc5b 	bl	8000ea8 <timerInit>
  swtimerInit();
 80015f2:	f7ff fb0b 	bl	8000c0c <swtimerInit>
  uartInit();
 80015f6:	f7ff fda1 	bl	800113c <uartInit>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f96b 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	200f      	movs	r0, #15
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff f8ee 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f991 	bl	800198a <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f94b 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	20000068 	.word	0x20000068
 80016a0:	20000064 	.word	0x20000064

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_IncTick+0x1c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_IncTick+0x20>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_IncTick+0x20>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000068 	.word	0x20000068
 80016c4:	20000604 	.word	0x20000604

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <HAL_GetTick+0x10>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000604 	.word	0x20000604

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff fff0 	bl	80016c8 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffe0 	bl	80016c8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000068 	.word	0x20000068

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4906      	ldr	r1, [pc, #24]	; (80017bc <__NVIC_EnableIRQ+0x34>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db12      	blt.n	80017f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	490a      	ldr	r1, [pc, #40]	; (8001804 <__NVIC_DisableIRQ+0x44>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	3320      	adds	r3, #32
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017ec:	f3bf 8f4f 	dsb	sy
}
 80017f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f2:	f3bf 8f6f 	isb	sy
}
 80017f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff09 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff1e 	bl	800176c <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff90 	bl	800185c <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5f 	bl	8001808 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff11 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff1f 	bl	80017c0 <__NVIC_DisableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff94 	bl	80018c0 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff fe8a 	bl	80016c8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e099      	b.n	8001af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e0:	e00f      	b.n	8001a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e2:	f7ff fe71 	bl	80016c8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d908      	bls.n	8001a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e078      	b.n	8001af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e8      	bne.n	80019e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_DMA_Init+0x158>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f023 0307 	bic.w	r3, r3, #7
 8001a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d117      	bne.n	8001ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb5d 	bl	8002168 <DMA_CheckFifoParam>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fb16 	bl	8002100 <DMA_CalcBaseAndBitshift>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	223f      	movs	r2, #63	; 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f010803f 	.word	0xf010803f

08001b00 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e050      	b.n	8001bb4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d101      	bne.n	8001b22 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e048      	b.n	8001bb4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2221      	movs	r2, #33	; 0x21
 8001b60:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 facc 	bl	8002100 <DMA_CalcBaseAndBitshift>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	223f      	movs	r2, #63	; 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_Start_IT+0x26>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e040      	b.n	8001c64 <HAL_DMA_Start_IT+0xa8>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d12f      	bne.n	8001c56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fa4a 	bl	80020a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	223f      	movs	r2, #63	; 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0216 	orr.w	r2, r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e005      	b.n	8001c62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c7a:	f7ff fd25 	bl	80016c8 <HAL_GetTick>
 8001c7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e052      	b.n	8001d44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0216 	bic.w	r2, r2, #22
 8001cac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <HAL_DMA_Abort+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0208 	bic.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cee:	e013      	b.n	8001d18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf0:	f7ff fcea 	bl	80016c8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d90c      	bls.n	8001d18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e015      	b.n	8001d44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1e4      	bne.n	8001cf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	223f      	movs	r2, #63	; 0x3f
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d004      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00c      	b.n	8001d84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_DMA_IRQHandler+0x248>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a8e      	ldr	r2, [pc, #568]	; (8001fdc <HAL_DMA_IRQHandler+0x24c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0a9b      	lsrs	r3, r3, #10
 8001da8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	2208      	movs	r2, #8
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2208      	movs	r2, #8
 8001dea:	409a      	lsls	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2201      	movs	r2, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2201      	movs	r2, #1
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2204      	movs	r2, #4
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2204      	movs	r2, #4
 8001e56:	409a      	lsls	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d043      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03c      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d024      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
 8001ebe:	e01f      	b.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0208 	bic.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2220      	movs	r2, #32
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 808f 	beq.w	8002030 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8087 	beq.w	8002030 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2220      	movs	r2, #32
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d136      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0216 	bic.w	r2, r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_DMA_IRQHandler+0x1da>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0208 	bic.w	r2, r2, #8
 8001f78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	223f      	movs	r2, #63	; 0x3f
 8001f80:	409a      	lsls	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d07e      	beq.n	800209c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
        }
        return;
 8001fa6:	e079      	b.n	800209c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e02c      	b.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e01e      	b.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10f      	bne.n	8002020 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0210 	bic.w	r2, r2, #16
 800200e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d032      	beq.n	800209e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d022      	beq.n	800208a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2205      	movs	r2, #5
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d307      	bcc.n	8002078 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_DMA_IRQHandler+0x2cc>
 8002076:	e000      	b.n	800207a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002078:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	e000      	b.n	800209e <HAL_DMA_IRQHandler+0x30e>
        return;
 800209c:	bf00      	nop
    }
  }
}
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d108      	bne.n	80020e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020e2:	e007      	b.n	80020f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
	...

08002100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3b10      	subs	r3, #16
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <DMA_CalcBaseAndBitshift+0x60>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <DMA_CalcBaseAndBitshift+0x64>)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d909      	bls.n	8002142 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	1d1a      	adds	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	659a      	str	r2, [r3, #88]	; 0x58
 8002140:	e007      	b.n	8002152 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	aaaaaaab 	.word	0xaaaaaaab
 8002164:	0800b1d0 	.word	0x0800b1d0

08002168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11f      	bne.n	80021c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d856      	bhi.n	8002236 <DMA_CheckFifoParam+0xce>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <DMA_CheckFifoParam+0x28>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a1 	.word	0x080021a1
 8002194:	080021b3 	.word	0x080021b3
 8002198:	080021a1 	.word	0x080021a1
 800219c:	08002237 	.word	0x08002237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d046      	beq.n	800223a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e043      	b.n	800223a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ba:	d140      	bne.n	800223e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c0:	e03d      	b.n	800223e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ca:	d121      	bne.n	8002210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d837      	bhi.n	8002242 <DMA_CheckFifoParam+0xda>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <DMA_CheckFifoParam+0x70>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021ef 	.word	0x080021ef
 80021e0:	080021e9 	.word	0x080021e9
 80021e4:	08002201 	.word	0x08002201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e030      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d025      	beq.n	8002246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fe:	e022      	b.n	8002246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800220e:	e01c      	b.n	800224a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d903      	bls.n	800221e <DMA_CheckFifoParam+0xb6>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d003      	beq.n	8002224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800221c:	e018      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
      break;
 8002222:	e015      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e00b      	b.n	800224e <DMA_CheckFifoParam+0xe6>
      break;
 8002236:	bf00      	nop
 8002238:	e00a      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e008      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e006      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e004      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;   
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
    }
  } 
  
  return status; 
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e16b      	b.n	8002550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 815a 	bne.w	800254a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b4 	beq.w	800254a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <HAL_GPIO_Init+0x308>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a5e      	ldr	r2, [pc, #376]	; (8002564 <HAL_GPIO_Init+0x308>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <HAL_GPIO_Init+0x308>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_GPIO_Init+0x30c>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a51      	ldr	r2, [pc, #324]	; (800256c <HAL_GPIO_Init+0x310>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02b      	beq.n	8002482 <HAL_GPIO_Init+0x226>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a50      	ldr	r2, [pc, #320]	; (8002570 <HAL_GPIO_Init+0x314>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x222>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4f      	ldr	r2, [pc, #316]	; (8002574 <HAL_GPIO_Init+0x318>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x21e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <HAL_GPIO_Init+0x31c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x21a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4d      	ldr	r2, [pc, #308]	; (800257c <HAL_GPIO_Init+0x320>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x216>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4c      	ldr	r2, [pc, #304]	; (8002580 <HAL_GPIO_Init+0x324>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x212>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4b      	ldr	r2, [pc, #300]	; (8002584 <HAL_GPIO_Init+0x328>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4a      	ldr	r2, [pc, #296]	; (8002588 <HAL_GPIO_Init+0x32c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x20a>
 8002462:	2307      	movs	r3, #7
 8002464:	e00e      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002466:	2308      	movs	r3, #8
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246a:	2306      	movs	r3, #6
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4934      	ldr	r1, [pc, #208]	; (8002568 <HAL_GPIO_Init+0x30c>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_GPIO_Init+0x330>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_GPIO_Init+0x330>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_GPIO_Init+0x330>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_GPIO_Init+0x330>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_GPIO_Init+0x330>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_GPIO_Init+0x330>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_GPIO_Init+0x330>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_GPIO_Init+0x330>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae90 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40023800 	.word	0x40023800
 8002568:	40013800 	.word	0x40013800
 800256c:	40020000 	.word	0x40020000
 8002570:	40020400 	.word	0x40020400
 8002574:	40020800 	.word	0x40020800
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40021000 	.word	0x40021000
 8002580:	40021400 	.word	0x40021400
 8002584:	40021800 	.word	0x40021800
 8002588:	40021c00 	.word	0x40021c00
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e0cd      	b.n	8002748 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ac:	2201      	movs	r2, #1
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	f040 80bd 	bne.w	8002742 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80025c8:	4a64      	ldr	r2, [pc, #400]	; (800275c <HAL_GPIO_DeInit+0x1cc>)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_GPIO_DeInit+0x1d0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02b      	beq.n	800264a <HAL_GPIO_DeInit+0xba>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_GPIO_DeInit+0x1d4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_DeInit+0xb6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a5a      	ldr	r2, [pc, #360]	; (8002768 <HAL_GPIO_DeInit+0x1d8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_DeInit+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_GPIO_DeInit+0x1dc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_DeInit+0xae>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_GPIO_DeInit+0x1e0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_DeInit+0xaa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a57      	ldr	r2, [pc, #348]	; (8002774 <HAL_GPIO_DeInit+0x1e4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_DeInit+0xa6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a56      	ldr	r2, [pc, #344]	; (8002778 <HAL_GPIO_DeInit+0x1e8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_DeInit+0xa2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a55      	ldr	r2, [pc, #340]	; (800277c <HAL_GPIO_DeInit+0x1ec>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_DeInit+0x9e>
 800262a:	2307      	movs	r3, #7
 800262c:	e00e      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 800262e:	2308      	movs	r3, #8
 8002630:	e00c      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 8002632:	2306      	movs	r3, #6
 8002634:	e00a      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_DeInit+0xbc>
 800264a:	2300      	movs	r3, #0
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d132      	bne.n	80026c2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	4946      	ldr	r1, [pc, #280]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 8002666:	4013      	ands	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	4943      	ldr	r1, [pc, #268]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 8002674:	4013      	ands	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	493f      	ldr	r1, [pc, #252]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 8002682:	4013      	ands	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43db      	mvns	r3, r3
 800268e:	493c      	ldr	r1, [pc, #240]	; (8002780 <HAL_GPIO_DeInit+0x1f0>)
 8002690:	4013      	ands	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <HAL_GPIO_DeInit+0x1cc>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	43da      	mvns	r2, r3
 80026b4:	4829      	ldr	r0, [pc, #164]	; (800275c <HAL_GPIO_DeInit+0x1cc>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	400a      	ands	r2, r1
 80026bc:	3302      	adds	r3, #2
 80026be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2103      	movs	r1, #3
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	08d2      	lsrs	r2, r2, #3
 80026f8:	4019      	ands	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2103      	movs	r1, #3
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	2101      	movs	r1, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2103      	movs	r1, #3
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	f67f af2e 	bls.w	80025ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40013800 	.word	0x40013800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40021400 	.word	0x40021400
 8002778:	40021800 	.word	0x40021800
 800277c:	40021c00 	.word	0x40021c00
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	43d9      	mvns	r1, r3
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	400b      	ands	r3, r1
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e8:	b08f      	sub	sp, #60	; 0x3c
 80027ea:	af0a      	add	r7, sp, #40	; 0x28
 80027ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e10f      	b.n	8002a18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f007 fcb8 	bl	800a188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2203      	movs	r2, #3
 800281c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 ffc8 	bl	80067cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	687e      	ldr	r6, [r7, #4]
 8002844:	466d      	mov	r5, sp
 8002846:	f106 0410 	add.w	r4, r6, #16
 800284a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002856:	e885 0003 	stmia.w	r5, {r0, r1}
 800285a:	1d33      	adds	r3, r6, #4
 800285c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800285e:	6838      	ldr	r0, [r7, #0]
 8002860:	f003 fea0 	bl	80065a4 <USB_CoreInit>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0d0      	b.n	8002a18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f003 ffb5 	bl	80067ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e04a      	b.n	800291e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	333d      	adds	r3, #61	; 0x3d
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	333c      	adds	r3, #60	; 0x3c
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	b298      	uxth	r0, r3
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3344      	adds	r3, #68	; 0x44
 80028c4:	4602      	mov	r2, r0
 80028c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3340      	adds	r3, #64	; 0x40
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3348      	adds	r3, #72	; 0x48
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334c      	adds	r3, #76	; 0x4c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3354      	adds	r3, #84	; 0x54
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3301      	adds	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3af      	bcc.n	8002888 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e044      	b.n	80029b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	3301      	adds	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d3b5      	bcc.n	800292e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	687e      	ldr	r6, [r7, #4]
 80029ca:	466d      	mov	r5, sp
 80029cc:	f106 0410 	add.w	r4, r6, #16
 80029d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e0:	1d33      	adds	r3, r6, #4
 80029e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	f003 ff4d 	bl	8006884 <USB_DevInit>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00d      	b.n	8002a18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f005 f890 	bl	8007b36 <USB_DevDisconnect>

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_PCD_Start+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e020      	b.n	8002a7e <HAL_PCD_Start+0x5e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d109      	bne.n	8002a60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d005      	beq.n	8002a60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 fea1 	bl	80067ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 f841 	bl	8007af6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a86:	b590      	push	{r4, r7, lr}
 8002a88:	b08d      	sub	sp, #52	; 0x34
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f005 f8f8 	bl	8007c92 <USB_GetMode>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 848a 	bne.w	80033be <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f005 f861 	bl	8007b76 <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8480 	beq.w	80033bc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f005 f84e 	bl	8007b76 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d107      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f002 0202 	and.w	r2, r2, #2
 8002af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f005 f83c 	bl	8007b76 <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d161      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	0c5b      	lsrs	r3, r3, #17
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d124      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d035      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a38      	ldr	r0, [r7, #32]
 8002b64:	f004 fe79 	bl	800785a <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b74:	441a      	add	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b86:	441a      	add	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	621a      	str	r2, [r3, #32]
 8002b8c:	e016      	b.n	8002bbc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	0c5b      	lsrs	r3, r3, #17
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d110      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6a38      	ldr	r0, [r7, #32]
 8002ba6:	f004 fe58 	bl	800785a <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	441a      	add	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0210 	orr.w	r2, r2, #16
 8002bca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 ffd0 	bl	8007b76 <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002be0:	f040 80a7 	bne.w	8002d32 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 ffd4 	bl	8007b9a <USB_ReadDevAllOutEpInterrupt>
 8002bf2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002bf4:	e099      	b.n	8002d2a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808e 	beq.w	8002d1e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 fff6 	bl	8007bfe <USB_ReadDevOutEPInterrupt>
 8002c12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fec2 	bl	80039bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2308      	movs	r3, #8
 8002c52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 ff98 	bl	8003b8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2310      	movs	r3, #16
 8002c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d030      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d109      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	78db      	ldrb	r3, [r3, #3]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d108      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f007 fb61 	bl	800a394 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	461a      	mov	r2, r3
 8002d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f47f af62 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 ff1d 	bl	8007b76 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d46:	f040 80db 	bne.w	8002f00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 ff3c 	bl	8007bcc <USB_ReadDevAllInEpInterrupt>
 8002d54:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d5a:	e0cd      	b.n	8002ef8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80c2 	beq.w	8002eec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 ff60 	bl	8007c38 <USB_ReadDevInEPInterrupt>
 8002d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d057      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69f9      	ldr	r1, [r7, #28]
 8002da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002da4:	4013      	ands	r3, r2
 8002da6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db4:	461a      	mov	r2, r3
 8002db6:	2301      	movs	r3, #1
 8002db8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d132      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	334c      	adds	r3, #76	; 0x4c
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4403      	add	r3, r0
 8002de2:	3348      	adds	r3, #72	; 0x48
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4419      	add	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4403      	add	r3, r0
 8002df6:	334c      	adds	r3, #76	; 0x4c
 8002df8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x3a2>
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3354      	adds	r3, #84	; 0x54
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e20:	461a      	mov	r2, r3
 8002e22:	2101      	movs	r1, #1
 8002e24:	f004 ff64 	bl	8007cf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f007 fa2b 	bl	800a28a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	2310      	movs	r3, #16
 8002e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e82:	461a      	mov	r2, r3
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e94:	6a38      	ldr	r0, [r7, #32]
 8002e96:	f003 fe59 	bl	8006b4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	3338      	adds	r3, #56	; 0x38
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f007 fa78 	bl	800a3b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fcda 	bl	80038a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	3301      	adds	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f af2e 	bne.w	8002d5c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 fe36 	bl	8007b76 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f14:	d122      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fec0 	bl	8003cc4 <HAL_PCDEx_LPM_Callback>
 8002f44:	e002      	b.n	8002f4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f007 fa16 	bl	800a378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fe08 	bl	8007b76 <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f70:	d112      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f007 f9d2 	bl	800a32c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fdea 	bl	8007b76 <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fac:	f040 80b7 	bne.w	800311e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2110      	movs	r1, #16
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fdbe 	bl	8006b4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd4:	e046      	b.n	8003064 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fe8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffa:	0151      	lsls	r1, r2, #5
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	440a      	add	r2, r1
 8003000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003004:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003008:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003016:	461a      	mov	r2, r3
 8003018:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800301c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302e:	0151      	lsls	r1, r2, #5
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	440a      	add	r2, r1
 8003034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003038:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800303c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	440a      	add	r2, r1
 8003054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003058:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800305c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	3301      	adds	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306a:	429a      	cmp	r2, r3
 800306c:	d3b3      	bcc.n	8002fd6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003080:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800309a:	f043 030b 	orr.w	r3, r3, #11
 800309e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b0:	f043 030b 	orr.w	r3, r3, #11
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44
 80030b6:	e015      	b.n	80030e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030de:	f043 030b 	orr.w	r3, r3, #11
 80030e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003108:	461a      	mov	r2, r3
 800310a:	f004 fdf1 	bl	8007cf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800311c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fd27 	bl	8007b76 <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003132:	d124      	bne.n	800317e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 fdb7 	bl	8007cac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 fd7e 	bl	8006c44 <USB_GetDevSpeed>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681c      	ldr	r4, [r3, #0]
 8003154:	f001 f9e6 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8003158:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	4620      	mov	r0, r4
 8003164:	f003 fa80 	bl	8006668 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f007 f8b6 	bl	800a2da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800317c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fcf7 	bl	8007b76 <USB_ReadInterrupts>
 8003188:	4603      	mov	r3, r0
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d10a      	bne.n	80031a8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f007 f893 	bl	800a2be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f002 0208 	and.w	r2, r2, #8
 80031a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fce2 	bl	8007b76 <USB_ReadInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d122      	bne.n	8003202 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	e014      	b.n	80031f8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb26 	bl	800383e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	3301      	adds	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3e5      	bcc.n	80031ce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f004 fcb5 	bl	8007b76 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003216:	d13b      	bne.n	8003290 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	e02b      	b.n	8003276 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3340      	adds	r3, #64	; 0x40
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d115      	bne.n	8003270 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003244:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	da12      	bge.n	8003270 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	333f      	adds	r3, #63	; 0x3f
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fae7 	bl	800383e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	429a      	cmp	r2, r3
 800327e:	d3ce      	bcc.n	800321e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800328e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fc6e 	bl	8007b76 <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a4:	d155      	bne.n	8003352 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a6:	2301      	movs	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	e045      	b.n	8003338 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d12e      	bne.n	8003332 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	da2b      	bge.n	8003332 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d121      	bne.n	8003332 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6053      	str	r3, [r2, #4]
            break;
 8003330:	e007      	b.n	8003342 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	3301      	adds	r3, #1
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	429a      	cmp	r2, r3
 8003340:	d3b4      	bcc.n	80032ac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f004 fc0d 	bl	8007b76 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d10a      	bne.n	800337e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f007 f837 	bl	800a3dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800337c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f004 fbf7 	bl	8007b76 <USB_ReadInterrupts>
 8003388:	4603      	mov	r3, r0
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d115      	bne.n	80033be <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f007 f827 	bl	800a3f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e000      	b.n	80033be <HAL_PCD_IRQHandler+0x938>
      return;
 80033bc:	bf00      	nop
    }
  }
}
 80033be:	3734      	adds	r7, #52	; 0x34
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd90      	pop	{r4, r7, pc}

080033c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_PCD_SetAddress+0x1a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e013      	b.n	8003406 <HAL_PCD_SetAddress+0x42>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 fb58 	bl	8007aac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	4608      	mov	r0, r1
 8003418:	4611      	mov	r1, r2
 800341a:	461a      	mov	r2, r3
 800341c:	4603      	mov	r3, r0
 800341e:	70fb      	strb	r3, [r7, #3]
 8003420:	460b      	mov	r3, r1
 8003422:	803b      	strh	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800342c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003430:	2b00      	cmp	r3, #0
 8003432:	da0f      	bge.n	8003454 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3338      	adds	r3, #56	; 0x38
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	705a      	strb	r2, [r3, #1]
 8003452:	e00f      	b.n	8003474 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003480:	883a      	ldrh	r2, [r7, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	78ba      	ldrb	r2, [r7, #2]
 800348a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800349e:	78bb      	ldrb	r3, [r7, #2]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_PCD_EP_Open+0xaa>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e00e      	b.n	80034d6 <HAL_PCD_EP_Open+0xc8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fbe0 	bl	8006c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80034d4:	7afb      	ldrb	r3, [r7, #11]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da0f      	bge.n	8003512 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	3338      	adds	r3, #56	; 0x38
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	705a      	strb	r2, [r3, #1]
 8003510:	e00f      	b.n	8003532 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 020f 	and.w	r2, r3, #15
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_PCD_EP_Close+0x6e>
 8003548:	2302      	movs	r3, #2
 800354a:	e00e      	b.n	800356a <HAL_PCD_EP_Close+0x8c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68f9      	ldr	r1, [r7, #12]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 fc1c 	bl	8006d98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	460b      	mov	r3, r1
 8003580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2200      	movs	r2, #0
 80035ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b4:	7afb      	ldrb	r3, [r7, #11]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	6979      	ldr	r1, [r7, #20]
 80035e6:	f003 fefb 	bl	80073e0 <USB_EP0StartXfer>
 80035ea:	e008      	b.n	80035fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	f003 fca9 	bl	8006f50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	460b      	mov	r3, r1
 8003644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003646:	7afb      	ldrb	r3, [r7, #11]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3338      	adds	r3, #56	; 0x38
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2201      	movs	r2, #1
 8003674:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003676:	7afb      	ldrb	r3, [r7, #11]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	b2da      	uxtb	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d102      	bne.n	8003690 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	f003 fe9a 	bl	80073e0 <USB_EP0StartXfer>
 80036ac:	e008      	b.n	80036c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6979      	ldr	r1, [r7, #20]
 80036bc:	f003 fc48 	bl	8006f50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d901      	bls.n	80036e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e050      	b.n	800378a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da0f      	bge.n	8003710 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	3338      	adds	r3, #56	; 0x38
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	705a      	strb	r2, [r3, #1]
 800370e:	e00d      	b.n	800372c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_PCD_EP_SetStall+0x82>
 8003748:	2302      	movs	r3, #2
 800374a:	e01e      	b.n	800378a <HAL_PCD_EP_SetStall+0xc0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f8d4 	bl	8007908 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	b2d9      	uxtb	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800377a:	461a      	mov	r2, r3
 800377c:	f004 fab8 	bl	8007cf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d901      	bls.n	80037b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e042      	b.n	8003836 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da0f      	bge.n	80037d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	3338      	adds	r3, #56	; 0x38
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	705a      	strb	r2, [r3, #1]
 80037d6:	e00f      	b.n	80037f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	b2da      	uxtb	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_PCD_EP_ClrStall+0x86>
 8003814:	2302      	movs	r3, #2
 8003816:	e00e      	b.n	8003836 <HAL_PCD_EP_ClrStall+0xa4>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	4618      	mov	r0, r3
 8003828:	f004 f8db 	bl	80079e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800384a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	da0c      	bge.n	800386c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	3338      	adds	r3, #56	; 0x38
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e00c      	b.n	8003886 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	4618      	mov	r0, r3
 800388e:	f003 fefe 	bl	800768e <USB_EPStopXfer>
 8003892:	4603      	mov	r3, r0
 8003894:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003896:	7afb      	ldrb	r3, [r7, #11]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	3338      	adds	r3, #56	; 0x38
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	3304      	adds	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d901      	bls.n	80038d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e06c      	b.n	80039b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d902      	bls.n	80038f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3303      	adds	r3, #3
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038fc:	e02b      	b.n	8003956 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	429a      	cmp	r2, r3
 8003912:	d902      	bls.n	800391a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3303      	adds	r3, #3
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003932:	b2db      	uxtb	r3, r3
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	4603      	mov	r3, r0
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f003 ff51 	bl	80077e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	b29b      	uxth	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	429a      	cmp	r2, r3
 800396a:	d809      	bhi.n	8003980 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003974:	429a      	cmp	r2, r3
 8003976:	d203      	bcs.n	8003980 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1be      	bne.n	80038fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	429a      	cmp	r2, r3
 800398a:	d811      	bhi.n	80039b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	2201      	movs	r2, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ac:	4013      	ands	r3, r2
 80039ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	333c      	adds	r3, #60	; 0x3c
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d17b      	bne.n	8003aea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4a61      	ldr	r2, [pc, #388]	; (8003b84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	f240 80b9 	bls.w	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80b3 	beq.w	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e0a7      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2320      	movs	r3, #32
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	e098      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 8093 	bne.w	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4a4b      	ldr	r2, [pc, #300]	; (8003b84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90f      	bls.n	8003a7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	e07e      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	0159      	lsls	r1, r3, #5
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d114      	bne.n	8003adc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	f004 f912 	bl	8007cf0 <USB_EP0_OutStart>
 8003acc:	e006      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f006 fbb6 	bl	800a254 <HAL_PCD_DataOutStageCallback>
 8003ae8:	e046      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d124      	bne.n	8003b3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0e:	6093      	str	r3, [r2, #8]
 8003b10:	e032      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f006 fb8d 	bl	800a254 <HAL_PCD_DataOutStageCallback>
 8003b3a:	e01d      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b64:	461a      	mov	r2, r3
 8003b66:	2100      	movs	r1, #0
 8003b68:	f004 f8c2 	bl	8007cf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f006 fb6e 	bl	800a254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	4f54300a 	.word	0x4f54300a
 8003b88:	4f54310a 	.word	0x4f54310a

08003b8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	333c      	adds	r3, #60	; 0x3c
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d90e      	bls.n	8003be0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f006 fb25 	bl	800a230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d90c      	bls.n	8003c08 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c00:	461a      	mov	r2, r3
 8003c02:	2101      	movs	r1, #1
 8003c04:	f004 f874 	bl	8007cf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	4f54300a 	.word	0x4f54300a

08003c18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
 8003c24:	4613      	mov	r3, r2
 8003c26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c36:	883b      	ldrh	r3, [r7, #0]
 8003c38:	0419      	lsls	r1, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
 8003c44:	e028      	b.n	8003c98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	4413      	add	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e00d      	b.n	8003c76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	3340      	adds	r3, #64	; 0x40
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	3301      	adds	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d3ec      	bcc.n	8003c5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c80:	883b      	ldrh	r3, [r7, #0]
 8003c82:	0418      	lsls	r0, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4302      	orrs	r2, r0
 8003c90:	3340      	adds	r3, #64	; 0x40
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e267      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b7e      	ldr	r3, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e242      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x74>
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a75      	ldr	r2, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x98>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6f      	ldr	r2, [pc, #444]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6c      	ldr	r2, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d74:	4b69      	ldr	r3, [pc, #420]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fd fc98 	bl	80016c8 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fd fc94 	bl	80016c8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e207      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b5b      	ldr	r3, [pc, #364]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fc84 	bl	80016c8 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fc80 	bl	80016c8 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1f3      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003df2:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1c7      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fd fc39 	bl	80016c8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fd fc35 	bl	80016c8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1a8      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4925      	ldr	r1, [pc, #148]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd fc18 	bl	80016c8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fd fc14 	bl	80016c8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e187      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fd fbf8 	bl	80016c8 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fd fbf4 	bl	80016c8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e167      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x200>
 8003efa:	e01b      	b.n	8003f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fd fbe1 	bl	80016c8 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e00e      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fbdd 	bl	80016c8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d907      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e150      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ea      	bne.n	8003f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b7a      	ldr	r3, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fb9d 	bl	80016c8 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fd fb99 	bl	80016c8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e10c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x2ea>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x30c>
 8003fce:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fe8:	4b58      	ldr	r3, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a54      	ldr	r2, [pc, #336]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd fb5e 	bl	80016c8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fd fb5a 	bl	80016c8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0cb      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	4b49      	ldr	r3, [pc, #292]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <HAL_RCC_OscConfig+0x334>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fd fb48 	bl	80016c8 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd fb44 	bl	80016c8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0b5      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ee      	bne.n	800403c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a1 	beq.w	80041bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b08      	cmp	r3, #8
 8004084:	d05c      	beq.n	8004140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d141      	bne.n	8004112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fd fb18 	bl	80016c8 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7fd fb14 	bl	80016c8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e087      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fd faed 	bl	80016c8 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd fae9 	bl	80016c8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e05c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x416>
 8004110:	e054      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fd fad6 	bl	80016c8 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fd fad2 	bl	80016c8 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e045      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x444>
 800413e:	e03d      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e038      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCC_OscConfig+0x4ec>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d028      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d121      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11a      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0cc      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d90c      	bls.n	8004208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800422a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d044      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d119      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e067      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4934      	ldr	r1, [pc, #208]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fd fa04 	bl	80016c8 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fd fa00 	bl	80016c8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e04f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d20c      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd f966 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00
 8004388:	40023800 	.word	0x40023800
 800438c:	0800b1b8 	.word	0x0800b1b8
 8004390:	20000000 	.word	0x20000000
 8004394:	20000064 	.word	0x20000064

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800439c:	b090      	sub	sp, #64	; 0x40
 800439e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	2300      	movs	r3, #0
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a8:	2300      	movs	r3, #0
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b0:	4b59      	ldr	r3, [pc, #356]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x40>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	f200 80a2 	bhi.w	8004506 <HAL_RCC_GetSysClockFreq+0x16e>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x34>
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ca:	e09c      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_GetSysClockFreq+0x184>)
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043d0:	e09c      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_GetSysClockFreq+0x188>)
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043d6:	e099      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d8:	4b4f      	ldr	r3, [pc, #316]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e2:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d027      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	2200      	movs	r2, #0
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	627a      	str	r2, [r7, #36]	; 0x24
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004400:	2100      	movs	r1, #0
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_GetSysClockFreq+0x188>)
 8004404:	fb03 f201 	mul.w	r2, r3, r1
 8004408:	2300      	movs	r3, #0
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	4413      	add	r3, r2
 8004410:	4a43      	ldr	r2, [pc, #268]	; (8004520 <HAL_RCC_GetSysClockFreq+0x188>)
 8004412:	fba0 2102 	umull	r2, r1, r0, r2
 8004416:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004418:	62ba      	str	r2, [r7, #40]	; 0x28
 800441a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441c:	4413      	add	r3, r2
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	2200      	movs	r2, #0
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	61fa      	str	r2, [r7, #28]
 8004428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004430:	f7fb ff1e 	bl	8000270 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443c:	e055      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443e:	4b36      	ldr	r3, [pc, #216]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	099b      	lsrs	r3, r3, #6
 8004444:	2200      	movs	r2, #0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	617a      	str	r2, [r7, #20]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004450:	f04f 0b00 	mov.w	fp, #0
 8004454:	4652      	mov	r2, sl
 8004456:	465b      	mov	r3, fp
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	0159      	lsls	r1, r3, #5
 8004462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004466:	0150      	lsls	r0, r2, #5
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	ebb2 080a 	subs.w	r8, r2, sl
 8004470:	eb63 090b 	sbc.w	r9, r3, fp
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004480:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004484:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004488:	ebb2 0408 	subs.w	r4, r2, r8
 800448c:	eb63 0509 	sbc.w	r5, r3, r9
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	eb14 030a 	adds.w	r3, r4, sl
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	eb45 030b 	adc.w	r3, r5, fp
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044bc:	4629      	mov	r1, r5
 80044be:	028b      	lsls	r3, r1, #10
 80044c0:	4620      	mov	r0, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	4604      	mov	r4, r0
 80044c6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80044ca:	4601      	mov	r1, r0
 80044cc:	028a      	lsls	r2, r1, #10
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	2200      	movs	r2, #0
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	60fa      	str	r2, [r7, #12]
 80044da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044de:	f7fb fec7 	bl	8000270 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4613      	mov	r3, r2
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	3301      	adds	r3, #1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004504:	e002      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x184>)
 8004508:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800450a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800450e:	4618      	mov	r0, r3
 8004510:	3740      	adds	r7, #64	; 0x40
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	017d7840 	.word	0x017d7840

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b02      	ldr	r3, [pc, #8]	; (8004534 <HAL_RCC_GetHCLKFreq+0x10>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	20000000 	.word	0x20000000

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800453c:	f7ff fff2 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0a9b      	lsrs	r3, r3, #10
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK1Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	0800b1c8 	.word	0x0800b1c8

08004560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004564:	f7ff ffde 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	0b5b      	lsrs	r3, r3, #13
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4903      	ldr	r1, [pc, #12]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40023800 	.word	0x40023800
 8004584:	0800b1c8 	.word	0x0800b1c8

08004588 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e041      	b.n	800461e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fd9c 	bl	80010ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 facc 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_TIM_OC_Start_IT+0x28>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e022      	b.n	8004696 <HAL_TIM_OC_Start_IT+0x6e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d109      	bne.n	800466a <HAL_TIM_OC_Start_IT+0x42>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	e015      	b.n	8004696 <HAL_TIM_OC_Start_IT+0x6e>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d109      	bne.n	8004684 <HAL_TIM_OC_Start_IT+0x5c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e008      	b.n	8004696 <HAL_TIM_OC_Start_IT+0x6e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0c7      	b.n	800482e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_OC_Start_IT+0x86>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ac:	e013      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0xae>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d104      	bne.n	80046be <HAL_TIM_OC_Start_IT+0x96>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046bc:	e00b      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0xae>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_OC_Start_IT+0xa6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046cc:	e003      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0xae>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d841      	bhi.n	8004760 <HAL_TIM_OC_Start_IT+0x138>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <HAL_TIM_OC_Start_IT+0xbc>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004761 	.word	0x08004761
 80046ec:	08004761 	.word	0x08004761
 80046f0:	08004761 	.word	0x08004761
 80046f4:	0800472b 	.word	0x0800472b
 80046f8:	08004761 	.word	0x08004761
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004761 	.word	0x08004761
 8004704:	0800473d 	.word	0x0800473d
 8004708:	08004761 	.word	0x08004761
 800470c:	08004761 	.word	0x08004761
 8004710:	08004761 	.word	0x08004761
 8004714:	0800474f 	.word	0x0800474f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0202 	orr.w	r2, r2, #2
 8004726:	60da      	str	r2, [r3, #12]
      break;
 8004728:	e01d      	b.n	8004766 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0204 	orr.w	r2, r2, #4
 8004738:	60da      	str	r2, [r3, #12]
      break;
 800473a:	e014      	b.n	8004766 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0208 	orr.w	r2, r2, #8
 800474a:	60da      	str	r2, [r3, #12]
      break;
 800474c:	e00b      	b.n	8004766 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0210 	orr.w	r2, r2, #16
 800475c:	60da      	str	r2, [r3, #12]
      break;
 800475e:	e002      	b.n	8004766 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      break;
 8004764:	bf00      	nop
  }

  if (status == HAL_OK)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d15f      	bne.n	800482c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fc3f 	bl	8004ff8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <HAL_TIM_OC_Start_IT+0x210>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_OC_Start_IT+0x166>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <HAL_TIM_OC_Start_IT+0x214>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_TIM_OC_Start_IT+0x16a>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_TIM_OC_Start_IT+0x16c>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_TIM_OC_Start_IT+0x210>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d01d      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_TIM_OC_Start_IT+0x218>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_TIM_OC_Start_IT+0x21c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_TIM_OC_Start_IT+0x220>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_TIM_OC_Start_IT+0x214>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIM_OC_Start_IT+0x224>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_OC_Start_IT+0x1d0>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_TIM_OC_Start_IT+0x228>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d111      	bne.n	800481c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b06      	cmp	r3, #6
 8004808:	d010      	beq.n	800482c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	e007      	b.n	800482c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40010400 	.word	0x40010400
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0202 	mvn.w	r2, #2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f949 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fc16 	bl	80010d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f94b 	bl	8004b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f91f 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fbec 	bl	80010d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f921 	bl	8004b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0208 	mvn.w	r2, #8
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8f5 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc fbc2 	bl	80010d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8f7 	bl	8004b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0210 	mvn.w	r2, #16
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2208      	movs	r2, #8
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8cb 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc fb98 	bl	80010d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8cd 	bl	8004b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0201 	mvn.w	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8a2 	bl	8004b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fb27 	bl	8005052 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f891 	bl	8004b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0220 	mvn.w	r2, #32
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 faf2 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e048      	b.n	8004b14 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d839      	bhi.n	8004b04 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004b05 	.word	0x08004b05
 8004aa0:	08004b05 	.word	0x08004b05
 8004aa4:	08004b05 	.word	0x08004b05
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004ae9 	.word	0x08004ae9
 8004abc:	08004b05 	.word	0x08004b05
 8004ac0:	08004b05 	.word	0x08004b05
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004af7 	.word	0x08004af7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f8e4 	bl	8004ca0 <TIM_OC1_SetConfig>
      break;
 8004ad8:	e017      	b.n	8004b0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f94d 	bl	8004d80 <TIM_OC2_SetConfig>
      break;
 8004ae6:	e010      	b.n	8004b0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9ba 	bl	8004e68 <TIM_OC3_SetConfig>
      break;
 8004af4:	e009      	b.n	8004b0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fa27 	bl	8004f50 <TIM_OC4_SetConfig>
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3f      	ldr	r2, [pc, #252]	; (8004c74 <TIM_Base_SetConfig+0x110>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d00f      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3b      	ldr	r2, [pc, #236]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3a      	ldr	r2, [pc, #232]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a39      	ldr	r2, [pc, #228]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2e      	ldr	r2, [pc, #184]	; (8004c74 <TIM_Base_SetConfig+0x110>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d027      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d023      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01f      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a28      	ldr	r2, [pc, #160]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d017      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a27      	ldr	r2, [pc, #156]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <TIM_Base_SetConfig+0x134>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <TIM_Base_SetConfig+0x138>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <TIM_Base_SetConfig+0x110>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800
 8004c94:	40001800 	.word	0x40001800
 8004c98:	40001c00 	.word	0x40001c00
 8004c9c:	40002000 	.word	0x40002000

08004ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0302 	bic.w	r3, r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <TIM_OC1_SetConfig+0xd8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC1_SetConfig+0x64>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <TIM_OC1_SetConfig+0xdc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0308 	bic.w	r3, r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC1_SetConfig+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC1_SetConfig+0x8e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <TIM_OC1_SetConfig+0xdc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d111      	bne.n	8004d52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	621a      	str	r2, [r3, #32]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40010400 	.word	0x40010400

08004d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0210 	bic.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0320 	bic.w	r3, r3, #32
 8004dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <TIM_OC2_SetConfig+0xe0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_OC2_SetConfig+0x68>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <TIM_OC2_SetConfig+0xe4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d10d      	bne.n	8004e04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <TIM_OC2_SetConfig+0xe0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_OC2_SetConfig+0x94>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <TIM_OC2_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d113      	bne.n	8004e3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40010400 	.word	0x40010400

08004e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <TIM_OC3_SetConfig+0xe0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC3_SetConfig+0x66>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <TIM_OC3_SetConfig+0xe4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10d      	bne.n	8004eea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <TIM_OC3_SetConfig+0xe0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC3_SetConfig+0x92>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a15      	ldr	r2, [pc, #84]	; (8004f4c <TIM_OC3_SetConfig+0xe4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40010400 	.word	0x40010400

08004f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <TIM_OC4_SetConfig+0xa0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC4_SetConfig+0x68>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <TIM_OC4_SetConfig+0xa4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d109      	bne.n	8004fcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	019b      	lsls	r3, r3, #6
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2201      	movs	r2, #1
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	43db      	mvns	r3, r3
 800501a:	401a      	ands	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1a      	ldr	r2, [r3, #32]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e03f      	b.n	80050f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc f9f8 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2224      	movs	r2, #36	; 0x24
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 ffff 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e021      	b.n	8005154 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005126:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fc fa2d 	bl	8001588 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b20      	cmp	r3, #32
 800517a:	d17c      	bne.n	8005276 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Transmit+0x2c>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e075      	b.n	8005278 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_UART_Transmit+0x3e>
 8005196:	2302      	movs	r3, #2
 8005198:	e06e      	b.n	8005278 <HAL_UART_Transmit+0x11c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2221      	movs	r2, #33	; 0x21
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b0:	f7fc fa8a 	bl	80016c8 <HAL_GetTick>
 80051b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d108      	bne.n	80051de <HAL_UART_Transmit+0x82>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e003      	b.n	80051e6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051ee:	e02a      	b.n	8005246 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	2180      	movs	r1, #128	; 0x80
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 fc4c 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e036      	b.n	8005278 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	3302      	adds	r3, #2
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e007      	b.n	8005238 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cf      	bne.n	80051f0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fc1c 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b20      	cmp	r3, #32
 8005298:	d11d      	bne.n	80052d6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_Receive_IT+0x26>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e016      	b.n	80052d8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Receive_IT+0x38>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e00f      	b.n	80052d8 <HAL_UART_Receive_IT+0x58>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	461a      	mov	r2, r3
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fc51 	bl	8005b74 <UART_Start_Receive_IT>
 80052d2:	4603      	mov	r3, r0
 80052d4:	e000      	b.n	80052d8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d11d      	bne.n	8005336 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_UART_Receive_DMA+0x26>
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e016      	b.n	8005338 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_UART_Receive_DMA+0x38>
 8005314:	2302      	movs	r3, #2
 8005316:	e00f      	b.n	8005338 <HAL_UART_Receive_DMA+0x58>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	461a      	mov	r2, r3
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fc5f 	bl	8005bf0 <UART_Start_Receive_DMA>
 8005332:	4603      	mov	r3, r0
 8005334:	e000      	b.n	8005338 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0ba      	sub	sp, #232	; 0xe8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005366:	2300      	movs	r3, #0
 8005368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800537e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_UART_IRQHandler+0x66>
 8005392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fdc8 	bl	8005f34 <UART_Receive_IT>
      return;
 80053a4:	e256      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80de 	beq.w	800556c <HAL_UART_IRQHandler+0x22c>
 80053b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80d1 	beq.w	800556c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <HAL_UART_IRQHandler+0xae>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f043 0201 	orr.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_UART_IRQHandler+0xd2>
 80053fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0202 	orr.w	r2, r3, #2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_UART_IRQHandler+0xf6>
 800541e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d011      	beq.n	8005466 <HAL_UART_IRQHandler+0x126>
 8005442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800544e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f043 0208 	orr.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 81ed 	beq.w	800584a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_UART_IRQHandler+0x14e>
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fd53 	bl	8005f34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_UART_IRQHandler+0x17a>
 80054b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d04f      	beq.n	800555a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc5d 	bl	8005d7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d141      	bne.n	8005552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1d9      	bne.n	80054ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	4a7d      	ldr	r2, [pc, #500]	; (800571c <HAL_UART_IRQHandler+0x3dc>)
 8005528:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	4618      	mov	r0, r3
 8005530:	f7fc fc0c 	bl	8001d4c <HAL_DMA_Abort_IT>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005544:	4610      	mov	r0, r2
 8005546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	e00e      	b.n	8005568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f998 	bl	8005880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	e00a      	b.n	8005568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f994 	bl	8005880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e006      	b.n	8005568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f990 	bl	8005880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005566:	e170      	b.n	800584a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	bf00      	nop
    return;
 800556a:	e16e      	b.n	800584a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	2b01      	cmp	r3, #1
 8005572:	f040 814a 	bne.w	800580a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8143 	beq.w	800580a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 813c 	beq.w	800580a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	f040 80b4 	bne.w	8005720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8140 	beq.w	800584e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055d6:	429a      	cmp	r2, r3
 80055d8:	f080 8139 	bcs.w	800584e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	f000 8088 	beq.w	8005702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800560c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800561e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800562a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1d9      	bne.n	80055f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800564e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3314      	adds	r3, #20
 800565e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800566a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e1      	bne.n	800563e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800568a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800568c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800569e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e3      	bne.n	800567a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d2:	f023 0310 	bic.w	r3, r3, #16
 80056d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e3      	bne.n	80056c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fc fab5 	bl	8001c6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800570a:	b29b      	uxth	r3, r3
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	b29b      	uxth	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f8bd 	bl	8005892 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005718:	e099      	b.n	800584e <HAL_UART_IRQHandler+0x50e>
 800571a:	bf00      	nop
 800571c:	08005e3f 	.word	0x08005e3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005728:	b29b      	uxth	r3, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 808b 	beq.w	8005852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800573c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8086 	beq.w	8005852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800575c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800576a:	647a      	str	r2, [r7, #68]	; 0x44
 800576c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e3      	bne.n	8005746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3314      	adds	r3, #20
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	623b      	str	r3, [r7, #32]
   return(result);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3314      	adds	r3, #20
 800579e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057a2:	633a      	str	r2, [r7, #48]	; 0x30
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e3      	bne.n	800577e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0310 	bic.w	r3, r3, #16
 80057da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057e8:	61fa      	str	r2, [r7, #28]
 80057ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	69b9      	ldr	r1, [r7, #24]
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	617b      	str	r3, [r7, #20]
   return(result);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e3      	bne.n	80057c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f845 	bl	8005892 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005808:	e023      	b.n	8005852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_UART_IRQHandler+0x4ea>
 8005816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fb1f 	bl	8005e66 <UART_Transmit_IT>
    return;
 8005828:	e014      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <HAL_UART_IRQHandler+0x514>
 8005836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fb5e 	bl	8005f04 <UART_EndTransmit_IT>
    return;
 8005848:	e004      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
    return;
 800584a:	bf00      	nop
 800584c:	e002      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
      return;
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
      return;
 8005852:	bf00      	nop
  }
}
 8005854:	37e8      	adds	r7, #232	; 0xe8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop

0800585c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b09c      	sub	sp, #112	; 0x70
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d172      	bne.n	80059aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c6:	2200      	movs	r2, #0
 80058c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e5      	bne.n	80058ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3314      	adds	r3, #20
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3314      	adds	r3, #20
 800591c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800591e:	647a      	str	r2, [r7, #68]	; 0x44
 8005920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e5      	bne.n	80058fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	623b      	str	r3, [r7, #32]
   return(result);
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005952:	633a      	str	r2, [r7, #48]	; 0x30
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	2b01      	cmp	r3, #1
 8005974:	d119      	bne.n	80059aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	60fb      	str	r3, [r7, #12]
   return(result);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f023 0310 	bic.w	r3, r3, #16
 800598c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005996:	61fa      	str	r2, [r7, #28]
 8005998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	617b      	str	r3, [r7, #20]
   return(result);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d106      	bne.n	80059c0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059b6:	4619      	mov	r1, r3
 80059b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059ba:	f7ff ff6a 	bl	8005892 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059be:	e002      	b.n	80059c6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80059c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059c2:	f7fb fd3b 	bl	800143c <HAL_UART_RxCpltCallback>
}
 80059c6:	bf00      	nop
 80059c8:	3770      	adds	r7, #112	; 0x70
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d108      	bne.n	80059f6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff ff4f 	bl	8005892 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059f4:	e002      	b.n	80059fc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ff39 	bl	800586e <HAL_UART_RxHalfCpltCallback>
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b21      	cmp	r3, #33	; 0x21
 8005a36:	d108      	bne.n	8005a4a <UART_DMAError+0x46>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a44:	68b8      	ldr	r0, [r7, #8]
 8005a46:	f000 f971 	bl	8005d2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b22      	cmp	r3, #34	; 0x22
 8005a6a:	d108      	bne.n	8005a7e <UART_DMAError+0x7a>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f000 f97e 	bl	8005d7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f043 0210 	orr.w	r2, r3, #16
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a8a:	68b8      	ldr	r0, [r7, #8]
 8005a8c:	f7ff fef8 	bl	8005880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b090      	sub	sp, #64	; 0x40
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa8:	e050      	b.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d04c      	beq.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab8:	f7fb fe06 	bl	80016c8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d241      	bcs.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ae8:	637a      	str	r2, [r7, #52]	; 0x34
 8005aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1c:	623a      	str	r2, [r7, #32]
 8005b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	69f9      	ldr	r1, [r7, #28]
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e00f      	b.n	8005b6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d09f      	beq.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3740      	adds	r7, #64	; 0x40
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2222      	movs	r2, #34	; 0x22
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0220 	orr.w	r2, r2, #32
 8005be0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
	...

08005bf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b098      	sub	sp, #96	; 0x60
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2222      	movs	r2, #34	; 0x22
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	4a40      	ldr	r2, [pc, #256]	; (8005d20 <UART_Start_Receive_DMA+0x130>)
 8005c1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	4a3f      	ldr	r2, [pc, #252]	; (8005d24 <UART_Start_Receive_DMA+0x134>)
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	4a3e      	ldr	r2, [pc, #248]	; (8005d28 <UART_Start_Receive_DMA+0x138>)
 8005c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	2200      	movs	r2, #0
 8005c36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c38:	f107 0308 	add.w	r3, r7, #8
 8005c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	f7fb ffb4 	bl	8001bbc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d019      	beq.n	8005cae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c90:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cce:	63ba      	str	r2, [r7, #56]	; 0x38
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3314      	adds	r3, #20
 8005d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d02:	627a      	str	r2, [r7, #36]	; 0x24
 8005d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6a39      	ldr	r1, [r7, #32]
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3760      	adds	r7, #96	; 0x60
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	080058a9 	.word	0x080058a9
 8005d24:	080059cf 	.word	0x080059cf
 8005d28:	08005a05 	.word	0x08005a05

08005d2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b089      	sub	sp, #36	; 0x24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	61ba      	str	r2, [r7, #24]
 8005d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6979      	ldr	r1, [r7, #20]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	613b      	str	r3, [r7, #16]
   return(result);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d70:	bf00      	nop
 8005d72:	3724      	adds	r7, #36	; 0x24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr

08005d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b095      	sub	sp, #84	; 0x54
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005da2:	643a      	str	r2, [r7, #64]	; 0x40
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3314      	adds	r3, #20
 8005dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3314      	adds	r3, #20
 8005dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d119      	bne.n	8005e26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f023 0310 	bic.w	r3, r3, #16
 8005e08:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e12:	61ba      	str	r2, [r7, #24]
 8005e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6979      	ldr	r1, [r7, #20]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e34:	bf00      	nop
 8005e36:	3754      	adds	r7, #84	; 0x54
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr

08005e3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fd11 	bl	8005880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b21      	cmp	r3, #33	; 0x21
 8005e78:	d13e      	bne.n	8005ef8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	d114      	bne.n	8005eae <UART_Transmit_IT+0x48>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d110      	bne.n	8005eae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]
 8005eac:	e008      	b.n	8005ec0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6211      	str	r1, [r2, #32]
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10f      	bne.n	8005ef4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e000      	b.n	8005efa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef8:	2302      	movs	r3, #2
  }
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff fc99 	bl	800585c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08c      	sub	sp, #48	; 0x30
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b22      	cmp	r3, #34	; 0x22
 8005f46:	f040 80ab 	bne.w	80060a0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f52:	d117      	bne.n	8005f84 <UART_Receive_IT+0x50>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d113      	bne.n	8005f84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	1c9a      	adds	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	629a      	str	r2, [r3, #40]	; 0x28
 8005f82:	e026      	b.n	8005fd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f96:	d007      	beq.n	8005fa8 <UART_Receive_IT+0x74>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <UART_Receive_IT+0x82>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e008      	b.n	8005fc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d15a      	bne.n	800609c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0220 	bic.w	r2, r2, #32
 8005ff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	2b01      	cmp	r3, #1
 8006024:	d135      	bne.n	8006092 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f023 0310 	bic.w	r3, r3, #16
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	623a      	str	r2, [r7, #32]
 800604e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b10      	cmp	r3, #16
 800606c:	d10a      	bne.n	8006084 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fc01 	bl	8005892 <HAL_UARTEx_RxEventCallback>
 8006090:	e002      	b.n	8006098 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fb f9d2 	bl	800143c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e002      	b.n	80060a2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3730      	adds	r7, #48	; 0x30
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b0:	b0c0      	sub	sp, #256	; 0x100
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	ea40 0301 	orr.w	r3, r0, r1
 80060d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006104:	f021 010c 	bic.w	r1, r1, #12
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006112:	430b      	orrs	r3, r1
 8006114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	ea40 0301 	orr.w	r3, r0, r1
 8006132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b91      	ldr	r3, [pc, #580]	; (8006380 <UART_SetConfig+0x2d4>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d005      	beq.n	800614c <UART_SetConfig+0xa0>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b8f      	ldr	r3, [pc, #572]	; (8006384 <UART_SetConfig+0x2d8>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d104      	bne.n	8006156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe fa08 	bl	8004560 <HAL_RCC_GetPCLK2Freq>
 8006150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006154:	e003      	b.n	800615e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe f9ef 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 800615a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006168:	f040 8110 	bne.w	800638c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800617a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800617e:	4622      	mov	r2, r4
 8006180:	462b      	mov	r3, r5
 8006182:	1891      	adds	r1, r2, r2
 8006184:	65b9      	str	r1, [r7, #88]	; 0x58
 8006186:	415b      	adcs	r3, r3
 8006188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800618a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	4604      	mov	r4, r0
 8006194:	eb12 0804 	adds.w	r8, r2, r4
 8006198:	460c      	mov	r4, r1
 800619a:	eb43 0904 	adc.w	r9, r3, r4
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061b2:	4690      	mov	r8, r2
 80061b4:	4699      	mov	r9, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	eb18 0303 	adds.w	r3, r8, r3
 80061bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061c0:	460b      	mov	r3, r1
 80061c2:	eb49 0303 	adc.w	r3, r9, r3
 80061c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061de:	460b      	mov	r3, r1
 80061e0:	18db      	adds	r3, r3, r3
 80061e2:	653b      	str	r3, [r7, #80]	; 0x50
 80061e4:	4613      	mov	r3, r2
 80061e6:	eb42 0303 	adc.w	r3, r2, r3
 80061ea:	657b      	str	r3, [r7, #84]	; 0x54
 80061ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061f4:	f7fa f83c 	bl	8000270 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4b62      	ldr	r3, [pc, #392]	; (8006388 <UART_SetConfig+0x2dc>)
 80061fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	011c      	lsls	r4, r3, #4
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006210:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006220:	415b      	adcs	r3, r3
 8006222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006228:	4645      	mov	r5, r8
 800622a:	eb12 0a05 	adds.w	sl, r2, r5
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	460d      	mov	r5, r1
 8006234:	eb43 0b05 	adc.w	fp, r3, r5
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800624c:	4692      	mov	sl, r2
 800624e:	469b      	mov	fp, r3
 8006250:	4603      	mov	r3, r0
 8006252:	eb1a 0303 	adds.w	r3, sl, r3
 8006256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800625a:	460b      	mov	r3, r1
 800625c:	eb4b 0303 	adc.w	r3, fp, r3
 8006260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006270:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006278:	460b      	mov	r3, r1
 800627a:	18db      	adds	r3, r3, r3
 800627c:	643b      	str	r3, [r7, #64]	; 0x40
 800627e:	4613      	mov	r3, r2
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	647b      	str	r3, [r7, #68]	; 0x44
 8006286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800628a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800628e:	f7f9 ffef 	bl	8000270 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4611      	mov	r1, r2
 8006298:	4b3b      	ldr	r3, [pc, #236]	; (8006388 <UART_SetConfig+0x2dc>)
 800629a:	fba3 2301 	umull	r2, r3, r3, r1
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2264      	movs	r2, #100	; 0x64
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	1acb      	subs	r3, r1, r3
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ae:	4b36      	ldr	r3, [pc, #216]	; (8006388 <UART_SetConfig+0x2dc>)
 80062b0:	fba3 2302 	umull	r2, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062bc:	441c      	add	r4, r3
 80062be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	1891      	adds	r1, r2, r2
 80062d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062d8:	415b      	adcs	r3, r3
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062e0:	4641      	mov	r1, r8
 80062e2:	1851      	adds	r1, r2, r1
 80062e4:	6339      	str	r1, [r7, #48]	; 0x30
 80062e6:	4649      	mov	r1, r9
 80062e8:	414b      	adcs	r3, r1
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062f8:	4659      	mov	r1, fp
 80062fa:	00cb      	lsls	r3, r1, #3
 80062fc:	4655      	mov	r5, sl
 80062fe:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006302:	4651      	mov	r1, sl
 8006304:	00ca      	lsls	r2, r1, #3
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	4603      	mov	r3, r0
 800630c:	4642      	mov	r2, r8
 800630e:	189b      	adds	r3, r3, r2
 8006310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006314:	464b      	mov	r3, r9
 8006316:	460a      	mov	r2, r1
 8006318:	eb42 0303 	adc.w	r3, r2, r3
 800631c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800632c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006334:	460b      	mov	r3, r1
 8006336:	18db      	adds	r3, r3, r3
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
 800633a:	4613      	mov	r3, r2
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800634a:	f7f9 ff91 	bl	8000270 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <UART_SetConfig+0x2dc>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <UART_SetConfig+0x2dc>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 0207 	and.w	r2, r3, #7
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4422      	add	r2, r4
 800637a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800637c:	e109      	b.n	8006592 <UART_SetConfig+0x4e6>
 800637e:	bf00      	nop
 8006380:	40011000 	.word	0x40011000
 8006384:	40011400 	.word	0x40011400
 8006388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006396:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800639a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800639e:	4642      	mov	r2, r8
 80063a0:	464b      	mov	r3, r9
 80063a2:	1891      	adds	r1, r2, r2
 80063a4:	6239      	str	r1, [r7, #32]
 80063a6:	415b      	adcs	r3, r3
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ae:	4641      	mov	r1, r8
 80063b0:	1854      	adds	r4, r2, r1
 80063b2:	46cc      	mov	ip, r9
 80063b4:	eb43 050c 	adc.w	r5, r3, ip
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	00eb      	lsls	r3, r5, #3
 80063c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063c6:	00e2      	lsls	r2, r4, #3
 80063c8:	4614      	mov	r4, r2
 80063ca:	461d      	mov	r5, r3
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	4603      	mov	r3, r0
 80063d2:	18e3      	adds	r3, r4, r3
 80063d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063d8:	460b      	mov	r3, r1
 80063da:	eb45 0303 	adc.w	r3, r5, r3
 80063de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063fe:	4629      	mov	r1, r5
 8006400:	008b      	lsls	r3, r1, #2
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	4604      	mov	r4, r0
 8006408:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800640c:	4601      	mov	r1, r0
 800640e:	008a      	lsls	r2, r1, #2
 8006410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006414:	f7f9 ff2c 	bl	8000270 <__aeabi_uldivmod>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4b60      	ldr	r3, [pc, #384]	; (80065a0 <UART_SetConfig+0x4f4>)
 800641e:	fba3 2302 	umull	r2, r3, r3, r2
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	011c      	lsls	r4, r3, #4
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006430:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	1891      	adds	r1, r2, r2
 800643e:	61b9      	str	r1, [r7, #24]
 8006440:	415b      	adcs	r3, r3
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006448:	4641      	mov	r1, r8
 800644a:	1851      	adds	r1, r2, r1
 800644c:	6139      	str	r1, [r7, #16]
 800644e:	4649      	mov	r1, r9
 8006450:	414b      	adcs	r3, r1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006460:	4659      	mov	r1, fp
 8006462:	00cb      	lsls	r3, r1, #3
 8006464:	4655      	mov	r5, sl
 8006466:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800646a:	4651      	mov	r1, sl
 800646c:	00ca      	lsls	r2, r1, #3
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	4603      	mov	r3, r0
 8006474:	4642      	mov	r2, r8
 8006476:	189b      	adds	r3, r3, r2
 8006478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800647c:	464b      	mov	r3, r9
 800647e:	460a      	mov	r2, r1
 8006480:	eb42 0303 	adc.w	r3, r2, r3
 8006484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	67bb      	str	r3, [r7, #120]	; 0x78
 8006492:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064a0:	4649      	mov	r1, r9
 80064a2:	008b      	lsls	r3, r1, #2
 80064a4:	4645      	mov	r5, r8
 80064a6:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80064aa:	4641      	mov	r1, r8
 80064ac:	008a      	lsls	r2, r1, #2
 80064ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064b2:	f7f9 fedd 	bl	8000270 <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <UART_SetConfig+0x4f4>)
 80064bc:	fba3 1302 	umull	r1, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	2164      	movs	r1, #100	; 0x64
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	3332      	adds	r3, #50	; 0x32
 80064ce:	4a34      	ldr	r2, [pc, #208]	; (80065a0 <UART_SetConfig+0x4f4>)
 80064d0:	fba2 2303 	umull	r2, r3, r2, r3
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064da:	441c      	add	r4, r3
 80064dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e0:	2200      	movs	r2, #0
 80064e2:	673b      	str	r3, [r7, #112]	; 0x70
 80064e4:	677a      	str	r2, [r7, #116]	; 0x74
 80064e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064ea:	4642      	mov	r2, r8
 80064ec:	464b      	mov	r3, r9
 80064ee:	1891      	adds	r1, r2, r2
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	415b      	adcs	r3, r3
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064fa:	4641      	mov	r1, r8
 80064fc:	1851      	adds	r1, r2, r1
 80064fe:	6039      	str	r1, [r7, #0]
 8006500:	4649      	mov	r1, r9
 8006502:	414b      	adcs	r3, r1
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006512:	4659      	mov	r1, fp
 8006514:	00cb      	lsls	r3, r1, #3
 8006516:	4655      	mov	r5, sl
 8006518:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800651c:	4651      	mov	r1, sl
 800651e:	00ca      	lsls	r2, r1, #3
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	4603      	mov	r3, r0
 8006526:	4642      	mov	r2, r8
 8006528:	189b      	adds	r3, r3, r2
 800652a:	66bb      	str	r3, [r7, #104]	; 0x68
 800652c:	464b      	mov	r3, r9
 800652e:	460a      	mov	r2, r1
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	663b      	str	r3, [r7, #96]	; 0x60
 8006540:	667a      	str	r2, [r7, #100]	; 0x64
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800654e:	4649      	mov	r1, r9
 8006550:	008b      	lsls	r3, r1, #2
 8006552:	4645      	mov	r5, r8
 8006554:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8006558:	4641      	mov	r1, r8
 800655a:	008a      	lsls	r2, r1, #2
 800655c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006560:	f7f9 fe86 	bl	8000270 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <UART_SetConfig+0x4f4>)
 800656a:	fba3 1302 	umull	r1, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2164      	movs	r1, #100	; 0x64
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	3332      	adds	r3, #50	; 0x32
 800657c:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <UART_SetConfig+0x4f4>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4422      	add	r2, r4
 8006590:	609a      	str	r2, [r3, #8]
}
 8006592:	bf00      	nop
 8006594:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006598:	46bd      	mov	sp, r7
 800659a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800659e:	bf00      	nop
 80065a0:	51eb851f 	.word	0x51eb851f

080065a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065a4:	b084      	sub	sp, #16
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	f107 001c 	add.w	r0, r7, #28
 80065b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d122      	bne.n	8006602 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d105      	bne.n	80065f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fbd6 	bl	8007da8 <USB_CoreReset>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
 8006600:	e01a      	b.n	8006638 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fbca 	bl	8007da8 <USB_CoreReset>
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
 800662a:	e005      	b.n	8006638 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10b      	bne.n	8006656 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f043 0206 	orr.w	r2, r3, #6
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f043 0220 	orr.w	r2, r3, #32
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006662:	b004      	add	sp, #16
 8006664:	4770      	bx	lr
	...

08006668 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d165      	bne.n	8006748 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4a41      	ldr	r2, [pc, #260]	; (8006784 <USB_SetTurnaroundTime+0x11c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d906      	bls.n	8006692 <USB_SetTurnaroundTime+0x2a>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4a40      	ldr	r2, [pc, #256]	; (8006788 <USB_SetTurnaroundTime+0x120>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d202      	bcs.n	8006692 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800668c:	230f      	movs	r3, #15
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e062      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4a3c      	ldr	r2, [pc, #240]	; (8006788 <USB_SetTurnaroundTime+0x120>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d306      	bcc.n	80066a8 <USB_SetTurnaroundTime+0x40>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4a3b      	ldr	r2, [pc, #236]	; (800678c <USB_SetTurnaroundTime+0x124>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d202      	bcs.n	80066a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066a2:	230e      	movs	r3, #14
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e057      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4a38      	ldr	r2, [pc, #224]	; (800678c <USB_SetTurnaroundTime+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d306      	bcc.n	80066be <USB_SetTurnaroundTime+0x56>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4a37      	ldr	r2, [pc, #220]	; (8006790 <USB_SetTurnaroundTime+0x128>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d202      	bcs.n	80066be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066b8:	230d      	movs	r3, #13
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e04c      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a33      	ldr	r2, [pc, #204]	; (8006790 <USB_SetTurnaroundTime+0x128>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d306      	bcc.n	80066d4 <USB_SetTurnaroundTime+0x6c>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4a32      	ldr	r2, [pc, #200]	; (8006794 <USB_SetTurnaroundTime+0x12c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d802      	bhi.n	80066d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066ce:	230c      	movs	r3, #12
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e041      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a2f      	ldr	r2, [pc, #188]	; (8006794 <USB_SetTurnaroundTime+0x12c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d906      	bls.n	80066ea <USB_SetTurnaroundTime+0x82>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <USB_SetTurnaroundTime+0x130>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d802      	bhi.n	80066ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066e4:	230b      	movs	r3, #11
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e036      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <USB_SetTurnaroundTime+0x130>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d906      	bls.n	8006700 <USB_SetTurnaroundTime+0x98>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4a29      	ldr	r2, [pc, #164]	; (800679c <USB_SetTurnaroundTime+0x134>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d802      	bhi.n	8006700 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066fa:	230a      	movs	r3, #10
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	e02b      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4a26      	ldr	r2, [pc, #152]	; (800679c <USB_SetTurnaroundTime+0x134>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d906      	bls.n	8006716 <USB_SetTurnaroundTime+0xae>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <USB_SetTurnaroundTime+0x138>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d202      	bcs.n	8006716 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006710:	2309      	movs	r3, #9
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e020      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <USB_SetTurnaroundTime+0x138>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d306      	bcc.n	800672c <USB_SetTurnaroundTime+0xc4>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <USB_SetTurnaroundTime+0x13c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d802      	bhi.n	800672c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006726:	2308      	movs	r3, #8
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e015      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <USB_SetTurnaroundTime+0x13c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d906      	bls.n	8006742 <USB_SetTurnaroundTime+0xda>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <USB_SetTurnaroundTime+0x140>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d202      	bcs.n	8006742 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800673c:	2307      	movs	r3, #7
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e00a      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006742:	2306      	movs	r3, #6
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e007      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800674e:	2309      	movs	r3, #9
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e001      	b.n	8006758 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006754:	2309      	movs	r3, #9
 8006756:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	00d8acbf 	.word	0x00d8acbf
 8006788:	00e4e1c0 	.word	0x00e4e1c0
 800678c:	00f42400 	.word	0x00f42400
 8006790:	01067380 	.word	0x01067380
 8006794:	011a499f 	.word	0x011a499f
 8006798:	01312cff 	.word	0x01312cff
 800679c:	014ca43f 	.word	0x014ca43f
 80067a0:	016e3600 	.word	0x016e3600
 80067a4:	01a6ab1f 	.word	0x01a6ab1f
 80067a8:	01e84800 	.word	0x01e84800

080067ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f043 0201 	orr.w	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 0201 	bic.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d115      	bne.n	800683a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800681a:	2001      	movs	r0, #1
 800681c:	f7fa ff5e 	bl	80016dc <HAL_Delay>
      ms++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fa33 	bl	8007c92 <USB_GetMode>
 800682c:	4603      	mov	r3, r0
 800682e:	2b01      	cmp	r3, #1
 8006830:	d01e      	beq.n	8006870 <USB_SetCurrentMode+0x84>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b31      	cmp	r3, #49	; 0x31
 8006836:	d9f0      	bls.n	800681a <USB_SetCurrentMode+0x2e>
 8006838:	e01a      	b.n	8006870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d115      	bne.n	800686c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800684c:	2001      	movs	r0, #1
 800684e:	f7fa ff45 	bl	80016dc <HAL_Delay>
      ms++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 fa1a 	bl	8007c92 <USB_GetMode>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <USB_SetCurrentMode+0x84>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b31      	cmp	r3, #49	; 0x31
 8006868:	d9f0      	bls.n	800684c <USB_SetCurrentMode+0x60>
 800686a:	e001      	b.n	8006870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e005      	b.n	800687c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b32      	cmp	r3, #50	; 0x32
 8006874:	d101      	bne.n	800687a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006884:	b084      	sub	sp, #16
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e009      	b.n	80068b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3340      	adds	r3, #64	; 0x40
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b0e      	cmp	r3, #14
 80068bc:	d9f2      	bls.n	80068a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11c      	bne.n	80068fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d2:	f043 0302 	orr.w	r3, r3, #2
 80068d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38
 80068fc:	e00b      	b.n	8006916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800691c:	461a      	mov	r2, r3
 800691e:	2300      	movs	r3, #0
 8006920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	4619      	mov	r1, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006930:	461a      	mov	r2, r3
 8006932:	680b      	ldr	r3, [r1, #0]
 8006934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	2b01      	cmp	r3, #1
 800693a:	d10c      	bne.n	8006956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006942:	2100      	movs	r1, #0
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f965 	bl	8006c14 <USB_SetDevSpeed>
 800694a:	e008      	b.n	800695e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800694c:	2101      	movs	r1, #1
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f960 	bl	8006c14 <USB_SetDevSpeed>
 8006954:	e003      	b.n	800695e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006956:	2103      	movs	r1, #3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f95b 	bl	8006c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800695e:	2110      	movs	r1, #16
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f8f3 	bl	8006b4c <USB_FlushTxFifo>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f91f 	bl	8006bb4 <USB_FlushRxFifo>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	461a      	mov	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	461a      	mov	r2, r3
 80069a0:	2300      	movs	r3, #0
 80069a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	e043      	b.n	8006a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c0:	d118      	bne.n	80069f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e013      	b.n	8006a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ea:	461a      	mov	r2, r3
 80069ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	e008      	b.n	8006a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	461a      	mov	r2, r3
 8006a14:	2300      	movs	r3, #0
 8006a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	461a      	mov	r2, r3
 8006a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d3b7      	bcc.n	80069aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	e043      	b.n	8006ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a56:	d118      	bne.n	8006a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e013      	b.n	8006a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	461a      	mov	r2, r3
 8006a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e008      	b.n	8006a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	461a      	mov	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	461a      	mov	r2, r3
 8006abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3b7      	bcc.n	8006a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d105      	bne.n	8006b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f043 0210 	orr.w	r2, r3, #16
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699a      	ldr	r2, [r3, #24]
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <USB_DevInit+0x2c4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f043 0208 	orr.w	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d107      	bne.n	8006b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b30:	f043 0304 	orr.w	r3, r3, #4
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr
 8006b48:	803c3800 	.word	0x803c3800

08006b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <USB_FlushTxFifo+0x64>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e01b      	b.n	8006ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	daf2      	bge.n	8006b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	019b      	lsls	r3, r3, #6
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <USB_FlushTxFifo+0x64>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e006      	b.n	8006ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d0f0      	beq.n	8006b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	00030d40 	.word	0x00030d40

08006bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <USB_FlushRxFifo+0x5c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d901      	bls.n	8006bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e018      	b.n	8006c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	daf2      	bge.n	8006bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2210      	movs	r2, #16
 8006be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <USB_FlushRxFifo+0x5c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e006      	b.n	8006c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d0f0      	beq.n	8006be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	00030d40 	.word	0x00030d40

08006c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c34:	4313      	orrs	r3, r2
 8006c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0306 	and.w	r3, r3, #6
 8006c5c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75fb      	strb	r3, [r7, #23]
 8006c68:	e00a      	b.n	8006c80 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d002      	beq.n	8006c76 <USB_GetDevSpeed+0x32>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b06      	cmp	r3, #6
 8006c74:	d102      	bne.n	8006c7c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c76:	2302      	movs	r3, #2
 8006c78:	75fb      	strb	r3, [r7, #23]
 8006c7a:	e001      	b.n	8006c80 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c7c:	230f      	movs	r3, #15
 8006c7e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d13a      	bne.n	8006d1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	2101      	movs	r1, #1
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	68f9      	ldr	r1, [r7, #12]
 8006cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d155      	bne.n	8006d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	059b      	lsls	r3, r3, #22
 8006d02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d04:	4313      	orrs	r3, r2
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e036      	b.n	8006d8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	2101      	movs	r1, #1
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11a      	bne.n	8006d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	791b      	ldrb	r3, [r3, #4]
 8006d70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d72:	430b      	orrs	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d161      	bne.n	8006e78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dca:	d11f      	bne.n	8006e0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	43db      	mvns	r3, r3
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e50:	4013      	ands	r3, r2
 8006e52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	0159      	lsls	r1, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	440b      	add	r3, r1
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4b35      	ldr	r3, [pc, #212]	; (8006f48 <USB_DeactivateEndpoint+0x1b0>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	600b      	str	r3, [r1, #0]
 8006e76:	e060      	b.n	8006f3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e8e:	d11f      	bne.n	8006ed0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ece:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	2101      	movs	r1, #1
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	041b      	lsls	r3, r3, #16
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f14:	4013      	ands	r3, r2
 8006f16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	0159      	lsls	r1, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	440b      	add	r3, r1
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	4619      	mov	r1, r3
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <USB_DeactivateEndpoint+0x1b4>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	ec337800 	.word	0xec337800
 8006f4c:	eff37800 	.word	0xeff37800

08006f50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	f040 815c 	bne.w	800722a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d132      	bne.n	8006fe0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	0cdb      	lsrs	r3, r3, #19
 8006fda:	04db      	lsls	r3, r3, #19
 8006fdc:	6113      	str	r3, [r2, #16]
 8006fde:	e074      	b.n	80070ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffa:	0cdb      	lsrs	r3, r3, #19
 8006ffc:	04db      	lsls	r3, r3, #19
 8006ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800701e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6999      	ldr	r1, [r3, #24]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	440b      	add	r3, r1
 800703c:	1e59      	subs	r1, r3, #1
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	fbb1 f3f3 	udiv	r3, r1, r3
 8007046:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007048:	4b9d      	ldr	r3, [pc, #628]	; (80072c0 <USB_EPStartXfer+0x370>)
 800704a:	400b      	ands	r3, r1
 800704c:	69b9      	ldr	r1, [r7, #24]
 800704e:	0148      	lsls	r0, r1, #5
 8007050:	69f9      	ldr	r1, [r7, #28]
 8007052:	4401      	add	r1, r0
 8007054:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007058:	4313      	orrs	r3, r2
 800705a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007072:	69b9      	ldr	r1, [r7, #24]
 8007074:	0148      	lsls	r0, r1, #5
 8007076:	69f9      	ldr	r1, [r7, #28]
 8007078:	4401      	add	r1, r0
 800707a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800707e:	4313      	orrs	r3, r2
 8007080:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	791b      	ldrb	r3, [r3, #4]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d11f      	bne.n	80070ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d14b      	bne.n	8007168 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	461a      	mov	r2, r3
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	791b      	ldrb	r3, [r3, #4]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d128      	bne.n	8007146 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007100:	2b00      	cmp	r3, #0
 8007102:	d110      	bne.n	8007126 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	e00f      	b.n	8007146 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007144:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e133      	b.n	80073d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007186:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	791b      	ldrb	r3, [r3, #4]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d015      	beq.n	80071bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 811b 	beq.w	80073d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	2101      	movs	r1, #1
 80071ac:	fa01 f303 	lsl.w	r3, r1, r3
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b6:	4313      	orrs	r3, r2
 80071b8:	634b      	str	r3, [r1, #52]	; 0x34
 80071ba:	e109      	b.n	80073d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d110      	bne.n	80071ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e00f      	b.n	800720e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6919      	ldr	r1, [r3, #16]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	b298      	uxth	r0, r3
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4603      	mov	r3, r0
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fadc 	bl	80077e0 <USB_WritePacket>
 8007228:	e0d2      	b.n	80073d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007244:	0cdb      	lsrs	r3, r3, #19
 8007246:	04db      	lsls	r3, r3, #19
 8007248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	440a      	add	r2, r1
 8007260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800726c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d126      	bne.n	80072c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728c:	69b9      	ldr	r1, [r7, #24]
 800728e:	0148      	lsls	r0, r1, #5
 8007290:	69f9      	ldr	r1, [r7, #28]
 8007292:	4401      	add	r1, r0
 8007294:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007298:	4313      	orrs	r3, r2
 800729a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ba:	6113      	str	r3, [r2, #16]
 80072bc:	e03a      	b.n	8007334 <USB_EPStartXfer+0x3e4>
 80072be:	bf00      	nop
 80072c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	1e5a      	subs	r2, r3, #1
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	8afa      	ldrh	r2, [r7, #22]
 80072e0:	fb03 f202 	mul.w	r2, r3, r2
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	04d9      	lsls	r1, r3, #19
 80072fa:	4b38      	ldr	r3, [pc, #224]	; (80073dc <USB_EPStartXfer+0x48c>)
 80072fc:	400b      	ands	r3, r1
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	0148      	lsls	r0, r1, #5
 8007302:	69f9      	ldr	r1, [r7, #28]
 8007304:	4401      	add	r1, r0
 8007306:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800730a:	4313      	orrs	r3, r2
 800730c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007324:	69b9      	ldr	r1, [r7, #24]
 8007326:	0148      	lsls	r0, r1, #5
 8007328:	69f9      	ldr	r1, [r7, #28]
 800732a:	4401      	add	r1, r0
 800732c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007330:	4313      	orrs	r3, r2
 8007332:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10d      	bne.n	8007356 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6919      	ldr	r1, [r3, #16]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	460a      	mov	r2, r1
 8007354:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d128      	bne.n	80073b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736a:	2b00      	cmp	r3, #0
 800736c:	d110      	bne.n	8007390 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	e00f      	b.n	80073b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	1ff80000 	.word	0x1ff80000

080073e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f040 80ce 	bne.w	800759e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d132      	bne.n	8007470 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800742c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800744c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007468:	0cdb      	lsrs	r3, r3, #19
 800746a:	04db      	lsls	r3, r3, #19
 800746c:	6113      	str	r3, [r2, #16]
 800746e:	e04e      	b.n	800750e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748a:	0cdb      	lsrs	r3, r3, #19
 800748c:	04db      	lsls	r3, r3, #19
 800748e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d903      	bls.n	80074c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074fe:	6939      	ldr	r1, [r7, #16]
 8007500:	0148      	lsls	r0, r1, #5
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	4401      	add	r1, r0
 8007506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800750a:	4313      	orrs	r3, r2
 800750c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d11e      	bne.n	8007552 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	461a      	mov	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e097      	b.n	8007682 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007570:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8083 	beq.w	8007682 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f303 	lsl.w	r3, r1, r3
 8007592:	6979      	ldr	r1, [r7, #20]
 8007594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007598:	4313      	orrs	r3, r2
 800759a:	634b      	str	r3, [r1, #52]	; 0x34
 800759c:	e071      	b.n	8007682 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b8:	0cdb      	lsrs	r3, r3, #19
 80075ba:	04db      	lsls	r3, r3, #19
 80075bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007630:	6939      	ldr	r1, [r7, #16]
 8007632:	0148      	lsls	r0, r1, #5
 8007634:	6979      	ldr	r1, [r7, #20]
 8007636:	4401      	add	r1, r0
 8007638:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800763c:	4313      	orrs	r3, r2
 800763e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10d      	bne.n	8007662 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6919      	ldr	r1, [r3, #16]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	460a      	mov	r2, r1
 8007660:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007680:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800768e:	b480      	push	{r7}
 8007690:	b087      	sub	sp, #28
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d14a      	bne.n	8007742 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c4:	f040 8086 	bne.w	80077d4 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	7812      	ldrb	r2, [r2, #0]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	440a      	add	r2, r1
 8007706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800770e:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f242 7210 	movw	r2, #10000	; 0x2710
 800771c:	4293      	cmp	r3, r2
 800771e:	d902      	bls.n	8007726 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
          break;
 8007724:	e056      	b.n	80077d4 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800773a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773e:	d0e7      	beq.n	8007710 <USB_EPStopXfer+0x82>
 8007740:	e048      	b.n	80077d4 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775a:	d13b      	bne.n	80077d4 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800777e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a2:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d902      	bls.n	80077ba <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75fb      	strb	r3, [r7, #23]
          break;
 80077b8:	e00c      	b.n	80077d4 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d2:	d0e7      	beq.n	80077a4 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4611      	mov	r1, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	460b      	mov	r3, r1
 80077f0:	71fb      	strb	r3, [r7, #7]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80077fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d123      	bne.n	800784e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007806:	88bb      	ldrh	r3, [r7, #4]
 8007808:	3303      	adds	r3, #3
 800780a:	089b      	lsrs	r3, r3, #2
 800780c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e018      	b.n	8007846 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	031a      	lsls	r2, r3, #12
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	4413      	add	r3, r2
 800781c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007820:	461a      	mov	r2, r3
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	3301      	adds	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	3301      	adds	r3, #1
 8007832:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	3301      	adds	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	3301      	adds	r3, #1
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d3e2      	bcc.n	8007814 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3724      	adds	r7, #36	; 0x24
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800785a:	b480      	push	{r7}
 800785c:	b08b      	sub	sp, #44	; 0x2c
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	4613      	mov	r3, r2
 8007866:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	b29b      	uxth	r3, r3
 8007876:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007880:	2300      	movs	r3, #0
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	e014      	b.n	80078b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	601a      	str	r2, [r3, #0]
    pDest++;
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	3301      	adds	r3, #1
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	3301      	adds	r3, #1
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	3301      	adds	r3, #1
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	3301      	adds	r3, #1
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	3301      	adds	r3, #1
 80078ae:	623b      	str	r3, [r7, #32]
 80078b0:	6a3a      	ldr	r2, [r7, #32]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d3e6      	bcc.n	8007886 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078b8:	8bfb      	ldrh	r3, [r7, #30]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01e      	beq.n	80078fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c8:	461a      	mov	r2, r3
 80078ca:	f107 0310 	add.w	r3, r7, #16
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	701a      	strb	r2, [r3, #0]
      i++;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	3301      	adds	r3, #1
 80078e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	3301      	adds	r3, #1
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80078f0:	8bfb      	ldrh	r3, [r7, #30]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078f6:	8bfb      	ldrh	r3, [r7, #30]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1ea      	bne.n	80078d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078fe:	4618      	mov	r0, r3
 8007900:	372c      	adds	r7, #44	; 0x2c
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d12c      	bne.n	800797e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	db12      	blt.n	800795c <USB_EPSetStall+0x54>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00f      	beq.n	800795c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	0151      	lsls	r1, r2, #5
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	440a      	add	r2, r1
 8007952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800795a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	e02b      	b.n	80079d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	db12      	blt.n	80079b6 <USB_EPSetStall+0xae>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d128      	bne.n	8007a50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d003      	beq.n	8007a2e <USB_EPClearStall+0x4c>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	791b      	ldrb	r3, [r3, #4]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d138      	bne.n	8007aa0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	e027      	b.n	8007aa0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	791b      	ldrb	r3, [r3, #4]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d003      	beq.n	8007a80 <USB_EPClearStall+0x9e>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d10f      	bne.n	8007aa0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	0151      	lsls	r1, r2, #5
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	440a      	add	r2, r1
 8007a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ace:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr

08007af6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b24:	f023 0302 	bic.w	r3, r3, #2
 8007b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bc80      	pop	{r7}
 8007b34:	4770      	bx	lr

08007b36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b50:	f023 0303 	bic.w	r3, r3, #3
 8007b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr

08007bcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	4013      	ands	r3, r2
 8007bee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	b29b      	uxth	r3, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
 8007c68:	01db      	lsls	r3, r3, #7
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4013      	ands	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c86:	68bb      	ldr	r3, [r7, #8]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	333c      	adds	r3, #60	; 0x3c
 8007d06:	3304      	adds	r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	4a25      	ldr	r2, [pc, #148]	; (8007da4 <USB_EP0_OutStart+0xb4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d90a      	bls.n	8007d2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d24:	d101      	bne.n	8007d2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e037      	b.n	8007d9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d30:	461a      	mov	r2, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d58:	f043 0318 	orr.w	r3, r3, #24
 8007d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d10f      	bne.n	8007d98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	461a      	mov	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr
 8007da4:	4f54300a 	.word	0x4f54300a

08007da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a12      	ldr	r2, [pc, #72]	; (8007e08 <USB_CoreReset+0x60>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e01b      	b.n	8007dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	daf2      	bge.n	8007db4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f043 0201 	orr.w	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <USB_CoreReset+0x60>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d901      	bls.n	8007df0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e006      	b.n	8007dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d0f0      	beq.n	8007dde <USB_CoreReset+0x36>

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr
 8007e08:	00030d40 	.word	0x00030d40

08007e0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e1c:	f002 fc84 	bl	800a728 <USBD_static_malloc>
 8007e20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d109      	bne.n	8007e3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32b0      	adds	r2, #176	; 0xb0
 8007e32:	2100      	movs	r1, #0
 8007e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e0d4      	b.n	8007fe6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e3c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007e40:	2100      	movs	r1, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f002 fcec 	bl	800a820 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	32b0      	adds	r2, #176	; 0xb0
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	32b0      	adds	r2, #176	; 0xb0
 8007e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7c1b      	ldrb	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d138      	bne.n	8007ee6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e74:	4b5e      	ldr	r3, [pc, #376]	; (8007ff0 <USBD_CDC_Init+0x1e4>)
 8007e76:	7819      	ldrb	r1, [r3, #0]
 8007e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f002 fb2f 	bl	800a4e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e84:	4b5a      	ldr	r3, [pc, #360]	; (8007ff0 <USBD_CDC_Init+0x1e4>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 020f 	and.w	r2, r3, #15
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e9e:	4b55      	ldr	r3, [pc, #340]	; (8007ff4 <USBD_CDC_Init+0x1e8>)
 8007ea0:	7819      	ldrb	r1, [r3, #0]
 8007ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f002 fb1a 	bl	800a4e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007eae:	4b51      	ldr	r3, [pc, #324]	; (8007ff4 <USBD_CDC_Init+0x1e8>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f003 020f 	and.w	r2, r3, #15
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007eca:	4b4b      	ldr	r3, [pc, #300]	; (8007ff8 <USBD_CDC_Init+0x1ec>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 020f 	and.w	r2, r3, #15
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	3326      	adds	r3, #38	; 0x26
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	e035      	b.n	8007f52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ee6:	4b42      	ldr	r3, [pc, #264]	; (8007ff0 <USBD_CDC_Init+0x1e4>)
 8007ee8:	7819      	ldrb	r1, [r3, #0]
 8007eea:	2340      	movs	r3, #64	; 0x40
 8007eec:	2202      	movs	r2, #2
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f002 faf7 	bl	800a4e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ef4:	4b3e      	ldr	r3, [pc, #248]	; (8007ff0 <USBD_CDC_Init+0x1e4>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	f003 020f 	and.w	r2, r3, #15
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	3324      	adds	r3, #36	; 0x24
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f0e:	4b39      	ldr	r3, [pc, #228]	; (8007ff4 <USBD_CDC_Init+0x1e8>)
 8007f10:	7819      	ldrb	r1, [r3, #0]
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	2202      	movs	r2, #2
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f002 fae3 	bl	800a4e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f1c:	4b35      	ldr	r3, [pc, #212]	; (8007ff4 <USBD_CDC_Init+0x1e8>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f34:	2201      	movs	r2, #1
 8007f36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f38:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <USBD_CDC_Init+0x1ec>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3326      	adds	r3, #38	; 0x26
 8007f4e:	2210      	movs	r2, #16
 8007f50:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f52:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <USBD_CDC_Init+0x1ec>)
 8007f54:	7819      	ldrb	r1, [r3, #0]
 8007f56:	2308      	movs	r3, #8
 8007f58:	2203      	movs	r2, #3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f002 fac1 	bl	800a4e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f60:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <USBD_CDC_Init+0x1ec>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	f003 020f 	and.w	r2, r3, #15
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	3324      	adds	r3, #36	; 0x24
 8007f76:	2201      	movs	r2, #1
 8007f78:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	33b0      	adds	r3, #176	; 0xb0
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e018      	b.n	8007fe6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7c1b      	ldrb	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <USBD_CDC_Init+0x1e8>)
 8007fbe:	7819      	ldrb	r1, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f002 fb77 	bl	800a6be <USBD_LL_PrepareReceive>
 8007fd0:	e008      	b.n	8007fe4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fd2:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <USBD_CDC_Init+0x1e8>)
 8007fd4:	7819      	ldrb	r1, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fdc:	2340      	movs	r3, #64	; 0x40
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f002 fb6d 	bl	800a6be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	200000f3 	.word	0x200000f3
 8007ff4:	200000f4 	.word	0x200000f4
 8007ff8:	200000f5 	.word	0x200000f5

08007ffc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008008:	4b3a      	ldr	r3, [pc, #232]	; (80080f4 <USBD_CDC_DeInit+0xf8>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f002 fa8d 	bl	800a52e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008014:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <USBD_CDC_DeInit+0xf8>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 020f 	and.w	r2, r3, #15
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	3324      	adds	r3, #36	; 0x24
 800802a:	2200      	movs	r2, #0
 800802c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800802e:	4b32      	ldr	r3, [pc, #200]	; (80080f8 <USBD_CDC_DeInit+0xfc>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f002 fa7a 	bl	800a52e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800803a:	4b2f      	ldr	r3, [pc, #188]	; (80080f8 <USBD_CDC_DeInit+0xfc>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008052:	2200      	movs	r2, #0
 8008054:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008056:	4b29      	ldr	r3, [pc, #164]	; (80080fc <USBD_CDC_DeInit+0x100>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 fa66 	bl	800a52e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008062:	4b26      	ldr	r3, [pc, #152]	; (80080fc <USBD_CDC_DeInit+0x100>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	f003 020f 	and.w	r2, r3, #15
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	2200      	movs	r2, #0
 800807a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800807c:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <USBD_CDC_DeInit+0x100>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	f003 020f 	and.w	r2, r3, #15
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	3326      	adds	r3, #38	; 0x26
 8008092:	2200      	movs	r2, #0
 8008094:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	32b0      	adds	r2, #176	; 0xb0
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01f      	beq.n	80080e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	33b0      	adds	r3, #176	; 0xb0
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	32b0      	adds	r2, #176	; 0xb0
 80080c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f002 fb38 	bl	800a740 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32b0      	adds	r2, #176	; 0xb0
 80080da:	2100      	movs	r1, #0
 80080dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200000f3 	.word	0x200000f3
 80080f8:	200000f4 	.word	0x200000f4
 80080fc:	200000f5 	.word	0x200000f5

08008100 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	32b0      	adds	r2, #176	; 0xb0
 8008114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008118:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	e0bf      	b.n	80082b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008138:	2b00      	cmp	r3, #0
 800813a:	d050      	beq.n	80081de <USBD_CDC_Setup+0xde>
 800813c:	2b20      	cmp	r3, #32
 800813e:	f040 80af 	bne.w	80082a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d03a      	beq.n	80081c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b25b      	sxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	da1b      	bge.n	800818c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	33b0      	adds	r3, #176	; 0xb0
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800816a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	88d2      	ldrh	r2, [r2, #6]
 8008170:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	88db      	ldrh	r3, [r3, #6]
 8008176:	2b07      	cmp	r3, #7
 8008178:	bf28      	it	cs
 800817a:	2307      	movcs	r3, #7
 800817c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	89fa      	ldrh	r2, [r7, #14]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fd7c 	bl	8009c82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800818a:	e090      	b.n	80082ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	785a      	ldrb	r2, [r3, #1]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	88db      	ldrh	r3, [r3, #6]
 800819a:	2b3f      	cmp	r3, #63	; 0x3f
 800819c:	d803      	bhi.n	80081a6 <USBD_CDC_Setup+0xa6>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	e000      	b.n	80081a8 <USBD_CDC_Setup+0xa8>
 80081a6:	2240      	movs	r2, #64	; 0x40
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80081ae:	6939      	ldr	r1, [r7, #16]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80081b6:	461a      	mov	r2, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fd8e 	bl	8009cda <USBD_CtlPrepareRx>
      break;
 80081be:	e076      	b.n	80082ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	33b0      	adds	r3, #176	; 0xb0
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	7850      	ldrb	r0, [r2, #1]
 80081d6:	2200      	movs	r2, #0
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	4798      	blx	r3
      break;
 80081dc:	e067      	b.n	80082ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	2b0b      	cmp	r3, #11
 80081e4:	d851      	bhi.n	800828a <USBD_CDC_Setup+0x18a>
 80081e6:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBD_CDC_Setup+0xec>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	0800821d 	.word	0x0800821d
 80081f0:	08008299 	.word	0x08008299
 80081f4:	0800828b 	.word	0x0800828b
 80081f8:	0800828b 	.word	0x0800828b
 80081fc:	0800828b 	.word	0x0800828b
 8008200:	0800828b 	.word	0x0800828b
 8008204:	0800828b 	.word	0x0800828b
 8008208:	0800828b 	.word	0x0800828b
 800820c:	0800828b 	.word	0x0800828b
 8008210:	0800828b 	.word	0x0800828b
 8008214:	08008247 	.word	0x08008247
 8008218:	08008271 	.word	0x08008271
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b03      	cmp	r3, #3
 8008226:	d107      	bne.n	8008238 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008228:	f107 030a 	add.w	r3, r7, #10
 800822c:	2202      	movs	r2, #2
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 fd26 	bl	8009c82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008236:	e032      	b.n	800829e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fcb1 	bl	8009ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	75fb      	strb	r3, [r7, #23]
          break;
 8008244:	e02b      	b.n	800829e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b03      	cmp	r3, #3
 8008250:	d107      	bne.n	8008262 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008252:	f107 030d 	add.w	r3, r7, #13
 8008256:	2201      	movs	r2, #1
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 fd11 	bl	8009c82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008260:	e01d      	b.n	800829e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 fc9c 	bl	8009ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 800826a:	2303      	movs	r3, #3
 800826c:	75fb      	strb	r3, [r7, #23]
          break;
 800826e:	e016      	b.n	800829e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b03      	cmp	r3, #3
 800827a:	d00f      	beq.n	800829c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fc8f 	bl	8009ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008288:	e008      	b.n	800829c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fc88 	bl	8009ba2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008292:	2303      	movs	r3, #3
 8008294:	75fb      	strb	r3, [r7, #23]
          break;
 8008296:	e002      	b.n	800829e <USBD_CDC_Setup+0x19e>
          break;
 8008298:	bf00      	nop
 800829a:	e008      	b.n	80082ae <USBD_CDC_Setup+0x1ae>
          break;
 800829c:	bf00      	nop
      }
      break;
 800829e:	e006      	b.n	80082ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fc7d 	bl	8009ba2 <USBD_CtlError>
      ret = USBD_FAIL;
 80082a8:	2303      	movs	r3, #3
 80082aa:	75fb      	strb	r3, [r7, #23]
      break;
 80082ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	32b0      	adds	r2, #176	; 0xb0
 80082d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80082de:	2303      	movs	r3, #3
 80082e0:	e065      	b.n	80083ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	32b0      	adds	r2, #176	; 0xb0
 80082ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	f003 020f 	and.w	r2, r3, #15
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3318      	adds	r3, #24
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d02f      	beq.n	800836c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	f003 020f 	and.w	r2, r3, #15
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	3318      	adds	r3, #24
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 010f 	and.w	r1, r3, #15
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	460b      	mov	r3, r1
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	440b      	add	r3, r1
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4403      	add	r3, r0
 8008334:	3348      	adds	r3, #72	; 0x48
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	fbb2 f1f3 	udiv	r1, r2, r3
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008342:	2b00      	cmp	r3, #0
 8008344:	d112      	bne.n	800836c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	f003 020f 	and.w	r2, r3, #15
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	3318      	adds	r3, #24
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800835e:	78f9      	ldrb	r1, [r7, #3]
 8008360:	2300      	movs	r3, #0
 8008362:	2200      	movs	r2, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f002 f989 	bl	800a67c <USBD_LL_Transmit>
 800836a:	e01f      	b.n	80083ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	33b0      	adds	r3, #176	; 0xb0
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d010      	beq.n	80083ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	33b0      	adds	r3, #176	; 0xb0
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	32b0      	adds	r2, #176	; 0xb0
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	32b0      	adds	r2, #176	; 0xb0
 80083dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e01a      	b.n	800841e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f002 f987 	bl	800a700 <USBD_LL_GetRxDataSize>
 80083f2:	4602      	mov	r2, r0
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	33b0      	adds	r3, #176	; 0xb0
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008418:	4611      	mov	r1, r2
 800841a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	32b0      	adds	r2, #176	; 0xb0
 8008438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	e025      	b.n	8008494 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	33b0      	adds	r3, #176	; 0xb0
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01a      	beq.n	8008492 <USBD_CDC_EP0_RxReady+0x6c>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008462:	2bff      	cmp	r3, #255	; 0xff
 8008464:	d015      	beq.n	8008492 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	33b0      	adds	r3, #176	; 0xb0
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800847e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008486:	b292      	uxth	r2, r2
 8008488:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	22ff      	movs	r2, #255	; 0xff
 800848e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084a4:	2182      	movs	r1, #130	; 0x82
 80084a6:	4818      	ldr	r0, [pc, #96]	; (8008508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084a8:	f000 fd44 	bl	8008f34 <USBD_GetEpDesc>
 80084ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084ae:	2101      	movs	r1, #1
 80084b0:	4815      	ldr	r0, [pc, #84]	; (8008508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084b2:	f000 fd3f 	bl	8008f34 <USBD_GetEpDesc>
 80084b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084b8:	2181      	movs	r1, #129	; 0x81
 80084ba:	4813      	ldr	r0, [pc, #76]	; (8008508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084bc:	f000 fd3a 	bl	8008f34 <USBD_GetEpDesc>
 80084c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2210      	movs	r2, #16
 80084cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084dc:	711a      	strb	r2, [r3, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084f0:	711a      	strb	r2, [r3, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2243      	movs	r2, #67	; 0x43
 80084fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	200000b0 	.word	0x200000b0

0800850c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008514:	2182      	movs	r1, #130	; 0x82
 8008516:	4818      	ldr	r0, [pc, #96]	; (8008578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008518:	f000 fd0c 	bl	8008f34 <USBD_GetEpDesc>
 800851c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800851e:	2101      	movs	r1, #1
 8008520:	4815      	ldr	r0, [pc, #84]	; (8008578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008522:	f000 fd07 	bl	8008f34 <USBD_GetEpDesc>
 8008526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008528:	2181      	movs	r1, #129	; 0x81
 800852a:	4813      	ldr	r0, [pc, #76]	; (8008578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800852c:	f000 fd02 	bl	8008f34 <USBD_GetEpDesc>
 8008530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2210      	movs	r2, #16
 800853c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2200      	movs	r2, #0
 8008548:	711a      	strb	r2, [r3, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f042 0202 	orr.w	r2, r2, #2
 8008550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d006      	beq.n	8008566 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	711a      	strb	r2, [r3, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f042 0202 	orr.w	r2, r2, #2
 8008564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2243      	movs	r2, #67	; 0x43
 800856a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	200000b0 	.word	0x200000b0

0800857c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008584:	2182      	movs	r1, #130	; 0x82
 8008586:	4818      	ldr	r0, [pc, #96]	; (80085e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008588:	f000 fcd4 	bl	8008f34 <USBD_GetEpDesc>
 800858c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800858e:	2101      	movs	r1, #1
 8008590:	4815      	ldr	r0, [pc, #84]	; (80085e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008592:	f000 fccf 	bl	8008f34 <USBD_GetEpDesc>
 8008596:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008598:	2181      	movs	r1, #129	; 0x81
 800859a:	4813      	ldr	r0, [pc, #76]	; (80085e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800859c:	f000 fcca 	bl	8008f34 <USBD_GetEpDesc>
 80085a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2210      	movs	r2, #16
 80085ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d006      	beq.n	80085c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085bc:	711a      	strb	r2, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d0:	711a      	strb	r2, [r3, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2243      	movs	r2, #67	; 0x43
 80085da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085dc:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200000b0 	.word	0x200000b0

080085ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	220a      	movs	r2, #10
 80085f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80085fa:	4b03      	ldr	r3, [pc, #12]	; (8008608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	2000006c 	.word	0x2000006c

0800860c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	e009      	b.n	8008634 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	33b0      	adds	r3, #176	; 0xb0
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800863e:	b480      	push	{r7}
 8008640:	b087      	sub	sp, #28
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	32b0      	adds	r2, #176	; 0xb0
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	e008      	b.n	8008676 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	32b0      	adds	r2, #176	; 0xb0
 8008694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008698:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e004      	b.n	80086ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32b0      	adds	r2, #176	; 0xb0
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32b0      	adds	r2, #176	; 0xb0
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e025      	b.n	8008736 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d11f      	bne.n	8008734 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80086fc:	4b10      	ldr	r3, [pc, #64]	; (8008740 <USBD_CDC_TransmitPacket+0x88>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f003 020f 	and.w	r2, r3, #15
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4403      	add	r3, r0
 8008716:	3318      	adds	r3, #24
 8008718:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <USBD_CDC_TransmitPacket+0x88>)
 800871c:	7819      	ldrb	r1, [r3, #0]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 ffa6 	bl	800a67c <USBD_LL_Transmit>

    ret = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	200000f3 	.word	0x200000f3

08008744 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	32b0      	adds	r2, #176	; 0xb0
 8008756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	; 0xb0
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	e018      	b.n	80087a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7c1b      	ldrb	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <USBD_CDC_ReceivePacket+0x68>)
 800877c:	7819      	ldrb	r1, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 ff98 	bl	800a6be <USBD_LL_PrepareReceive>
 800878e:	e008      	b.n	80087a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <USBD_CDC_ReceivePacket+0x68>)
 8008792:	7819      	ldrb	r1, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 ff8e 	bl	800a6be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200000f4 	.word	0x200000f4

080087b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4613      	mov	r3, r2
 80087bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e01f      	b.n	8008808 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	79fa      	ldrb	r2, [r7, #7]
 80087fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f001 fe09 	bl	800a414 <USBD_LL_Init>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	e025      	b.n	8008874 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	32ae      	adds	r2, #174	; 0xae
 800883a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00f      	beq.n	8008864 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32ae      	adds	r2, #174	; 0xae
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	f107 020e 	add.w	r2, r7, #14
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
 800885c:	4602      	mov	r2, r0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 fe11 	bl	800a4ac <USBD_LL_Start>
 800888a:	4603      	mov	r3, r0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	4611      	mov	r1, r2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	4611      	mov	r1, r2
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4798      	blx	r3
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f901 	bl	8009b2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	2b02      	cmp	r3, #2
 800894e:	d01a      	beq.n	8008986 <USBD_LL_SetupStage+0x72>
 8008950:	2b02      	cmp	r3, #2
 8008952:	d822      	bhi.n	800899a <USBD_LL_SetupStage+0x86>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <USBD_LL_SetupStage+0x4a>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d00a      	beq.n	8008972 <USBD_LL_SetupStage+0x5e>
 800895c:	e01d      	b.n	800899a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fb58 	bl	800901c <USBD_StdDevReq>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
      break;
 8008970:	e020      	b.n	80089b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fbc0 	bl	8009100 <USBD_StdItfReq>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
      break;
 8008984:	e016      	b.n	80089b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fc22 	bl	80091d8 <USBD_StdEPReq>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
      break;
 8008998:	e00c      	b.n	80089b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fddf 	bl	800a56c <USBD_LL_StallEP>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
      break;
 80089b2:	bf00      	nop
  }

  return ret;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b086      	sub	sp, #24
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	460b      	mov	r3, r1
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d16e      	bne.n	8008ab4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	f040 8098 	bne.w	8008b1a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d913      	bls.n	8008a1e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bf28      	it	cs
 8008a10:	4613      	movcs	r3, r2
 8008a12:	461a      	mov	r2, r3
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f001 f97c 	bl	8009d14 <USBD_CtlContinueRx>
 8008a1c:	e07d      	b.n	8008b1a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d014      	beq.n	8008a56 <USBD_LL_DataOutStage+0x98>
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d81d      	bhi.n	8008a6c <USBD_LL_DataOutStage+0xae>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <USBD_LL_DataOutStage+0x7c>
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d003      	beq.n	8008a40 <USBD_LL_DataOutStage+0x82>
 8008a38:	e018      	b.n	8008a6c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75bb      	strb	r3, [r7, #22]
            break;
 8008a3e:	e018      	b.n	8008a72 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fa5a 	bl	8008f04 <USBD_CoreFindIF>
 8008a50:	4603      	mov	r3, r0
 8008a52:	75bb      	strb	r3, [r7, #22]
            break;
 8008a54:	e00d      	b.n	8008a72 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fa5b 	bl	8008f1c <USBD_CoreFindEP>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75bb      	strb	r3, [r7, #22]
            break;
 8008a6a:	e002      	b.n	8008a72 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	75bb      	strb	r3, [r7, #22]
            break;
 8008a70:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a72:	7dbb      	ldrb	r3, [r7, #22]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d119      	bne.n	8008aac <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d113      	bne.n	8008aac <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a84:	7dba      	ldrb	r2, [r7, #22]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	32ae      	adds	r2, #174	; 0xae
 8008a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a94:	7dba      	ldrb	r2, [r7, #22]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a9c:	7dba      	ldrb	r2, [r7, #22]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	32ae      	adds	r2, #174	; 0xae
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f001 f942 	bl	8009d36 <USBD_CtlSendStatus>
 8008ab2:	e032      	b.n	8008b1a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4619      	mov	r1, r3
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fa2c 	bl	8008f1c <USBD_CoreFindEP>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ac8:	7dbb      	ldrb	r3, [r7, #22]
 8008aca:	2bff      	cmp	r3, #255	; 0xff
 8008acc:	d025      	beq.n	8008b1a <USBD_LL_DataOutStage+0x15c>
 8008ace:	7dbb      	ldrb	r3, [r7, #22]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d122      	bne.n	8008b1a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d117      	bne.n	8008b10 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ae0:	7dba      	ldrb	r2, [r7, #22]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	32ae      	adds	r2, #174	; 0xae
 8008ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00f      	beq.n	8008b10 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008af0:	7dba      	ldrb	r2, [r7, #22]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008af8:	7dba      	ldrb	r2, [r7, #22]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	32ae      	adds	r2, #174	; 0xae
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	7afa      	ldrb	r2, [r7, #11]
 8008b06:	4611      	mov	r1, r2
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	4798      	blx	r3
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	e000      	b.n	8008b1c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d16f      	bne.n	8008c18 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d15a      	bne.n	8008bfe <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d914      	bls.n	8008b7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	1ad2      	subs	r2, r2, r3
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	461a      	mov	r2, r3
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f001 f8a4 	bl	8009cb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b70:	2300      	movs	r3, #0
 8008b72:	2200      	movs	r2, #0
 8008b74:	2100      	movs	r1, #0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 fda1 	bl	800a6be <USBD_LL_PrepareReceive>
 8008b7c:	e03f      	b.n	8008bfe <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d11c      	bne.n	8008bc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d316      	bcc.n	8008bc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d20f      	bcs.n	8008bc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 f885 	bl	8009cb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2100      	movs	r1, #0
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f001 fd7e 	bl	800a6be <USBD_LL_PrepareReceive>
 8008bc2:	e01c      	b.n	8008bfe <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d10f      	bne.n	8008bf0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d009      	beq.n	8008bf0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bf0:	2180      	movs	r1, #128	; 0x80
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f001 fcba 	bl	800a56c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f001 f8af 	bl	8009d5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d03a      	beq.n	8008c7e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f7ff fe43 	bl	8008894 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c16:	e032      	b.n	8008c7e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	4619      	mov	r1, r3
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f97a 	bl	8008f1c <USBD_CoreFindEP>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	2bff      	cmp	r3, #255	; 0xff
 8008c30:	d025      	beq.n	8008c7e <USBD_LL_DataInStage+0x15a>
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d122      	bne.n	8008c7e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d11c      	bne.n	8008c7e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c44:	7dfa      	ldrb	r2, [r7, #23]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	32ae      	adds	r2, #174	; 0xae
 8008c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d014      	beq.n	8008c7e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c54:	7dfa      	ldrb	r2, [r7, #23]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c5c:	7dfa      	ldrb	r2, [r7, #23]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	32ae      	adds	r2, #174	; 0xae
 8008c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	7afa      	ldrb	r2, [r7, #11]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	4798      	blx	r3
 8008c70:	4603      	mov	r3, r0
 8008c72:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c74:	7dbb      	ldrb	r3, [r7, #22]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c7a:	7dbb      	ldrb	r3, [r7, #22]
 8008c7c:	e000      	b.n	8008c80 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d014      	beq.n	8008cee <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00e      	beq.n	8008cee <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6852      	ldr	r2, [r2, #4]
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	4611      	mov	r1, r2
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008cea:	2303      	movs	r3, #3
 8008cec:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cee:	2340      	movs	r3, #64	; 0x40
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fbf4 	bl	800a4e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2240      	movs	r2, #64	; 0x40
 8008d06:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d0a:	2340      	movs	r3, #64	; 0x40
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2180      	movs	r1, #128	; 0x80
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 fbe6 	bl	800a4e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2240      	movs	r2, #64	; 0x40
 8008d20:	621a      	str	r2, [r3, #32]

  return ret;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr

08008d4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2204      	movs	r2, #4
 8008d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr

08008d74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d106      	bne.n	8008d96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr

08008da2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d110      	bne.n	8008dd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	32ae      	adds	r2, #174	; 0xae
 8008df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e01c      	b.n	8008e3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d115      	bne.n	8008e3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	32ae      	adds	r2, #174	; 0xae
 8008e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32ae      	adds	r2, #174	; 0xae
 8008e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	4611      	mov	r1, r2
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	32ae      	adds	r2, #174	; 0xae
 8008e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e01c      	b.n	8008ea2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d115      	bne.n	8008ea0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	32ae      	adds	r2, #174	; 0xae
 8008e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	32ae      	adds	r2, #174	; 0xae
 8008e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr

08008ebe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00e      	beq.n	8008efa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6852      	ldr	r2, [r2, #4]
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	4611      	mov	r1, r2
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bc80      	pop	{r7}
 8008f32:	4770      	bx	lr

08008f34 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d920      	bls.n	8008f9e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f64:	e013      	b.n	8008f8e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f66:	f107 030a 	add.w	r3, r7, #10
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6978      	ldr	r0, [r7, #20]
 8008f6e:	f000 f81b 	bl	8008fa8 <USBD_GetNextDesc>
 8008f72:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b05      	cmp	r3, #5
 8008f7a:	d108      	bne.n	8008f8e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	789b      	ldrb	r3, [r3, #2]
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d008      	beq.n	8008f9c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	885b      	ldrh	r3, [r3, #2]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	897b      	ldrh	r3, [r7, #10]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d8e5      	bhi.n	8008f66 <USBD_GetEpDesc+0x32>
 8008f9a:	e000      	b.n	8008f9e <USBD_GetEpDesc+0x6a>
          break;
 8008f9c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f9e:	693b      	ldr	r3, [r7, #16]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	881a      	ldrh	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr

08008fe0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ffe:	8a3b      	ldrh	r3, [r7, #16]
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	b21a      	sxth	r2, r3
 8009004:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009008:	4313      	orrs	r3, r2
 800900a:	b21b      	sxth	r3, r3
 800900c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800900e:	89fb      	ldrh	r3, [r7, #14]
}
 8009010:	4618      	mov	r0, r3
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	bc80      	pop	{r7}
 8009018:	4770      	bx	lr
	...

0800901c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009032:	2b40      	cmp	r3, #64	; 0x40
 8009034:	d005      	beq.n	8009042 <USBD_StdDevReq+0x26>
 8009036:	2b40      	cmp	r3, #64	; 0x40
 8009038:	d857      	bhi.n	80090ea <USBD_StdDevReq+0xce>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00f      	beq.n	800905e <USBD_StdDevReq+0x42>
 800903e:	2b20      	cmp	r3, #32
 8009040:	d153      	bne.n	80090ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	32ae      	adds	r2, #174	; 0xae
 800904c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	4798      	blx	r3
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
      break;
 800905c:	e04a      	b.n	80090f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b09      	cmp	r3, #9
 8009064:	d83b      	bhi.n	80090de <USBD_StdDevReq+0xc2>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <USBD_StdDevReq+0x50>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	080090c1 	.word	0x080090c1
 8009070:	080090d5 	.word	0x080090d5
 8009074:	080090df 	.word	0x080090df
 8009078:	080090cb 	.word	0x080090cb
 800907c:	080090df 	.word	0x080090df
 8009080:	0800909f 	.word	0x0800909f
 8009084:	08009095 	.word	0x08009095
 8009088:	080090df 	.word	0x080090df
 800908c:	080090b7 	.word	0x080090b7
 8009090:	080090a9 	.word	0x080090a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa3c 	bl	8009514 <USBD_GetDescriptor>
          break;
 800909c:	e024      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fba1 	bl	80097e8 <USBD_SetAddress>
          break;
 80090a6:	e01f      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fbe0 	bl	8009870 <USBD_SetConfig>
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]
          break;
 80090b4:	e018      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fc83 	bl	80099c4 <USBD_GetConfig>
          break;
 80090be:	e013      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fcb4 	bl	8009a30 <USBD_GetStatus>
          break;
 80090c8:	e00e      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fce3 	bl	8009a98 <USBD_SetFeature>
          break;
 80090d2:	e009      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fd07 	bl	8009aea <USBD_ClrFeature>
          break;
 80090dc:	e004      	b.n	80090e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fd5e 	bl	8009ba2 <USBD_CtlError>
          break;
 80090e6:	bf00      	nop
      }
      break;
 80090e8:	e004      	b.n	80090f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fd58 	bl	8009ba2 <USBD_CtlError>
      break;
 80090f2:	bf00      	nop
  }

  return ret;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop

08009100 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d005      	beq.n	8009126 <USBD_StdItfReq+0x26>
 800911a:	2b40      	cmp	r3, #64	; 0x40
 800911c:	d852      	bhi.n	80091c4 <USBD_StdItfReq+0xc4>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <USBD_StdItfReq+0x26>
 8009122:	2b20      	cmp	r3, #32
 8009124:	d14e      	bne.n	80091c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912c:	b2db      	uxtb	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	2b02      	cmp	r3, #2
 8009132:	d840      	bhi.n	80091b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	889b      	ldrh	r3, [r3, #4]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b01      	cmp	r3, #1
 800913c:	d836      	bhi.n	80091ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	889b      	ldrh	r3, [r3, #4]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff fedc 	bl	8008f04 <USBD_CoreFindIF>
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2bff      	cmp	r3, #255	; 0xff
 8009154:	d01d      	beq.n	8009192 <USBD_StdItfReq+0x92>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11a      	bne.n	8009192 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800915c:	7bba      	ldrb	r2, [r7, #14]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	32ae      	adds	r2, #174	; 0xae
 8009162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00f      	beq.n	800918c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800916c:	7bba      	ldrb	r2, [r7, #14]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009174:	7bba      	ldrb	r2, [r7, #14]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32ae      	adds	r2, #174	; 0xae
 800917a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800918a:	e004      	b.n	8009196 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800918c:	2303      	movs	r3, #3
 800918e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009190:	e001      	b.n	8009196 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009192:	2303      	movs	r3, #3
 8009194:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	88db      	ldrh	r3, [r3, #6]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d110      	bne.n	80091c0 <USBD_StdItfReq+0xc0>
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10d      	bne.n	80091c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fdc6 	bl	8009d36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091aa:	e009      	b.n	80091c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fcf7 	bl	8009ba2 <USBD_CtlError>
          break;
 80091b4:	e004      	b.n	80091c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fcf2 	bl	8009ba2 <USBD_CtlError>
          break;
 80091be:	e000      	b.n	80091c2 <USBD_StdItfReq+0xc2>
          break;
 80091c0:	bf00      	nop
      }
      break;
 80091c2:	e004      	b.n	80091ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fceb 	bl	8009ba2 <USBD_CtlError>
      break;
 80091cc:	bf00      	nop
  }

  return ret;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	889b      	ldrh	r3, [r3, #4]
 80091ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091f4:	2b40      	cmp	r3, #64	; 0x40
 80091f6:	d007      	beq.n	8009208 <USBD_StdEPReq+0x30>
 80091f8:	2b40      	cmp	r3, #64	; 0x40
 80091fa:	f200 817f 	bhi.w	80094fc <USBD_StdEPReq+0x324>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d02a      	beq.n	8009258 <USBD_StdEPReq+0x80>
 8009202:	2b20      	cmp	r3, #32
 8009204:	f040 817a 	bne.w	80094fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff fe85 	bl	8008f1c <USBD_CoreFindEP>
 8009212:	4603      	mov	r3, r0
 8009214:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009216:	7b7b      	ldrb	r3, [r7, #13]
 8009218:	2bff      	cmp	r3, #255	; 0xff
 800921a:	f000 8174 	beq.w	8009506 <USBD_StdEPReq+0x32e>
 800921e:	7b7b      	ldrb	r3, [r7, #13]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f040 8170 	bne.w	8009506 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009226:	7b7a      	ldrb	r2, [r7, #13]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800922e:	7b7a      	ldrb	r2, [r7, #13]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	32ae      	adds	r2, #174	; 0xae
 8009234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8163 	beq.w	8009506 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009240:	7b7a      	ldrb	r2, [r7, #13]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	32ae      	adds	r2, #174	; 0xae
 8009246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
 8009252:	4603      	mov	r3, r0
 8009254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009256:	e156      	b.n	8009506 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	785b      	ldrb	r3, [r3, #1]
 800925c:	2b03      	cmp	r3, #3
 800925e:	d008      	beq.n	8009272 <USBD_StdEPReq+0x9a>
 8009260:	2b03      	cmp	r3, #3
 8009262:	f300 8145 	bgt.w	80094f0 <USBD_StdEPReq+0x318>
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 809b 	beq.w	80093a2 <USBD_StdEPReq+0x1ca>
 800926c:	2b01      	cmp	r3, #1
 800926e:	d03c      	beq.n	80092ea <USBD_StdEPReq+0x112>
 8009270:	e13e      	b.n	80094f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b02      	cmp	r3, #2
 800927c:	d002      	beq.n	8009284 <USBD_StdEPReq+0xac>
 800927e:	2b03      	cmp	r3, #3
 8009280:	d016      	beq.n	80092b0 <USBD_StdEPReq+0xd8>
 8009282:	e02c      	b.n	80092de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00d      	beq.n	80092a6 <USBD_StdEPReq+0xce>
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b80      	cmp	r3, #128	; 0x80
 800928e:	d00a      	beq.n	80092a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 f969 	bl	800a56c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800929a:	2180      	movs	r1, #128	; 0x80
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 f965 	bl	800a56c <USBD_LL_StallEP>
 80092a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092a4:	e020      	b.n	80092e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fc7a 	bl	8009ba2 <USBD_CtlError>
              break;
 80092ae:	e01b      	b.n	80092e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	885b      	ldrh	r3, [r3, #2]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10e      	bne.n	80092d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <USBD_StdEPReq+0xfe>
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	2b80      	cmp	r3, #128	; 0x80
 80092c2:	d008      	beq.n	80092d6 <USBD_StdEPReq+0xfe>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	88db      	ldrh	r3, [r3, #6]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d104      	bne.n	80092d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f94b 	bl	800a56c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fd2d 	bl	8009d36 <USBD_CtlSendStatus>

              break;
 80092dc:	e004      	b.n	80092e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fc5e 	bl	8009ba2 <USBD_CtlError>
              break;
 80092e6:	bf00      	nop
          }
          break;
 80092e8:	e107      	b.n	80094fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d002      	beq.n	80092fc <USBD_StdEPReq+0x124>
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d016      	beq.n	8009328 <USBD_StdEPReq+0x150>
 80092fa:	e04b      	b.n	8009394 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <USBD_StdEPReq+0x146>
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b80      	cmp	r3, #128	; 0x80
 8009306:	d00a      	beq.n	800931e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f92d 	bl	800a56c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009312:	2180      	movs	r1, #128	; 0x80
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f929 	bl	800a56c <USBD_LL_StallEP>
 800931a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800931c:	e040      	b.n	80093a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc3e 	bl	8009ba2 <USBD_CtlError>
              break;
 8009326:	e03b      	b.n	80093a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	885b      	ldrh	r3, [r3, #2]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d136      	bne.n	800939e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 f933 	bl	800a5aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fcf6 	bl	8009d36 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff fde4 	bl	8008f1c <USBD_CoreFindEP>
 8009354:	4603      	mov	r3, r0
 8009356:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009358:	7b7b      	ldrb	r3, [r7, #13]
 800935a:	2bff      	cmp	r3, #255	; 0xff
 800935c:	d01f      	beq.n	800939e <USBD_StdEPReq+0x1c6>
 800935e:	7b7b      	ldrb	r3, [r7, #13]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d11c      	bne.n	800939e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009364:	7b7a      	ldrb	r2, [r7, #13]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800936c:	7b7a      	ldrb	r2, [r7, #13]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32ae      	adds	r2, #174	; 0xae
 8009372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d010      	beq.n	800939e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800937c:	7b7a      	ldrb	r2, [r7, #13]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	32ae      	adds	r2, #174	; 0xae
 8009382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009392:	e004      	b.n	800939e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fc03 	bl	8009ba2 <USBD_CtlError>
              break;
 800939c:	e000      	b.n	80093a0 <USBD_StdEPReq+0x1c8>
              break;
 800939e:	bf00      	nop
          }
          break;
 80093a0:	e0ab      	b.n	80094fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d002      	beq.n	80093b4 <USBD_StdEPReq+0x1dc>
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d032      	beq.n	8009418 <USBD_StdEPReq+0x240>
 80093b2:	e097      	b.n	80094e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <USBD_StdEPReq+0x1f2>
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b80      	cmp	r3, #128	; 0x80
 80093be:	d004      	beq.n	80093ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fbed 	bl	8009ba2 <USBD_CtlError>
                break;
 80093c8:	e091      	b.n	80094ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da0b      	bge.n	80093ea <USBD_StdEPReq+0x212>
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	3310      	adds	r3, #16
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4413      	add	r3, r2
 80093e6:	3304      	adds	r3, #4
 80093e8:	e00b      	b.n	8009402 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	4413      	add	r3, r2
 8009400:	3304      	adds	r3, #4
 8009402:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2202      	movs	r2, #2
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fc36 	bl	8009c82 <USBD_CtlSendData>
              break;
 8009416:	e06a      	b.n	80094ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800941c:	2b00      	cmp	r3, #0
 800941e:	da11      	bge.n	8009444 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	f003 020f 	and.w	r2, r3, #15
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	3324      	adds	r3, #36	; 0x24
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d117      	bne.n	800946a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fbb0 	bl	8009ba2 <USBD_CtlError>
                  break;
 8009442:	e054      	b.n	80094ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	f003 020f 	and.w	r2, r3, #15
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fb9d 	bl	8009ba2 <USBD_CtlError>
                  break;
 8009468:	e041      	b.n	80094ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800946a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	da0b      	bge.n	800948a <USBD_StdEPReq+0x2b2>
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	3310      	adds	r3, #16
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	4413      	add	r3, r2
 8009486:	3304      	adds	r3, #4
 8009488:	e00b      	b.n	80094a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	4413      	add	r3, r2
 80094a0:	3304      	adds	r3, #4
 80094a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <USBD_StdEPReq+0x2d8>
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b80      	cmp	r3, #128	; 0x80
 80094ae:	d103      	bne.n	80094b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e00e      	b.n	80094d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 f893 	bl	800a5e8 <USBD_LL_IsStallEP>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2201      	movs	r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2202      	movs	r2, #2
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fbd0 	bl	8009c82 <USBD_CtlSendData>
              break;
 80094e2:	e004      	b.n	80094ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fb5b 	bl	8009ba2 <USBD_CtlError>
              break;
 80094ec:	bf00      	nop
          }
          break;
 80094ee:	e004      	b.n	80094fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fb55 	bl	8009ba2 <USBD_CtlError>
          break;
 80094f8:	bf00      	nop
      }
      break;
 80094fa:	e005      	b.n	8009508 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fb4f 	bl	8009ba2 <USBD_CtlError>
      break;
 8009504:	e000      	b.n	8009508 <USBD_StdEPReq+0x330>
      break;
 8009506:	bf00      	nop
  }

  return ret;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	2b06      	cmp	r3, #6
 8009536:	f200 8128 	bhi.w	800978a <USBD_GetDescriptor+0x276>
 800953a:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <USBD_GetDescriptor+0x2c>)
 800953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009540:	0800955d 	.word	0x0800955d
 8009544:	08009575 	.word	0x08009575
 8009548:	080095b5 	.word	0x080095b5
 800954c:	0800978b 	.word	0x0800978b
 8009550:	0800978b 	.word	0x0800978b
 8009554:	0800972b 	.word	0x0800972b
 8009558:	08009757 	.word	0x08009757
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	7c12      	ldrb	r2, [r2, #16]
 8009568:	f107 0108 	add.w	r1, r7, #8
 800956c:	4610      	mov	r0, r2
 800956e:	4798      	blx	r3
 8009570:	60f8      	str	r0, [r7, #12]
      break;
 8009572:	e112      	b.n	800979a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	7c1b      	ldrb	r3, [r3, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10d      	bne.n	8009598 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009584:	f107 0208 	add.w	r2, r7, #8
 8009588:	4610      	mov	r0, r2
 800958a:	4798      	blx	r3
 800958c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	2202      	movs	r2, #2
 8009594:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009596:	e100      	b.n	800979a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	f107 0208 	add.w	r2, r7, #8
 80095a4:	4610      	mov	r0, r2
 80095a6:	4798      	blx	r3
 80095a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	2202      	movs	r2, #2
 80095b0:	701a      	strb	r2, [r3, #0]
      break;
 80095b2:	e0f2      	b.n	800979a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	885b      	ldrh	r3, [r3, #2]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	f200 80ac 	bhi.w	8009718 <USBD_GetDescriptor+0x204>
 80095c0:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <USBD_GetDescriptor+0xb4>)
 80095c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c6:	bf00      	nop
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	08009615 	.word	0x08009615
 80095d0:	08009649 	.word	0x08009649
 80095d4:	0800967d 	.word	0x0800967d
 80095d8:	080096b1 	.word	0x080096b1
 80095dc:	080096e5 	.word	0x080096e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	7c12      	ldrb	r2, [r2, #16]
 80095f8:	f107 0108 	add.w	r1, r7, #8
 80095fc:	4610      	mov	r0, r2
 80095fe:	4798      	blx	r3
 8009600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009602:	e091      	b.n	8009728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 facb 	bl	8009ba2 <USBD_CtlError>
            err++;
 800960c:	7afb      	ldrb	r3, [r7, #11]
 800960e:	3301      	adds	r3, #1
 8009610:	72fb      	strb	r3, [r7, #11]
          break;
 8009612:	e089      	b.n	8009728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	7c12      	ldrb	r2, [r2, #16]
 800962c:	f107 0108 	add.w	r1, r7, #8
 8009630:	4610      	mov	r0, r2
 8009632:	4798      	blx	r3
 8009634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009636:	e077      	b.n	8009728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fab1 	bl	8009ba2 <USBD_CtlError>
            err++;
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	3301      	adds	r3, #1
 8009644:	72fb      	strb	r3, [r7, #11]
          break;
 8009646:	e06f      	b.n	8009728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	7c12      	ldrb	r2, [r2, #16]
 8009660:	f107 0108 	add.w	r1, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800966a:	e05d      	b.n	8009728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa97 	bl	8009ba2 <USBD_CtlError>
            err++;
 8009674:	7afb      	ldrb	r3, [r7, #11]
 8009676:	3301      	adds	r3, #1
 8009678:	72fb      	strb	r3, [r7, #11]
          break;
 800967a:	e055      	b.n	8009728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	7c12      	ldrb	r2, [r2, #16]
 8009694:	f107 0108 	add.w	r1, r7, #8
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
 800969c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969e:	e043      	b.n	8009728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa7d 	bl	8009ba2 <USBD_CtlError>
            err++;
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	3301      	adds	r3, #1
 80096ac:	72fb      	strb	r3, [r7, #11]
          break;
 80096ae:	e03b      	b.n	8009728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	7c12      	ldrb	r2, [r2, #16]
 80096c8:	f107 0108 	add.w	r1, r7, #8
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d2:	e029      	b.n	8009728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa63 	bl	8009ba2 <USBD_CtlError>
            err++;
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	3301      	adds	r3, #1
 80096e0:	72fb      	strb	r3, [r7, #11]
          break;
 80096e2:	e021      	b.n	8009728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7c12      	ldrb	r2, [r2, #16]
 80096fc:	f107 0108 	add.w	r1, r7, #8
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009706:	e00f      	b.n	8009728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa49 	bl	8009ba2 <USBD_CtlError>
            err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
          break;
 8009716:	e007      	b.n	8009728 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa41 	bl	8009ba2 <USBD_CtlError>
          err++;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	3301      	adds	r3, #1
 8009724:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009726:	bf00      	nop
      }
      break;
 8009728:	e037      	b.n	800979a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	7c1b      	ldrb	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973a:	f107 0208 	add.w	r2, r7, #8
 800973e:	4610      	mov	r0, r2
 8009740:	4798      	blx	r3
 8009742:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009744:	e029      	b.n	800979a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fa2a 	bl	8009ba2 <USBD_CtlError>
        err++;
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	3301      	adds	r3, #1
 8009752:	72fb      	strb	r3, [r7, #11]
      break;
 8009754:	e021      	b.n	800979a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	7c1b      	ldrb	r3, [r3, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10d      	bne.n	800977a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009766:	f107 0208 	add.w	r2, r7, #8
 800976a:	4610      	mov	r0, r2
 800976c:	4798      	blx	r3
 800976e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	2207      	movs	r2, #7
 8009776:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009778:	e00f      	b.n	800979a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fa10 	bl	8009ba2 <USBD_CtlError>
        err++;
 8009782:	7afb      	ldrb	r3, [r7, #11]
 8009784:	3301      	adds	r3, #1
 8009786:	72fb      	strb	r3, [r7, #11]
      break;
 8009788:	e007      	b.n	800979a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fa08 	bl	8009ba2 <USBD_CtlError>
      err++;
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	3301      	adds	r3, #1
 8009796:	72fb      	strb	r3, [r7, #11]
      break;
 8009798:	bf00      	nop
  }

  if (err != 0U)
 800979a:	7afb      	ldrb	r3, [r7, #11]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11e      	bne.n	80097de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	88db      	ldrh	r3, [r3, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d016      	beq.n	80097d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097a8:	893b      	ldrh	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00e      	beq.n	80097cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	88da      	ldrh	r2, [r3, #6]
 80097b2:	893b      	ldrh	r3, [r7, #8]
 80097b4:	4293      	cmp	r3, r2
 80097b6:	bf28      	it	cs
 80097b8:	4613      	movcs	r3, r2
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	461a      	mov	r2, r3
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fa5c 	bl	8009c82 <USBD_CtlSendData>
 80097ca:	e009      	b.n	80097e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9e7 	bl	8009ba2 <USBD_CtlError>
 80097d4:	e004      	b.n	80097e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 faad 	bl	8009d36 <USBD_CtlSendStatus>
 80097dc:	e000      	b.n	80097e0 <USBD_GetDescriptor+0x2cc>
    return;
 80097de:	bf00      	nop
  }
}
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	889b      	ldrh	r3, [r3, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d131      	bne.n	800985e <USBD_SetAddress+0x76>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d12d      	bne.n	800985e <USBD_SetAddress+0x76>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	2b7f      	cmp	r3, #127	; 0x7f
 8009808:	d829      	bhi.n	800985e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b03      	cmp	r3, #3
 8009820:	d104      	bne.n	800982c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f9bc 	bl	8009ba2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982a:	e01d      	b.n	8009868 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7bfa      	ldrb	r2, [r7, #15]
 8009830:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 ff00 	bl	800a63e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa79 	bl	8009d36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2202      	movs	r2, #2
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009852:	e009      	b.n	8009868 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985c:	e004      	b.n	8009868 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f99e 	bl	8009ba2 <USBD_CtlError>
  }
}
 8009866:	bf00      	nop
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	b2da      	uxtb	r2, r3
 8009884:	4b4e      	ldr	r3, [pc, #312]	; (80099c0 <USBD_SetConfig+0x150>)
 8009886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009888:	4b4d      	ldr	r3, [pc, #308]	; (80099c0 <USBD_SetConfig+0x150>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d905      	bls.n	800989c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f985 	bl	8009ba2 <USBD_CtlError>
    return USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	e08c      	b.n	80099b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d002      	beq.n	80098ae <USBD_SetConfig+0x3e>
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d029      	beq.n	8009900 <USBD_SetConfig+0x90>
 80098ac:	e075      	b.n	800999a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098ae:	4b44      	ldr	r3, [pc, #272]	; (80099c0 <USBD_SetConfig+0x150>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d020      	beq.n	80098f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098b6:	4b42      	ldr	r3, [pc, #264]	; (80099c0 <USBD_SetConfig+0x150>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098c0:	4b3f      	ldr	r3, [pc, #252]	; (80099c0 <USBD_SetConfig+0x150>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fe ffee 	bl	80088a8 <USBD_SetClassConfig>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d008      	beq.n	80098e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f962 	bl	8009ba2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2202      	movs	r2, #2
 80098e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098e6:	e065      	b.n	80099b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fa24 	bl	8009d36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2203      	movs	r2, #3
 80098f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098f6:	e05d      	b.n	80099b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fa1c 	bl	8009d36 <USBD_CtlSendStatus>
      break;
 80098fe:	e059      	b.n	80099b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009900:	4b2f      	ldr	r3, [pc, #188]	; (80099c0 <USBD_SetConfig+0x150>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d112      	bne.n	800992e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009910:	4b2b      	ldr	r3, [pc, #172]	; (80099c0 <USBD_SetConfig+0x150>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800991a:	4b29      	ldr	r3, [pc, #164]	; (80099c0 <USBD_SetConfig+0x150>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7fe ffdd 	bl	80088e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa05 	bl	8009d36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800992c:	e042      	b.n	80099b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800992e:	4b24      	ldr	r3, [pc, #144]	; (80099c0 <USBD_SetConfig+0x150>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d02a      	beq.n	8009992 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fe ffcb 	bl	80088e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800994a:	4b1d      	ldr	r3, [pc, #116]	; (80099c0 <USBD_SetConfig+0x150>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009954:	4b1a      	ldr	r3, [pc, #104]	; (80099c0 <USBD_SetConfig+0x150>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7fe ffa4 	bl	80088a8 <USBD_SetClassConfig>
 8009960:	4603      	mov	r3, r0
 8009962:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00f      	beq.n	800998a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f918 	bl	8009ba2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7fe ffb0 	bl	80088e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009988:	e014      	b.n	80099b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f9d3 	bl	8009d36 <USBD_CtlSendStatus>
      break;
 8009990:	e010      	b.n	80099b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f9cf 	bl	8009d36 <USBD_CtlSendStatus>
      break;
 8009998:	e00c      	b.n	80099b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f900 	bl	8009ba2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099a2:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <USBD_SetConfig+0x150>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7fe ff99 	bl	80088e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099ae:	2303      	movs	r3, #3
 80099b0:	73fb      	strb	r3, [r7, #15]
      break;
 80099b2:	bf00      	nop
  }

  return ret;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000608 	.word	0x20000608

080099c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d004      	beq.n	80099e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f8e2 	bl	8009ba2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099de:	e023      	b.n	8009a28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	dc02      	bgt.n	80099f2 <USBD_GetConfig+0x2e>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dc03      	bgt.n	80099f8 <USBD_GetConfig+0x34>
 80099f0:	e015      	b.n	8009a1e <USBD_GetConfig+0x5a>
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d00b      	beq.n	8009a0e <USBD_GetConfig+0x4a>
 80099f6:	e012      	b.n	8009a1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3308      	adds	r3, #8
 8009a02:	2201      	movs	r2, #1
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f93b 	bl	8009c82 <USBD_CtlSendData>
        break;
 8009a0c:	e00c      	b.n	8009a28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3304      	adds	r3, #4
 8009a12:	2201      	movs	r2, #1
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f933 	bl	8009c82 <USBD_CtlSendData>
        break;
 8009a1c:	e004      	b.n	8009a28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8be 	bl	8009ba2 <USBD_CtlError>
        break;
 8009a26:	bf00      	nop
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d81e      	bhi.n	8009a86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	88db      	ldrh	r3, [r3, #6]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d004      	beq.n	8009a5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f8a5 	bl	8009ba2 <USBD_CtlError>
        break;
 8009a58:	e01a      	b.n	8009a90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f043 0202 	orr.w	r2, r3, #2
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f8ff 	bl	8009c82 <USBD_CtlSendData>
      break;
 8009a84:	e004      	b.n	8009a90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f88a 	bl	8009ba2 <USBD_CtlError>
      break;
 8009a8e:	bf00      	nop
  }
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	885b      	ldrh	r3, [r3, #2]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d107      	bne.n	8009aba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f93f 	bl	8009d36 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ab8:	e013      	b.n	8009ae2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	885b      	ldrh	r3, [r3, #2]
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d10b      	bne.n	8009ada <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	889b      	ldrh	r3, [r3, #4]
 8009ac6:	0a1b      	lsrs	r3, r3, #8
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f92f 	bl	8009d36 <USBD_CtlSendStatus>
}
 8009ad8:	e003      	b.n	8009ae2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f860 	bl	8009ba2 <USBD_CtlError>
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b082      	sub	sp, #8
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d80b      	bhi.n	8009b1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	885b      	ldrh	r3, [r3, #2]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d10c      	bne.n	8009b24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f90f 	bl	8009d36 <USBD_CtlSendStatus>
      }
      break;
 8009b18:	e004      	b.n	8009b24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f840 	bl	8009ba2 <USBD_CtlError>
      break;
 8009b22:	e000      	b.n	8009b26 <USBD_ClrFeature+0x3c>
      break;
 8009b24:	bf00      	nop
  }
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	781a      	ldrb	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3301      	adds	r3, #1
 8009b56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fa41 	bl	8008fe0 <SWAPBYTE>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff fa34 	bl	8008fe0 <SWAPBYTE>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f7ff fa27 	bl	8008fe0 <SWAPBYTE>
 8009b92:	4603      	mov	r3, r0
 8009b94:	461a      	mov	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	80da      	strh	r2, [r3, #6]
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bac:	2180      	movs	r1, #128	; 0x80
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fcdc 	bl	800a56c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fcd8 	bl	800a56c <USBD_LL_StallEP>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d036      	beq.n	8009c48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009bde:	6938      	ldr	r0, [r7, #16]
 8009be0:	f000 f836 	bl	8009c50 <USBD_GetLen>
 8009be4:	4603      	mov	r3, r0
 8009be6:	3301      	adds	r3, #1
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	3301      	adds	r3, #1
 8009c02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	4413      	add	r3, r2
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	3301      	adds	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c14:	e013      	b.n	8009c3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	7812      	ldrb	r2, [r2, #0]
 8009c20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	3301      	adds	r3, #1
 8009c26:	613b      	str	r3, [r7, #16]
    idx++;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	4413      	add	r3, r2
 8009c34:	2200      	movs	r2, #0
 8009c36:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e7      	bne.n	8009c16 <USBD_GetString+0x52>
 8009c46:	e000      	b.n	8009c4a <USBD_GetString+0x86>
    return;
 8009c48:	bf00      	nop
  }
}
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c60:	e005      	b.n	8009c6e <USBD_GetLen+0x1e>
  {
    len++;
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	3301      	adds	r3, #1
 8009c66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f5      	bne.n	8009c62 <USBD_GetLen+0x12>
  }

  return len;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bc80      	pop	{r7}
 8009c80:	4770      	bx	lr

08009c82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2202      	movs	r2, #2
 8009c92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fce7 	bl	800a67c <USBD_LL_Transmit>

  return USBD_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	2100      	movs	r1, #0
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 fcd6 	bl	800a67c <USBD_LL_Transmit>

  return USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2203      	movs	r2, #3
 8009cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	2100      	movs	r1, #0
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fcda 	bl	800a6be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	2100      	movs	r1, #0
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fcc9 	bl	800a6be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2204      	movs	r2, #4
 8009d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d46:	2300      	movs	r3, #0
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc95 	bl	800a67c <USBD_LL_Transmit>

  return USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2205      	movs	r2, #5
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fca3 	bl	800a6be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4912      	ldr	r1, [pc, #72]	; (8009dd4 <MX_USB_DEVICE_Init+0x50>)
 8009d8c:	4812      	ldr	r0, [pc, #72]	; (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009d8e:	f7fe fd0f 	bl	80087b0 <USBD_Init>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d98:	f7f7 fc1c 	bl	80015d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d9c:	490f      	ldr	r1, [pc, #60]	; (8009ddc <MX_USB_DEVICE_Init+0x58>)
 8009d9e:	480e      	ldr	r0, [pc, #56]	; (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009da0:	f7fe fd36 	bl	8008810 <USBD_RegisterClass>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009daa:	f7f7 fc13 	bl	80015d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009dae:	490c      	ldr	r1, [pc, #48]	; (8009de0 <MX_USB_DEVICE_Init+0x5c>)
 8009db0:	4809      	ldr	r0, [pc, #36]	; (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009db2:	f7fe fc2b 	bl	800860c <USBD_CDC_RegisterInterface>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009dbc:	f7f7 fc0a 	bl	80015d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009dc0:	4805      	ldr	r0, [pc, #20]	; (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009dc2:	f7fe fd5b 	bl	800887c <USBD_Start>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009dcc:	f7f7 fc02 	bl	80015d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009dd0:	bf00      	nop
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	2000010c 	.word	0x2000010c
 8009dd8:	2000060c 	.word	0x2000060c
 8009ddc:	20000078 	.word	0x20000078
 8009de0:	200000f8 	.word	0x200000f8

08009de4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009de8:	2200      	movs	r2, #0
 8009dea:	4905      	ldr	r1, [pc, #20]	; (8009e00 <CDC_Init_FS+0x1c>)
 8009dec:	4805      	ldr	r0, [pc, #20]	; (8009e04 <CDC_Init_FS+0x20>)
 8009dee:	f7fe fc26 	bl	800863e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009df2:	4905      	ldr	r1, [pc, #20]	; (8009e08 <CDC_Init_FS+0x24>)
 8009df4:	4803      	ldr	r0, [pc, #12]	; (8009e04 <CDC_Init_FS+0x20>)
 8009df6:	f7fe fc43 	bl	8008680 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200010e8 	.word	0x200010e8
 8009e04:	2000060c 	.word	0x2000060c
 8009e08:	200008e8 	.word	0x200008e8

08009e0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr
	...

08009e1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b23      	cmp	r3, #35	; 0x23
 8009e30:	d84a      	bhi.n	8009ec8 <CDC_Control_FS+0xac>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <CDC_Control_FS+0x1c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009ec9 	.word	0x08009ec9
 8009e3c:	08009ec9 	.word	0x08009ec9
 8009e40:	08009ec9 	.word	0x08009ec9
 8009e44:	08009ec9 	.word	0x08009ec9
 8009e48:	08009ec9 	.word	0x08009ec9
 8009e4c:	08009ec9 	.word	0x08009ec9
 8009e50:	08009ec9 	.word	0x08009ec9
 8009e54:	08009ec9 	.word	0x08009ec9
 8009e58:	08009ec9 	.word	0x08009ec9
 8009e5c:	08009ec9 	.word	0x08009ec9
 8009e60:	08009ec9 	.word	0x08009ec9
 8009e64:	08009ec9 	.word	0x08009ec9
 8009e68:	08009ec9 	.word	0x08009ec9
 8009e6c:	08009ec9 	.word	0x08009ec9
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009ec9 	.word	0x08009ec9
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009ec9 	.word	0x08009ec9
 8009e80:	08009ec9 	.word	0x08009ec9
 8009e84:	08009ec9 	.word	0x08009ec9
 8009e88:	08009ec9 	.word	0x08009ec9
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009ec9 	.word	0x08009ec9
 8009e94:	08009ec9 	.word	0x08009ec9
 8009e98:	08009ec9 	.word	0x08009ec9
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	08009ec9 	.word	0x08009ec9
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ec9 	.word	0x08009ec9
 8009eac:	08009ec9 	.word	0x08009ec9
 8009eb0:	08009ec9 	.word	0x08009ec9
 8009eb4:	08009ec9 	.word	0x08009ec9
 8009eb8:	08009ec9 	.word	0x08009ec9
 8009ebc:	08009ec9 	.word	0x08009ec9
 8009ec0:	08009ec9 	.word	0x08009ec9
 8009ec4:	08009ec9 	.word	0x08009ec9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ec8:	bf00      	nop
  }

  return (USBD_OK);
 8009eca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bc80      	pop	{r7}
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop

08009ed8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4805      	ldr	r0, [pc, #20]	; (8009efc <CDC_Receive_FS+0x24>)
 8009ee6:	f7fe fbcb 	bl	8008680 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009eea:	4804      	ldr	r0, [pc, #16]	; (8009efc <CDC_Receive_FS+0x24>)
 8009eec:	f7fe fc2a 	bl	8008744 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	2000060c 	.word	0x2000060c

08009f00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f10:	4b0d      	ldr	r3, [pc, #52]	; (8009f48 <CDC_Transmit_FS+0x48>)
 8009f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e00b      	b.n	8009f3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f26:	887b      	ldrh	r3, [r7, #2]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4806      	ldr	r0, [pc, #24]	; (8009f48 <CDC_Transmit_FS+0x48>)
 8009f2e:	f7fe fb86 	bl	800863e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f32:	4805      	ldr	r0, [pc, #20]	; (8009f48 <CDC_Transmit_FS+0x48>)
 8009f34:	f7fe fbc0 	bl	80086b8 <USBD_CDC_TransmitPacket>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	2000060c 	.word	0x2000060c

08009f4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	4613      	mov	r3, r2
 8009f58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	6039      	str	r1, [r7, #0]
 8009f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2212      	movs	r2, #18
 8009f7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f7e:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bc80      	pop	{r7}
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	20000128 	.word	0x20000128

08009f90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2204      	movs	r2, #4
 8009fa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fa2:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bc80      	pop	{r7}
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	2000013c 	.word	0x2000013c

08009fb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d105      	bne.n	8009fd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	4907      	ldr	r1, [pc, #28]	; (8009fe8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fca:	4808      	ldr	r0, [pc, #32]	; (8009fec <USBD_FS_ProductStrDescriptor+0x38>)
 8009fcc:	f7ff fdfa 	bl	8009bc4 <USBD_GetString>
 8009fd0:	e004      	b.n	8009fdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	4904      	ldr	r1, [pc, #16]	; (8009fe8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fd6:	4805      	ldr	r0, [pc, #20]	; (8009fec <USBD_FS_ProductStrDescriptor+0x38>)
 8009fd8:	f7ff fdf4 	bl	8009bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fdc:	4b02      	ldr	r3, [pc, #8]	; (8009fe8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200018e8 	.word	0x200018e8
 8009fec:	0800b170 	.word	0x0800b170

08009ff0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	6039      	str	r1, [r7, #0]
 8009ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	4904      	ldr	r1, [pc, #16]	; (800a010 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a000:	4804      	ldr	r0, [pc, #16]	; (800a014 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a002:	f7ff fddf 	bl	8009bc4 <USBD_GetString>
  return USBD_StrDesc;
 800a006:	4b02      	ldr	r3, [pc, #8]	; (800a010 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	200018e8 	.word	0x200018e8
 800a014:	0800b188 	.word	0x0800b188

0800a018 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	221a      	movs	r2, #26
 800a028:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a02a:	f000 f843 	bl	800a0b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a02e:	4b02      	ldr	r3, [pc, #8]	; (800a038 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20000140 	.word	0x20000140

0800a03c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d105      	bne.n	800a05a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	4907      	ldr	r1, [pc, #28]	; (800a070 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a052:	4808      	ldr	r0, [pc, #32]	; (800a074 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a054:	f7ff fdb6 	bl	8009bc4 <USBD_GetString>
 800a058:	e004      	b.n	800a064 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	4904      	ldr	r1, [pc, #16]	; (800a070 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a05e:	4805      	ldr	r0, [pc, #20]	; (800a074 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a060:	f7ff fdb0 	bl	8009bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a064:	4b02      	ldr	r3, [pc, #8]	; (800a070 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a066:	4618      	mov	r0, r3
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200018e8 	.word	0x200018e8
 800a074:	0800b19c 	.word	0x0800b19c

0800a078 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	6039      	str	r1, [r7, #0]
 800a082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d105      	bne.n	800a096 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4907      	ldr	r1, [pc, #28]	; (800a0ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a08e:	4808      	ldr	r0, [pc, #32]	; (800a0b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a090:	f7ff fd98 	bl	8009bc4 <USBD_GetString>
 800a094:	e004      	b.n	800a0a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4904      	ldr	r1, [pc, #16]	; (800a0ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a09a:	4805      	ldr	r0, [pc, #20]	; (800a0b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a09c:	f7ff fd92 	bl	8009bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a0:	4b02      	ldr	r3, [pc, #8]	; (800a0ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200018e8 	.word	0x200018e8
 800a0b0:	0800b1a8 	.word	0x0800b1a8

0800a0b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0ba:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <Get_SerialNum+0x44>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0c0:	4b0e      	ldr	r3, [pc, #56]	; (800a0fc <Get_SerialNum+0x48>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <Get_SerialNum+0x4c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0da:	2208      	movs	r2, #8
 800a0dc:	4909      	ldr	r1, [pc, #36]	; (800a104 <Get_SerialNum+0x50>)
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f814 	bl	800a10c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	4908      	ldr	r1, [pc, #32]	; (800a108 <Get_SerialNum+0x54>)
 800a0e8:	68b8      	ldr	r0, [r7, #8]
 800a0ea:	f000 f80f 	bl	800a10c <IntToUnicode>
  }
}
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	1fff7a10 	.word	0x1fff7a10
 800a0fc:	1fff7a14 	.word	0x1fff7a14
 800a100:	1fff7a18 	.word	0x1fff7a18
 800a104:	20000142 	.word	0x20000142
 800a108:	20000152 	.word	0x20000152

0800a10c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	4613      	mov	r3, r2
 800a118:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
 800a122:	e027      	b.n	800a174 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	0f1b      	lsrs	r3, r3, #28
 800a128:	2b09      	cmp	r3, #9
 800a12a:	d80b      	bhi.n	800a144 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	0f1b      	lsrs	r3, r3, #28
 800a130:	b2da      	uxtb	r2, r3
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	4619      	mov	r1, r3
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	440b      	add	r3, r1
 800a13c:	3230      	adds	r2, #48	; 0x30
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e00a      	b.n	800a15a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	0f1b      	lsrs	r3, r3, #28
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4619      	mov	r1, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	440b      	add	r3, r1
 800a154:	3237      	adds	r2, #55	; 0x37
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	3301      	adds	r3, #1
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	4413      	add	r3, r2
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	3301      	adds	r3, #1
 800a172:	75fb      	strb	r3, [r7, #23]
 800a174:	7dfa      	ldrb	r2, [r7, #23]
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d3d3      	bcc.n	800a124 <IntToUnicode+0x18>
  }
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr

0800a188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	; 0x28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	605a      	str	r2, [r3, #4]
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	60da      	str	r2, [r3, #12]
 800a19e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1a8:	d13a      	bne.n	800a220 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	4b1e      	ldr	r3, [pc, #120]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	4a1d      	ldr	r2, [pc, #116]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ba:	4b1b      	ldr	r3, [pc, #108]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	613b      	str	r3, [r7, #16]
 800a1c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a1c6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a1ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a1d8:	230a      	movs	r3, #10
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1dc:	f107 0314 	add.w	r3, r7, #20
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4812      	ldr	r0, [pc, #72]	; (800a22c <HAL_PCD_MspInit+0xa4>)
 800a1e4:	f7f8 f83a 	bl	800225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ec:	4a0e      	ldr	r2, [pc, #56]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f2:	6353      	str	r3, [r2, #52]	; 0x34
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fc:	4a0a      	ldr	r2, [pc, #40]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a202:	6453      	str	r3, [r2, #68]	; 0x44
 800a204:	4b08      	ldr	r3, [pc, #32]	; (800a228 <HAL_PCD_MspInit+0xa0>)
 800a206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a210:	2200      	movs	r2, #0
 800a212:	2100      	movs	r1, #0
 800a214:	2043      	movs	r0, #67	; 0x43
 800a216:	f7f7 fb80 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a21a:	2043      	movs	r0, #67	; 0x43
 800a21c:	f7f7 fb99 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a220:	bf00      	nop
 800a222:	3728      	adds	r7, #40	; 0x28
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	40023800 	.word	0x40023800
 800a22c:	40020000 	.word	0x40020000

0800a230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a244:	4619      	mov	r1, r3
 800a246:	4610      	mov	r0, r2
 800a248:	f7fe fb64 	bl	8008914 <USBD_LL_SetupStage>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	4613      	mov	r3, r2
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	4619      	mov	r1, r3
 800a27e:	f7fe fb9e 	bl	80089be <USBD_LL_DataOutStage>
}
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a29c:	78fa      	ldrb	r2, [r7, #3]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	334c      	adds	r3, #76	; 0x4c
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	f7fe fc37 	bl	8008b24 <USBD_LL_DataInStage>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fd68 	bl	8008da2 <USBD_LL_SOF>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
 800a2f2:	e008      	b.n	800a306 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d102      	bne.n	800a302 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	73fb      	strb	r3, [r7, #15]
 800a300:	e001      	b.n	800a306 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a302:	f7f7 f967 	bl	80015d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a30c:	7bfa      	ldrb	r2, [r7, #15]
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f7fe fd0b 	bl	8008d2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fcb3 	bl	8008c88 <USBD_LL_Reset>
}
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fd05 	bl	8008d4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6812      	ldr	r2, [r2, #0]
 800a34e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a352:	f043 0301 	orr.w	r3, r3, #1
 800a356:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <HAL_PCD_SuspendCallback+0x48>)
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	4a03      	ldr	r2, [pc, #12]	; (800a374 <HAL_PCD_SuspendCallback+0x48>)
 800a366:	f043 0306 	orr.w	r3, r3, #6
 800a36a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	e000ed00 	.word	0xe000ed00

0800a378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fcf4 	bl	8008d74 <USBD_LL_Resume>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fd4b 	bl	8008e46 <USBD_LL_IsoOUTIncomplete>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe fd07 	bl	8008de2 <USBD_LL_IsoINIncomplete>
}
 800a3d4:	bf00      	nop
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fd5d 	bl	8008eaa <USBD_LL_DevConnected>
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fd59 	bl	8008ebe <USBD_LL_DevDisconnected>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d13c      	bne.n	800a49e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a424:	4a20      	ldr	r2, [pc, #128]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a430:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a434:	4b1c      	ldr	r3, [pc, #112]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a43a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a43c:	4b1a      	ldr	r3, [pc, #104]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a43e:	2204      	movs	r2, #4
 800a440:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a442:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a444:	2202      	movs	r2, #2
 800a446:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a448:	4b17      	ldr	r3, [pc, #92]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a44e:	4b16      	ldr	r3, [pc, #88]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a450:	2202      	movs	r2, #2
 800a452:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a454:	4b14      	ldr	r3, [pc, #80]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a456:	2201      	movs	r2, #1
 800a458:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a45a:	4b13      	ldr	r3, [pc, #76]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a460:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a462:	2200      	movs	r2, #0
 800a464:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a466:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a468:	2200      	movs	r2, #0
 800a46a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a46c:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a46e:	2200      	movs	r2, #0
 800a470:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a472:	480d      	ldr	r0, [pc, #52]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a474:	f7f8 f9b7 	bl	80027e6 <HAL_PCD_Init>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a47e:	f7f7 f8a9 	bl	80015d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	4808      	ldr	r0, [pc, #32]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a486:	f7f9 fc0d 	bl	8003ca4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a48a:	2240      	movs	r2, #64	; 0x40
 800a48c:	2100      	movs	r1, #0
 800a48e:	4806      	ldr	r0, [pc, #24]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a490:	f7f9 fbc2 	bl	8003c18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a494:	2280      	movs	r2, #128	; 0x80
 800a496:	2101      	movs	r1, #1
 800a498:	4803      	ldr	r0, [pc, #12]	; (800a4a8 <USBD_LL_Init+0x94>)
 800a49a:	f7f9 fbbd 	bl	8003c18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20001ae8 	.word	0x20001ae8

0800a4ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f8 faac 	bl	8002a20 <HAL_PCD_Start>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f940 	bl	800a754 <USBD_Get_USB_Status>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	70fb      	strb	r3, [r7, #3]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70bb      	strb	r3, [r7, #2]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a50a:	78bb      	ldrb	r3, [r7, #2]
 800a50c:	883a      	ldrh	r2, [r7, #0]
 800a50e:	78f9      	ldrb	r1, [r7, #3]
 800a510:	f7f8 ff7d 	bl	800340e <HAL_PCD_EP_Open>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f91a 	bl	800a754 <USBD_Get_USB_Status>
 800a520:	4603      	mov	r3, r0
 800a522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a524:	7bbb      	ldrb	r3, [r7, #14]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f8 ffc6 	bl	80034de <HAL_PCD_EP_Close>
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f8fb 	bl	800a754 <USBD_Get_USB_Status>
 800a55e:	4603      	mov	r3, r0
 800a560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a562:	7bbb      	ldrb	r3, [r7, #14]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7f9 f89d 	bl	80036ca <HAL_PCD_EP_SetStall>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 f8dc 	bl	800a754 <USBD_Get_USB_Status>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7f9 f8e2 	bl	8003792 <HAL_PCD_EP_ClrStall>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f8bd 	bl	800a754 <USBD_Get_USB_Status>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a600:	2b00      	cmp	r3, #0
 800a602:	da0b      	bge.n	800a61c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	00db      	lsls	r3, r3, #3
 800a610:	4413      	add	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	440b      	add	r3, r1
 800a616:	333e      	adds	r3, #62	; 0x3e
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	e00b      	b.n	800a634 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a61c:	78fb      	ldrb	r3, [r7, #3]
 800a61e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	4613      	mov	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a632:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	bc80      	pop	{r7}
 800a63c:	4770      	bx	lr

0800a63e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	460b      	mov	r3, r1
 800a648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a658:	78fa      	ldrb	r2, [r7, #3]
 800a65a:	4611      	mov	r1, r2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7f8 feb1 	bl	80033c4 <HAL_PCD_SetAddress>
 800a662:	4603      	mov	r3, r0
 800a664:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 f873 	bl	800a754 <USBD_Get_USB_Status>
 800a66e:	4603      	mov	r3, r0
 800a670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a672:	7bbb      	ldrb	r3, [r7, #14]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	607a      	str	r2, [r7, #4]
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	460b      	mov	r3, r1
 800a68a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a69a:	7af9      	ldrb	r1, [r7, #11]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	f7f8 ffc9 	bl	8003636 <HAL_PCD_EP_Transmit>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 f852 	bl	800a754 <USBD_Get_USB_Status>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b086      	sub	sp, #24
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	60f8      	str	r0, [r7, #12]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a6dc:	7af9      	ldrb	r1, [r7, #11]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	f7f8 ff46 	bl	8003572 <HAL_PCD_EP_Receive>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 f831 	bl	800a754 <USBD_Get_USB_Status>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	4611      	mov	r1, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f7f8 ff76 	bl	8003608 <HAL_PCD_EP_GetRxCount>
 800a71c:	4603      	mov	r3, r0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <USBD_static_malloc+0x14>)
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	bc80      	pop	{r7}
 800a73a:	4770      	bx	lr
 800a73c:	20001ff4 	.word	0x20001ff4

0800a740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]

}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
	...

0800a754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	2b03      	cmp	r3, #3
 800a766:	d817      	bhi.n	800a798 <USBD_Get_USB_Status+0x44>
 800a768:	a201      	add	r2, pc, #4	; (adr r2, 800a770 <USBD_Get_USB_Status+0x1c>)
 800a76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76e:	bf00      	nop
 800a770:	0800a781 	.word	0x0800a781
 800a774:	0800a787 	.word	0x0800a787
 800a778:	0800a78d 	.word	0x0800a78d
 800a77c:	0800a793 	.word	0x0800a793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]
    break;
 800a784:	e00b      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a786:	2303      	movs	r3, #3
 800a788:	73fb      	strb	r3, [r7, #15]
    break;
 800a78a:	e008      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a78c:	2301      	movs	r3, #1
 800a78e:	73fb      	strb	r3, [r7, #15]
    break;
 800a790:	e005      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a792:	2303      	movs	r3, #3
 800a794:	73fb      	strb	r3, [r7, #15]
    break;
 800a796:	e002      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a798:	2303      	movs	r3, #3
 800a79a:	73fb      	strb	r3, [r7, #15]
    break;
 800a79c:	bf00      	nop
  }
  return usb_status;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop

0800a7ac <main>:




int main(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
  int ret = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	607b      	str	r3, [r7, #4]


  hwInit();
 800a7b6:	f7f6 ff12 	bl	80015de <hwInit>
  apInit();
 800a7ba:	f7f5 fee7 	bl	800058c <apInit>

  apMain();
 800a7be:	f7f5 ff15 	bl	80005ec <apMain>


  return ret;
 800a7c2:	687b      	ldr	r3, [r7, #4]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <__errno>:
 800a7cc:	4b01      	ldr	r3, [pc, #4]	; (800a7d4 <__errno+0x8>)
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	2000015c 	.word	0x2000015c

0800a7d8 <__libc_init_array>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	4d0d      	ldr	r5, [pc, #52]	; (800a810 <__libc_init_array+0x38>)
 800a7dc:	4c0d      	ldr	r4, [pc, #52]	; (800a814 <__libc_init_array+0x3c>)
 800a7de:	1b64      	subs	r4, r4, r5
 800a7e0:	10a4      	asrs	r4, r4, #2
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	42a6      	cmp	r6, r4
 800a7e6:	d109      	bne.n	800a7fc <__libc_init_array+0x24>
 800a7e8:	4d0b      	ldr	r5, [pc, #44]	; (800a818 <__libc_init_array+0x40>)
 800a7ea:	4c0c      	ldr	r4, [pc, #48]	; (800a81c <__libc_init_array+0x44>)
 800a7ec:	f000 fca6 	bl	800b13c <_init>
 800a7f0:	1b64      	subs	r4, r4, r5
 800a7f2:	10a4      	asrs	r4, r4, #2
 800a7f4:	2600      	movs	r6, #0
 800a7f6:	42a6      	cmp	r6, r4
 800a7f8:	d105      	bne.n	800a806 <__libc_init_array+0x2e>
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a800:	4798      	blx	r3
 800a802:	3601      	adds	r6, #1
 800a804:	e7ee      	b.n	800a7e4 <__libc_init_array+0xc>
 800a806:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80a:	4798      	blx	r3
 800a80c:	3601      	adds	r6, #1
 800a80e:	e7f2      	b.n	800a7f6 <__libc_init_array+0x1e>
 800a810:	0800b214 	.word	0x0800b214
 800a814:	0800b214 	.word	0x0800b214
 800a818:	0800b214 	.word	0x0800b214
 800a81c:	0800b218 	.word	0x0800b218

0800a820 <memset>:
 800a820:	4402      	add	r2, r0
 800a822:	4603      	mov	r3, r0
 800a824:	4293      	cmp	r3, r2
 800a826:	d100      	bne.n	800a82a <memset+0xa>
 800a828:	4770      	bx	lr
 800a82a:	f803 1b01 	strb.w	r1, [r3], #1
 800a82e:	e7f9      	b.n	800a824 <memset+0x4>

0800a830 <_vsniprintf_r>:
 800a830:	b530      	push	{r4, r5, lr}
 800a832:	4614      	mov	r4, r2
 800a834:	2c00      	cmp	r4, #0
 800a836:	b09b      	sub	sp, #108	; 0x6c
 800a838:	4605      	mov	r5, r0
 800a83a:	461a      	mov	r2, r3
 800a83c:	da05      	bge.n	800a84a <_vsniprintf_r+0x1a>
 800a83e:	238b      	movs	r3, #139	; 0x8b
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	b01b      	add	sp, #108	; 0x6c
 800a848:	bd30      	pop	{r4, r5, pc}
 800a84a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a84e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a852:	bf14      	ite	ne
 800a854:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a858:	4623      	moveq	r3, r4
 800a85a:	9302      	str	r3, [sp, #8]
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a862:	9100      	str	r1, [sp, #0]
 800a864:	9104      	str	r1, [sp, #16]
 800a866:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a86a:	4669      	mov	r1, sp
 800a86c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a86e:	f000 f875 	bl	800a95c <_svfiprintf_r>
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	bfbc      	itt	lt
 800a876:	238b      	movlt	r3, #139	; 0x8b
 800a878:	602b      	strlt	r3, [r5, #0]
 800a87a:	2c00      	cmp	r4, #0
 800a87c:	d0e3      	beq.n	800a846 <_vsniprintf_r+0x16>
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	e7df      	b.n	800a846 <_vsniprintf_r+0x16>
	...

0800a888 <vsniprintf>:
 800a888:	b507      	push	{r0, r1, r2, lr}
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	4613      	mov	r3, r2
 800a88e:	460a      	mov	r2, r1
 800a890:	4601      	mov	r1, r0
 800a892:	4803      	ldr	r0, [pc, #12]	; (800a8a0 <vsniprintf+0x18>)
 800a894:	6800      	ldr	r0, [r0, #0]
 800a896:	f7ff ffcb 	bl	800a830 <_vsniprintf_r>
 800a89a:	b003      	add	sp, #12
 800a89c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8a0:	2000015c 	.word	0x2000015c

0800a8a4 <__ssputs_r>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	688e      	ldr	r6, [r1, #8]
 800a8aa:	429e      	cmp	r6, r3
 800a8ac:	4682      	mov	sl, r0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4690      	mov	r8, r2
 800a8b2:	461f      	mov	r7, r3
 800a8b4:	d838      	bhi.n	800a928 <__ssputs_r+0x84>
 800a8b6:	898a      	ldrh	r2, [r1, #12]
 800a8b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8bc:	d032      	beq.n	800a924 <__ssputs_r+0x80>
 800a8be:	6825      	ldr	r5, [r4, #0]
 800a8c0:	6909      	ldr	r1, [r1, #16]
 800a8c2:	eba5 0901 	sub.w	r9, r5, r1
 800a8c6:	6965      	ldr	r5, [r4, #20]
 800a8c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	444b      	add	r3, r9
 800a8d4:	106d      	asrs	r5, r5, #1
 800a8d6:	429d      	cmp	r5, r3
 800a8d8:	bf38      	it	cc
 800a8da:	461d      	movcc	r5, r3
 800a8dc:	0553      	lsls	r3, r2, #21
 800a8de:	d531      	bpl.n	800a944 <__ssputs_r+0xa0>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	f000 fb61 	bl	800afa8 <_malloc_r>
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	b950      	cbnz	r0, 800a900 <__ssputs_r+0x5c>
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	f8ca 3000 	str.w	r3, [sl]
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a900:	6921      	ldr	r1, [r4, #16]
 800a902:	464a      	mov	r2, r9
 800a904:	f000 fabe 	bl	800ae84 <memcpy>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a90e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a912:	81a3      	strh	r3, [r4, #12]
 800a914:	6126      	str	r6, [r4, #16]
 800a916:	6165      	str	r5, [r4, #20]
 800a918:	444e      	add	r6, r9
 800a91a:	eba5 0509 	sub.w	r5, r5, r9
 800a91e:	6026      	str	r6, [r4, #0]
 800a920:	60a5      	str	r5, [r4, #8]
 800a922:	463e      	mov	r6, r7
 800a924:	42be      	cmp	r6, r7
 800a926:	d900      	bls.n	800a92a <__ssputs_r+0x86>
 800a928:	463e      	mov	r6, r7
 800a92a:	6820      	ldr	r0, [r4, #0]
 800a92c:	4632      	mov	r2, r6
 800a92e:	4641      	mov	r1, r8
 800a930:	f000 fab6 	bl	800aea0 <memmove>
 800a934:	68a3      	ldr	r3, [r4, #8]
 800a936:	1b9b      	subs	r3, r3, r6
 800a938:	60a3      	str	r3, [r4, #8]
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	4433      	add	r3, r6
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	2000      	movs	r0, #0
 800a942:	e7db      	b.n	800a8fc <__ssputs_r+0x58>
 800a944:	462a      	mov	r2, r5
 800a946:	f000 fba3 	bl	800b090 <_realloc_r>
 800a94a:	4606      	mov	r6, r0
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d1e1      	bne.n	800a914 <__ssputs_r+0x70>
 800a950:	6921      	ldr	r1, [r4, #16]
 800a952:	4650      	mov	r0, sl
 800a954:	f000 fabe 	bl	800aed4 <_free_r>
 800a958:	e7c7      	b.n	800a8ea <__ssputs_r+0x46>
	...

0800a95c <_svfiprintf_r>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	4698      	mov	r8, r3
 800a962:	898b      	ldrh	r3, [r1, #12]
 800a964:	061b      	lsls	r3, r3, #24
 800a966:	b09d      	sub	sp, #116	; 0x74
 800a968:	4607      	mov	r7, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	4614      	mov	r4, r2
 800a96e:	d50e      	bpl.n	800a98e <_svfiprintf_r+0x32>
 800a970:	690b      	ldr	r3, [r1, #16]
 800a972:	b963      	cbnz	r3, 800a98e <_svfiprintf_r+0x32>
 800a974:	2140      	movs	r1, #64	; 0x40
 800a976:	f000 fb17 	bl	800afa8 <_malloc_r>
 800a97a:	6028      	str	r0, [r5, #0]
 800a97c:	6128      	str	r0, [r5, #16]
 800a97e:	b920      	cbnz	r0, 800a98a <_svfiprintf_r+0x2e>
 800a980:	230c      	movs	r3, #12
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	e0d1      	b.n	800ab2e <_svfiprintf_r+0x1d2>
 800a98a:	2340      	movs	r3, #64	; 0x40
 800a98c:	616b      	str	r3, [r5, #20]
 800a98e:	2300      	movs	r3, #0
 800a990:	9309      	str	r3, [sp, #36]	; 0x24
 800a992:	2320      	movs	r3, #32
 800a994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a998:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99c:	2330      	movs	r3, #48	; 0x30
 800a99e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab48 <_svfiprintf_r+0x1ec>
 800a9a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a6:	f04f 0901 	mov.w	r9, #1
 800a9aa:	4623      	mov	r3, r4
 800a9ac:	469a      	mov	sl, r3
 800a9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b2:	b10a      	cbz	r2, 800a9b8 <_svfiprintf_r+0x5c>
 800a9b4:	2a25      	cmp	r2, #37	; 0x25
 800a9b6:	d1f9      	bne.n	800a9ac <_svfiprintf_r+0x50>
 800a9b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9bc:	d00b      	beq.n	800a9d6 <_svfiprintf_r+0x7a>
 800a9be:	465b      	mov	r3, fp
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	f7ff ff6d 	bl	800a8a4 <__ssputs_r>
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	f000 80aa 	beq.w	800ab24 <_svfiprintf_r+0x1c8>
 800a9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d2:	445a      	add	r2, fp
 800a9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80a2 	beq.w	800ab24 <_svfiprintf_r+0x1c8>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ea:	f10a 0a01 	add.w	sl, sl, #1
 800a9ee:	9304      	str	r3, [sp, #16]
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a9f8:	4654      	mov	r4, sl
 800a9fa:	2205      	movs	r2, #5
 800a9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa00:	4851      	ldr	r0, [pc, #324]	; (800ab48 <_svfiprintf_r+0x1ec>)
 800aa02:	f7f5 fbe5 	bl	80001d0 <memchr>
 800aa06:	9a04      	ldr	r2, [sp, #16]
 800aa08:	b9d8      	cbnz	r0, 800aa42 <_svfiprintf_r+0xe6>
 800aa0a:	06d0      	lsls	r0, r2, #27
 800aa0c:	bf44      	itt	mi
 800aa0e:	2320      	movmi	r3, #32
 800aa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa14:	0711      	lsls	r1, r2, #28
 800aa16:	bf44      	itt	mi
 800aa18:	232b      	movmi	r3, #43	; 0x2b
 800aa1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa1e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa22:	2b2a      	cmp	r3, #42	; 0x2a
 800aa24:	d015      	beq.n	800aa52 <_svfiprintf_r+0xf6>
 800aa26:	9a07      	ldr	r2, [sp, #28]
 800aa28:	4654      	mov	r4, sl
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	f04f 0c0a 	mov.w	ip, #10
 800aa30:	4621      	mov	r1, r4
 800aa32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa36:	3b30      	subs	r3, #48	; 0x30
 800aa38:	2b09      	cmp	r3, #9
 800aa3a:	d94e      	bls.n	800aada <_svfiprintf_r+0x17e>
 800aa3c:	b1b0      	cbz	r0, 800aa6c <_svfiprintf_r+0x110>
 800aa3e:	9207      	str	r2, [sp, #28]
 800aa40:	e014      	b.n	800aa6c <_svfiprintf_r+0x110>
 800aa42:	eba0 0308 	sub.w	r3, r0, r8
 800aa46:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	46a2      	mov	sl, r4
 800aa50:	e7d2      	b.n	800a9f8 <_svfiprintf_r+0x9c>
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	1d19      	adds	r1, r3, #4
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	9103      	str	r1, [sp, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bfbb      	ittet	lt
 800aa5e:	425b      	neglt	r3, r3
 800aa60:	f042 0202 	orrlt.w	r2, r2, #2
 800aa64:	9307      	strge	r3, [sp, #28]
 800aa66:	9307      	strlt	r3, [sp, #28]
 800aa68:	bfb8      	it	lt
 800aa6a:	9204      	strlt	r2, [sp, #16]
 800aa6c:	7823      	ldrb	r3, [r4, #0]
 800aa6e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa70:	d10c      	bne.n	800aa8c <_svfiprintf_r+0x130>
 800aa72:	7863      	ldrb	r3, [r4, #1]
 800aa74:	2b2a      	cmp	r3, #42	; 0x2a
 800aa76:	d135      	bne.n	800aae4 <_svfiprintf_r+0x188>
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	9203      	str	r2, [sp, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfb8      	it	lt
 800aa84:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa88:	3402      	adds	r4, #2
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ab4c <_svfiprintf_r+0x1f0>
 800aa90:	7821      	ldrb	r1, [r4, #0]
 800aa92:	2203      	movs	r2, #3
 800aa94:	4650      	mov	r0, sl
 800aa96:	f7f5 fb9b 	bl	80001d0 <memchr>
 800aa9a:	b140      	cbz	r0, 800aaae <_svfiprintf_r+0x152>
 800aa9c:	2340      	movs	r3, #64	; 0x40
 800aa9e:	eba0 000a 	sub.w	r0, r0, sl
 800aaa2:	fa03 f000 	lsl.w	r0, r3, r0
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	4303      	orrs	r3, r0
 800aaaa:	3401      	adds	r4, #1
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab2:	4827      	ldr	r0, [pc, #156]	; (800ab50 <_svfiprintf_r+0x1f4>)
 800aab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab8:	2206      	movs	r2, #6
 800aaba:	f7f5 fb89 	bl	80001d0 <memchr>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d038      	beq.n	800ab34 <_svfiprintf_r+0x1d8>
 800aac2:	4b24      	ldr	r3, [pc, #144]	; (800ab54 <_svfiprintf_r+0x1f8>)
 800aac4:	bb1b      	cbnz	r3, 800ab0e <_svfiprintf_r+0x1b2>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	3307      	adds	r3, #7
 800aaca:	f023 0307 	bic.w	r3, r3, #7
 800aace:	3308      	adds	r3, #8
 800aad0:	9303      	str	r3, [sp, #12]
 800aad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad4:	4433      	add	r3, r6
 800aad6:	9309      	str	r3, [sp, #36]	; 0x24
 800aad8:	e767      	b.n	800a9aa <_svfiprintf_r+0x4e>
 800aada:	fb0c 3202 	mla	r2, ip, r2, r3
 800aade:	460c      	mov	r4, r1
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7a5      	b.n	800aa30 <_svfiprintf_r+0xd4>
 800aae4:	2300      	movs	r3, #0
 800aae6:	3401      	adds	r4, #1
 800aae8:	9305      	str	r3, [sp, #20]
 800aaea:	4619      	mov	r1, r3
 800aaec:	f04f 0c0a 	mov.w	ip, #10
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf6:	3a30      	subs	r2, #48	; 0x30
 800aaf8:	2a09      	cmp	r2, #9
 800aafa:	d903      	bls.n	800ab04 <_svfiprintf_r+0x1a8>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0c5      	beq.n	800aa8c <_svfiprintf_r+0x130>
 800ab00:	9105      	str	r1, [sp, #20]
 800ab02:	e7c3      	b.n	800aa8c <_svfiprintf_r+0x130>
 800ab04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab08:	4604      	mov	r4, r0
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e7f0      	b.n	800aaf0 <_svfiprintf_r+0x194>
 800ab0e:	ab03      	add	r3, sp, #12
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	462a      	mov	r2, r5
 800ab14:	4b10      	ldr	r3, [pc, #64]	; (800ab58 <_svfiprintf_r+0x1fc>)
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f3af 8000 	nop.w
 800ab1e:	1c42      	adds	r2, r0, #1
 800ab20:	4606      	mov	r6, r0
 800ab22:	d1d6      	bne.n	800aad2 <_svfiprintf_r+0x176>
 800ab24:	89ab      	ldrh	r3, [r5, #12]
 800ab26:	065b      	lsls	r3, r3, #25
 800ab28:	f53f af2c 	bmi.w	800a984 <_svfiprintf_r+0x28>
 800ab2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab2e:	b01d      	add	sp, #116	; 0x74
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	ab03      	add	r3, sp, #12
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	462a      	mov	r2, r5
 800ab3a:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <_svfiprintf_r+0x1fc>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f000 f87a 	bl	800ac38 <_printf_i>
 800ab44:	e7eb      	b.n	800ab1e <_svfiprintf_r+0x1c2>
 800ab46:	bf00      	nop
 800ab48:	0800b1d8 	.word	0x0800b1d8
 800ab4c:	0800b1de 	.word	0x0800b1de
 800ab50:	0800b1e2 	.word	0x0800b1e2
 800ab54:	00000000 	.word	0x00000000
 800ab58:	0800a8a5 	.word	0x0800a8a5

0800ab5c <_printf_common>:
 800ab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab60:	4616      	mov	r6, r2
 800ab62:	4699      	mov	r9, r3
 800ab64:	688a      	ldr	r2, [r1, #8]
 800ab66:	690b      	ldr	r3, [r1, #16]
 800ab68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	bfb8      	it	lt
 800ab70:	4613      	movlt	r3, r2
 800ab72:	6033      	str	r3, [r6, #0]
 800ab74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab78:	4607      	mov	r7, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	b10a      	cbz	r2, 800ab82 <_printf_common+0x26>
 800ab7e:	3301      	adds	r3, #1
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	0699      	lsls	r1, r3, #26
 800ab86:	bf42      	ittt	mi
 800ab88:	6833      	ldrmi	r3, [r6, #0]
 800ab8a:	3302      	addmi	r3, #2
 800ab8c:	6033      	strmi	r3, [r6, #0]
 800ab8e:	6825      	ldr	r5, [r4, #0]
 800ab90:	f015 0506 	ands.w	r5, r5, #6
 800ab94:	d106      	bne.n	800aba4 <_printf_common+0x48>
 800ab96:	f104 0a19 	add.w	sl, r4, #25
 800ab9a:	68e3      	ldr	r3, [r4, #12]
 800ab9c:	6832      	ldr	r2, [r6, #0]
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	42ab      	cmp	r3, r5
 800aba2:	dc26      	bgt.n	800abf2 <_printf_common+0x96>
 800aba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aba8:	1e13      	subs	r3, r2, #0
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	bf18      	it	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	0692      	lsls	r2, r2, #26
 800abb2:	d42b      	bmi.n	800ac0c <_printf_common+0xb0>
 800abb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb8:	4649      	mov	r1, r9
 800abba:	4638      	mov	r0, r7
 800abbc:	47c0      	blx	r8
 800abbe:	3001      	adds	r0, #1
 800abc0:	d01e      	beq.n	800ac00 <_printf_common+0xa4>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	68e5      	ldr	r5, [r4, #12]
 800abc6:	6832      	ldr	r2, [r6, #0]
 800abc8:	f003 0306 	and.w	r3, r3, #6
 800abcc:	2b04      	cmp	r3, #4
 800abce:	bf08      	it	eq
 800abd0:	1aad      	subeq	r5, r5, r2
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	6922      	ldr	r2, [r4, #16]
 800abd6:	bf0c      	ite	eq
 800abd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abdc:	2500      	movne	r5, #0
 800abde:	4293      	cmp	r3, r2
 800abe0:	bfc4      	itt	gt
 800abe2:	1a9b      	subgt	r3, r3, r2
 800abe4:	18ed      	addgt	r5, r5, r3
 800abe6:	2600      	movs	r6, #0
 800abe8:	341a      	adds	r4, #26
 800abea:	42b5      	cmp	r5, r6
 800abec:	d11a      	bne.n	800ac24 <_printf_common+0xc8>
 800abee:	2000      	movs	r0, #0
 800abf0:	e008      	b.n	800ac04 <_printf_common+0xa8>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4652      	mov	r2, sl
 800abf6:	4649      	mov	r1, r9
 800abf8:	4638      	mov	r0, r7
 800abfa:	47c0      	blx	r8
 800abfc:	3001      	adds	r0, #1
 800abfe:	d103      	bne.n	800ac08 <_printf_common+0xac>
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295
 800ac04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac08:	3501      	adds	r5, #1
 800ac0a:	e7c6      	b.n	800ab9a <_printf_common+0x3e>
 800ac0c:	18e1      	adds	r1, r4, r3
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	2030      	movs	r0, #48	; 0x30
 800ac12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac16:	4422      	add	r2, r4
 800ac18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac20:	3302      	adds	r3, #2
 800ac22:	e7c7      	b.n	800abb4 <_printf_common+0x58>
 800ac24:	2301      	movs	r3, #1
 800ac26:	4622      	mov	r2, r4
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	47c0      	blx	r8
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d0e6      	beq.n	800ac00 <_printf_common+0xa4>
 800ac32:	3601      	adds	r6, #1
 800ac34:	e7d9      	b.n	800abea <_printf_common+0x8e>
	...

0800ac38 <_printf_i>:
 800ac38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3c:	7e0f      	ldrb	r7, [r1, #24]
 800ac3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac40:	2f78      	cmp	r7, #120	; 0x78
 800ac42:	4691      	mov	r9, r2
 800ac44:	4680      	mov	r8, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	469a      	mov	sl, r3
 800ac4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac4e:	d807      	bhi.n	800ac60 <_printf_i+0x28>
 800ac50:	2f62      	cmp	r7, #98	; 0x62
 800ac52:	d80a      	bhi.n	800ac6a <_printf_i+0x32>
 800ac54:	2f00      	cmp	r7, #0
 800ac56:	f000 80d8 	beq.w	800ae0a <_printf_i+0x1d2>
 800ac5a:	2f58      	cmp	r7, #88	; 0x58
 800ac5c:	f000 80a3 	beq.w	800ada6 <_printf_i+0x16e>
 800ac60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac68:	e03a      	b.n	800ace0 <_printf_i+0xa8>
 800ac6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac6e:	2b15      	cmp	r3, #21
 800ac70:	d8f6      	bhi.n	800ac60 <_printf_i+0x28>
 800ac72:	a101      	add	r1, pc, #4	; (adr r1, 800ac78 <_printf_i+0x40>)
 800ac74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800ace5 	.word	0x0800ace5
 800ac80:	0800ac61 	.word	0x0800ac61
 800ac84:	0800ac61 	.word	0x0800ac61
 800ac88:	0800ac61 	.word	0x0800ac61
 800ac8c:	0800ac61 	.word	0x0800ac61
 800ac90:	0800ace5 	.word	0x0800ace5
 800ac94:	0800ac61 	.word	0x0800ac61
 800ac98:	0800ac61 	.word	0x0800ac61
 800ac9c:	0800ac61 	.word	0x0800ac61
 800aca0:	0800ac61 	.word	0x0800ac61
 800aca4:	0800adf1 	.word	0x0800adf1
 800aca8:	0800ad15 	.word	0x0800ad15
 800acac:	0800add3 	.word	0x0800add3
 800acb0:	0800ac61 	.word	0x0800ac61
 800acb4:	0800ac61 	.word	0x0800ac61
 800acb8:	0800ae13 	.word	0x0800ae13
 800acbc:	0800ac61 	.word	0x0800ac61
 800acc0:	0800ad15 	.word	0x0800ad15
 800acc4:	0800ac61 	.word	0x0800ac61
 800acc8:	0800ac61 	.word	0x0800ac61
 800accc:	0800addb 	.word	0x0800addb
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	1d1a      	adds	r2, r3, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	602a      	str	r2, [r5, #0]
 800acd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ace0:	2301      	movs	r3, #1
 800ace2:	e0a3      	b.n	800ae2c <_printf_i+0x1f4>
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	6829      	ldr	r1, [r5, #0]
 800ace8:	0606      	lsls	r6, r0, #24
 800acea:	f101 0304 	add.w	r3, r1, #4
 800acee:	d50a      	bpl.n	800ad06 <_printf_i+0xce>
 800acf0:	680e      	ldr	r6, [r1, #0]
 800acf2:	602b      	str	r3, [r5, #0]
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	da03      	bge.n	800ad00 <_printf_i+0xc8>
 800acf8:	232d      	movs	r3, #45	; 0x2d
 800acfa:	4276      	negs	r6, r6
 800acfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad00:	485e      	ldr	r0, [pc, #376]	; (800ae7c <_printf_i+0x244>)
 800ad02:	230a      	movs	r3, #10
 800ad04:	e019      	b.n	800ad3a <_printf_i+0x102>
 800ad06:	680e      	ldr	r6, [r1, #0]
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad0e:	bf18      	it	ne
 800ad10:	b236      	sxthne	r6, r6
 800ad12:	e7ef      	b.n	800acf4 <_printf_i+0xbc>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	6820      	ldr	r0, [r4, #0]
 800ad18:	1d19      	adds	r1, r3, #4
 800ad1a:	6029      	str	r1, [r5, #0]
 800ad1c:	0601      	lsls	r1, r0, #24
 800ad1e:	d501      	bpl.n	800ad24 <_printf_i+0xec>
 800ad20:	681e      	ldr	r6, [r3, #0]
 800ad22:	e002      	b.n	800ad2a <_printf_i+0xf2>
 800ad24:	0646      	lsls	r6, r0, #25
 800ad26:	d5fb      	bpl.n	800ad20 <_printf_i+0xe8>
 800ad28:	881e      	ldrh	r6, [r3, #0]
 800ad2a:	4854      	ldr	r0, [pc, #336]	; (800ae7c <_printf_i+0x244>)
 800ad2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad2e:	bf0c      	ite	eq
 800ad30:	2308      	moveq	r3, #8
 800ad32:	230a      	movne	r3, #10
 800ad34:	2100      	movs	r1, #0
 800ad36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad3a:	6865      	ldr	r5, [r4, #4]
 800ad3c:	60a5      	str	r5, [r4, #8]
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	bfa2      	ittt	ge
 800ad42:	6821      	ldrge	r1, [r4, #0]
 800ad44:	f021 0104 	bicge.w	r1, r1, #4
 800ad48:	6021      	strge	r1, [r4, #0]
 800ad4a:	b90e      	cbnz	r6, 800ad50 <_printf_i+0x118>
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	d04d      	beq.n	800adec <_printf_i+0x1b4>
 800ad50:	4615      	mov	r5, r2
 800ad52:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad56:	fb03 6711 	mls	r7, r3, r1, r6
 800ad5a:	5dc7      	ldrb	r7, [r0, r7]
 800ad5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad60:	4637      	mov	r7, r6
 800ad62:	42bb      	cmp	r3, r7
 800ad64:	460e      	mov	r6, r1
 800ad66:	d9f4      	bls.n	800ad52 <_printf_i+0x11a>
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d10b      	bne.n	800ad84 <_printf_i+0x14c>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	07de      	lsls	r6, r3, #31
 800ad70:	d508      	bpl.n	800ad84 <_printf_i+0x14c>
 800ad72:	6923      	ldr	r3, [r4, #16]
 800ad74:	6861      	ldr	r1, [r4, #4]
 800ad76:	4299      	cmp	r1, r3
 800ad78:	bfde      	ittt	le
 800ad7a:	2330      	movle	r3, #48	; 0x30
 800ad7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad80:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad84:	1b52      	subs	r2, r2, r5
 800ad86:	6122      	str	r2, [r4, #16]
 800ad88:	f8cd a000 	str.w	sl, [sp]
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	aa03      	add	r2, sp, #12
 800ad90:	4621      	mov	r1, r4
 800ad92:	4640      	mov	r0, r8
 800ad94:	f7ff fee2 	bl	800ab5c <_printf_common>
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d14c      	bne.n	800ae36 <_printf_i+0x1fe>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	b004      	add	sp, #16
 800ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada6:	4835      	ldr	r0, [pc, #212]	; (800ae7c <_printf_i+0x244>)
 800ada8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adac:	6829      	ldr	r1, [r5, #0]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800adb4:	6029      	str	r1, [r5, #0]
 800adb6:	061d      	lsls	r5, r3, #24
 800adb8:	d514      	bpl.n	800ade4 <_printf_i+0x1ac>
 800adba:	07df      	lsls	r7, r3, #31
 800adbc:	bf44      	itt	mi
 800adbe:	f043 0320 	orrmi.w	r3, r3, #32
 800adc2:	6023      	strmi	r3, [r4, #0]
 800adc4:	b91e      	cbnz	r6, 800adce <_printf_i+0x196>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	f023 0320 	bic.w	r3, r3, #32
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	2310      	movs	r3, #16
 800add0:	e7b0      	b.n	800ad34 <_printf_i+0xfc>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	f043 0320 	orr.w	r3, r3, #32
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	2378      	movs	r3, #120	; 0x78
 800addc:	4828      	ldr	r0, [pc, #160]	; (800ae80 <_printf_i+0x248>)
 800adde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ade2:	e7e3      	b.n	800adac <_printf_i+0x174>
 800ade4:	0659      	lsls	r1, r3, #25
 800ade6:	bf48      	it	mi
 800ade8:	b2b6      	uxthmi	r6, r6
 800adea:	e7e6      	b.n	800adba <_printf_i+0x182>
 800adec:	4615      	mov	r5, r2
 800adee:	e7bb      	b.n	800ad68 <_printf_i+0x130>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	6826      	ldr	r6, [r4, #0]
 800adf4:	6961      	ldr	r1, [r4, #20]
 800adf6:	1d18      	adds	r0, r3, #4
 800adf8:	6028      	str	r0, [r5, #0]
 800adfa:	0635      	lsls	r5, r6, #24
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	d501      	bpl.n	800ae04 <_printf_i+0x1cc>
 800ae00:	6019      	str	r1, [r3, #0]
 800ae02:	e002      	b.n	800ae0a <_printf_i+0x1d2>
 800ae04:	0670      	lsls	r0, r6, #25
 800ae06:	d5fb      	bpl.n	800ae00 <_printf_i+0x1c8>
 800ae08:	8019      	strh	r1, [r3, #0]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6123      	str	r3, [r4, #16]
 800ae0e:	4615      	mov	r5, r2
 800ae10:	e7ba      	b.n	800ad88 <_printf_i+0x150>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	1d1a      	adds	r2, r3, #4
 800ae16:	602a      	str	r2, [r5, #0]
 800ae18:	681d      	ldr	r5, [r3, #0]
 800ae1a:	6862      	ldr	r2, [r4, #4]
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f7f5 f9d6 	bl	80001d0 <memchr>
 800ae24:	b108      	cbz	r0, 800ae2a <_printf_i+0x1f2>
 800ae26:	1b40      	subs	r0, r0, r5
 800ae28:	6060      	str	r0, [r4, #4]
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae34:	e7a8      	b.n	800ad88 <_printf_i+0x150>
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	462a      	mov	r2, r5
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	47d0      	blx	sl
 800ae40:	3001      	adds	r0, #1
 800ae42:	d0ab      	beq.n	800ad9c <_printf_i+0x164>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	079b      	lsls	r3, r3, #30
 800ae48:	d413      	bmi.n	800ae72 <_printf_i+0x23a>
 800ae4a:	68e0      	ldr	r0, [r4, #12]
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	4298      	cmp	r0, r3
 800ae50:	bfb8      	it	lt
 800ae52:	4618      	movlt	r0, r3
 800ae54:	e7a4      	b.n	800ada0 <_printf_i+0x168>
 800ae56:	2301      	movs	r3, #1
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	47d0      	blx	sl
 800ae60:	3001      	adds	r0, #1
 800ae62:	d09b      	beq.n	800ad9c <_printf_i+0x164>
 800ae64:	3501      	adds	r5, #1
 800ae66:	68e3      	ldr	r3, [r4, #12]
 800ae68:	9903      	ldr	r1, [sp, #12]
 800ae6a:	1a5b      	subs	r3, r3, r1
 800ae6c:	42ab      	cmp	r3, r5
 800ae6e:	dcf2      	bgt.n	800ae56 <_printf_i+0x21e>
 800ae70:	e7eb      	b.n	800ae4a <_printf_i+0x212>
 800ae72:	2500      	movs	r5, #0
 800ae74:	f104 0619 	add.w	r6, r4, #25
 800ae78:	e7f5      	b.n	800ae66 <_printf_i+0x22e>
 800ae7a:	bf00      	nop
 800ae7c:	0800b1e9 	.word	0x0800b1e9
 800ae80:	0800b1fa 	.word	0x0800b1fa

0800ae84 <memcpy>:
 800ae84:	440a      	add	r2, r1
 800ae86:	4291      	cmp	r1, r2
 800ae88:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae8c:	d100      	bne.n	800ae90 <memcpy+0xc>
 800ae8e:	4770      	bx	lr
 800ae90:	b510      	push	{r4, lr}
 800ae92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae9a:	4291      	cmp	r1, r2
 800ae9c:	d1f9      	bne.n	800ae92 <memcpy+0xe>
 800ae9e:	bd10      	pop	{r4, pc}

0800aea0 <memmove>:
 800aea0:	4288      	cmp	r0, r1
 800aea2:	b510      	push	{r4, lr}
 800aea4:	eb01 0402 	add.w	r4, r1, r2
 800aea8:	d902      	bls.n	800aeb0 <memmove+0x10>
 800aeaa:	4284      	cmp	r4, r0
 800aeac:	4623      	mov	r3, r4
 800aeae:	d807      	bhi.n	800aec0 <memmove+0x20>
 800aeb0:	1e43      	subs	r3, r0, #1
 800aeb2:	42a1      	cmp	r1, r4
 800aeb4:	d008      	beq.n	800aec8 <memmove+0x28>
 800aeb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aebe:	e7f8      	b.n	800aeb2 <memmove+0x12>
 800aec0:	4402      	add	r2, r0
 800aec2:	4601      	mov	r1, r0
 800aec4:	428a      	cmp	r2, r1
 800aec6:	d100      	bne.n	800aeca <memmove+0x2a>
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aed2:	e7f7      	b.n	800aec4 <memmove+0x24>

0800aed4 <_free_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4605      	mov	r5, r0
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d041      	beq.n	800af60 <_free_r+0x8c>
 800aedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee0:	1f0c      	subs	r4, r1, #4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	bfb8      	it	lt
 800aee6:	18e4      	addlt	r4, r4, r3
 800aee8:	f000 f912 	bl	800b110 <__malloc_lock>
 800aeec:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <_free_r+0x90>)
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	b933      	cbnz	r3, 800af00 <_free_r+0x2c>
 800aef2:	6063      	str	r3, [r4, #4]
 800aef4:	6014      	str	r4, [r2, #0]
 800aef6:	4628      	mov	r0, r5
 800aef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aefc:	f000 b90e 	b.w	800b11c <__malloc_unlock>
 800af00:	42a3      	cmp	r3, r4
 800af02:	d908      	bls.n	800af16 <_free_r+0x42>
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	1821      	adds	r1, r4, r0
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf01      	itttt	eq
 800af0c:	6819      	ldreq	r1, [r3, #0]
 800af0e:	685b      	ldreq	r3, [r3, #4]
 800af10:	1809      	addeq	r1, r1, r0
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	e7ed      	b.n	800aef2 <_free_r+0x1e>
 800af16:	461a      	mov	r2, r3
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	b10b      	cbz	r3, 800af20 <_free_r+0x4c>
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d9fa      	bls.n	800af16 <_free_r+0x42>
 800af20:	6811      	ldr	r1, [r2, #0]
 800af22:	1850      	adds	r0, r2, r1
 800af24:	42a0      	cmp	r0, r4
 800af26:	d10b      	bne.n	800af40 <_free_r+0x6c>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	4401      	add	r1, r0
 800af2c:	1850      	adds	r0, r2, r1
 800af2e:	4283      	cmp	r3, r0
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	d1e0      	bne.n	800aef6 <_free_r+0x22>
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	6053      	str	r3, [r2, #4]
 800af3a:	4401      	add	r1, r0
 800af3c:	6011      	str	r1, [r2, #0]
 800af3e:	e7da      	b.n	800aef6 <_free_r+0x22>
 800af40:	d902      	bls.n	800af48 <_free_r+0x74>
 800af42:	230c      	movs	r3, #12
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	e7d6      	b.n	800aef6 <_free_r+0x22>
 800af48:	6820      	ldr	r0, [r4, #0]
 800af4a:	1821      	adds	r1, r4, r0
 800af4c:	428b      	cmp	r3, r1
 800af4e:	bf04      	itt	eq
 800af50:	6819      	ldreq	r1, [r3, #0]
 800af52:	685b      	ldreq	r3, [r3, #4]
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	bf04      	itt	eq
 800af58:	1809      	addeq	r1, r1, r0
 800af5a:	6021      	streq	r1, [r4, #0]
 800af5c:	6054      	str	r4, [r2, #4]
 800af5e:	e7ca      	b.n	800aef6 <_free_r+0x22>
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	20002214 	.word	0x20002214

0800af68 <sbrk_aligned>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	4e0e      	ldr	r6, [pc, #56]	; (800afa4 <sbrk_aligned+0x3c>)
 800af6c:	460c      	mov	r4, r1
 800af6e:	6831      	ldr	r1, [r6, #0]
 800af70:	4605      	mov	r5, r0
 800af72:	b911      	cbnz	r1, 800af7a <sbrk_aligned+0x12>
 800af74:	f000 f8bc 	bl	800b0f0 <_sbrk_r>
 800af78:	6030      	str	r0, [r6, #0]
 800af7a:	4621      	mov	r1, r4
 800af7c:	4628      	mov	r0, r5
 800af7e:	f000 f8b7 	bl	800b0f0 <_sbrk_r>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d00a      	beq.n	800af9c <sbrk_aligned+0x34>
 800af86:	1cc4      	adds	r4, r0, #3
 800af88:	f024 0403 	bic.w	r4, r4, #3
 800af8c:	42a0      	cmp	r0, r4
 800af8e:	d007      	beq.n	800afa0 <sbrk_aligned+0x38>
 800af90:	1a21      	subs	r1, r4, r0
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f8ac 	bl	800b0f0 <_sbrk_r>
 800af98:	3001      	adds	r0, #1
 800af9a:	d101      	bne.n	800afa0 <sbrk_aligned+0x38>
 800af9c:	f04f 34ff 	mov.w	r4, #4294967295
 800afa0:	4620      	mov	r0, r4
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	20002218 	.word	0x20002218

0800afa8 <_malloc_r>:
 800afa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afac:	1ccd      	adds	r5, r1, #3
 800afae:	f025 0503 	bic.w	r5, r5, #3
 800afb2:	3508      	adds	r5, #8
 800afb4:	2d0c      	cmp	r5, #12
 800afb6:	bf38      	it	cc
 800afb8:	250c      	movcc	r5, #12
 800afba:	2d00      	cmp	r5, #0
 800afbc:	4607      	mov	r7, r0
 800afbe:	db01      	blt.n	800afc4 <_malloc_r+0x1c>
 800afc0:	42a9      	cmp	r1, r5
 800afc2:	d905      	bls.n	800afd0 <_malloc_r+0x28>
 800afc4:	230c      	movs	r3, #12
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	2600      	movs	r6, #0
 800afca:	4630      	mov	r0, r6
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	4e2e      	ldr	r6, [pc, #184]	; (800b08c <_malloc_r+0xe4>)
 800afd2:	f000 f89d 	bl	800b110 <__malloc_lock>
 800afd6:	6833      	ldr	r3, [r6, #0]
 800afd8:	461c      	mov	r4, r3
 800afda:	bb34      	cbnz	r4, 800b02a <_malloc_r+0x82>
 800afdc:	4629      	mov	r1, r5
 800afde:	4638      	mov	r0, r7
 800afe0:	f7ff ffc2 	bl	800af68 <sbrk_aligned>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	4604      	mov	r4, r0
 800afe8:	d14d      	bne.n	800b086 <_malloc_r+0xde>
 800afea:	6834      	ldr	r4, [r6, #0]
 800afec:	4626      	mov	r6, r4
 800afee:	2e00      	cmp	r6, #0
 800aff0:	d140      	bne.n	800b074 <_malloc_r+0xcc>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	4631      	mov	r1, r6
 800aff6:	4638      	mov	r0, r7
 800aff8:	eb04 0803 	add.w	r8, r4, r3
 800affc:	f000 f878 	bl	800b0f0 <_sbrk_r>
 800b000:	4580      	cmp	r8, r0
 800b002:	d13a      	bne.n	800b07a <_malloc_r+0xd2>
 800b004:	6821      	ldr	r1, [r4, #0]
 800b006:	3503      	adds	r5, #3
 800b008:	1a6d      	subs	r5, r5, r1
 800b00a:	f025 0503 	bic.w	r5, r5, #3
 800b00e:	3508      	adds	r5, #8
 800b010:	2d0c      	cmp	r5, #12
 800b012:	bf38      	it	cc
 800b014:	250c      	movcc	r5, #12
 800b016:	4629      	mov	r1, r5
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff ffa5 	bl	800af68 <sbrk_aligned>
 800b01e:	3001      	adds	r0, #1
 800b020:	d02b      	beq.n	800b07a <_malloc_r+0xd2>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	442b      	add	r3, r5
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	e00e      	b.n	800b048 <_malloc_r+0xa0>
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	1b52      	subs	r2, r2, r5
 800b02e:	d41e      	bmi.n	800b06e <_malloc_r+0xc6>
 800b030:	2a0b      	cmp	r2, #11
 800b032:	d916      	bls.n	800b062 <_malloc_r+0xba>
 800b034:	1961      	adds	r1, r4, r5
 800b036:	42a3      	cmp	r3, r4
 800b038:	6025      	str	r5, [r4, #0]
 800b03a:	bf18      	it	ne
 800b03c:	6059      	strne	r1, [r3, #4]
 800b03e:	6863      	ldr	r3, [r4, #4]
 800b040:	bf08      	it	eq
 800b042:	6031      	streq	r1, [r6, #0]
 800b044:	5162      	str	r2, [r4, r5]
 800b046:	604b      	str	r3, [r1, #4]
 800b048:	4638      	mov	r0, r7
 800b04a:	f104 060b 	add.w	r6, r4, #11
 800b04e:	f000 f865 	bl	800b11c <__malloc_unlock>
 800b052:	f026 0607 	bic.w	r6, r6, #7
 800b056:	1d23      	adds	r3, r4, #4
 800b058:	1af2      	subs	r2, r6, r3
 800b05a:	d0b6      	beq.n	800afca <_malloc_r+0x22>
 800b05c:	1b9b      	subs	r3, r3, r6
 800b05e:	50a3      	str	r3, [r4, r2]
 800b060:	e7b3      	b.n	800afca <_malloc_r+0x22>
 800b062:	6862      	ldr	r2, [r4, #4]
 800b064:	42a3      	cmp	r3, r4
 800b066:	bf0c      	ite	eq
 800b068:	6032      	streq	r2, [r6, #0]
 800b06a:	605a      	strne	r2, [r3, #4]
 800b06c:	e7ec      	b.n	800b048 <_malloc_r+0xa0>
 800b06e:	4623      	mov	r3, r4
 800b070:	6864      	ldr	r4, [r4, #4]
 800b072:	e7b2      	b.n	800afda <_malloc_r+0x32>
 800b074:	4634      	mov	r4, r6
 800b076:	6876      	ldr	r6, [r6, #4]
 800b078:	e7b9      	b.n	800afee <_malloc_r+0x46>
 800b07a:	230c      	movs	r3, #12
 800b07c:	603b      	str	r3, [r7, #0]
 800b07e:	4638      	mov	r0, r7
 800b080:	f000 f84c 	bl	800b11c <__malloc_unlock>
 800b084:	e7a1      	b.n	800afca <_malloc_r+0x22>
 800b086:	6025      	str	r5, [r4, #0]
 800b088:	e7de      	b.n	800b048 <_malloc_r+0xa0>
 800b08a:	bf00      	nop
 800b08c:	20002214 	.word	0x20002214

0800b090 <_realloc_r>:
 800b090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b094:	4680      	mov	r8, r0
 800b096:	4614      	mov	r4, r2
 800b098:	460e      	mov	r6, r1
 800b09a:	b921      	cbnz	r1, 800b0a6 <_realloc_r+0x16>
 800b09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	f7ff bf81 	b.w	800afa8 <_malloc_r>
 800b0a6:	b92a      	cbnz	r2, 800b0b4 <_realloc_r+0x24>
 800b0a8:	f7ff ff14 	bl	800aed4 <_free_r>
 800b0ac:	4625      	mov	r5, r4
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	f000 f838 	bl	800b128 <_malloc_usable_size_r>
 800b0b8:	4284      	cmp	r4, r0
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	d802      	bhi.n	800b0c4 <_realloc_r+0x34>
 800b0be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0c2:	d812      	bhi.n	800b0ea <_realloc_r+0x5a>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	f7ff ff6e 	bl	800afa8 <_malloc_r>
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d0ed      	beq.n	800b0ae <_realloc_r+0x1e>
 800b0d2:	42bc      	cmp	r4, r7
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	bf28      	it	cs
 800b0da:	463a      	movcs	r2, r7
 800b0dc:	f7ff fed2 	bl	800ae84 <memcpy>
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f7ff fef6 	bl	800aed4 <_free_r>
 800b0e8:	e7e1      	b.n	800b0ae <_realloc_r+0x1e>
 800b0ea:	4635      	mov	r5, r6
 800b0ec:	e7df      	b.n	800b0ae <_realloc_r+0x1e>
	...

0800b0f0 <_sbrk_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	; (800b10c <_sbrk_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f5 fbf6 	bl	80008ec <_sbrk>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_sbrk_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_sbrk_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	2000221c 	.word	0x2000221c

0800b110 <__malloc_lock>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__malloc_lock+0x8>)
 800b112:	f000 b811 	b.w	800b138 <__retarget_lock_acquire_recursive>
 800b116:	bf00      	nop
 800b118:	20002220 	.word	0x20002220

0800b11c <__malloc_unlock>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__malloc_unlock+0x8>)
 800b11e:	f000 b80c 	b.w	800b13a <__retarget_lock_release_recursive>
 800b122:	bf00      	nop
 800b124:	20002220 	.word	0x20002220

0800b128 <_malloc_usable_size_r>:
 800b128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b12c:	1f18      	subs	r0, r3, #4
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bfbc      	itt	lt
 800b132:	580b      	ldrlt	r3, [r1, r0]
 800b134:	18c0      	addlt	r0, r0, r3
 800b136:	4770      	bx	lr

0800b138 <__retarget_lock_acquire_recursive>:
 800b138:	4770      	bx	lr

0800b13a <__retarget_lock_release_recursive>:
 800b13a:	4770      	bx	lr

0800b13c <_init>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	bf00      	nop
 800b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b142:	bc08      	pop	{r3}
 800b144:	469e      	mov	lr, r3
 800b146:	4770      	bx	lr

0800b148 <_fini>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	bf00      	nop
 800b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14e:	bc08      	pop	{r3}
 800b150:	469e      	mov	lr, r3
 800b152:	4770      	bx	lr

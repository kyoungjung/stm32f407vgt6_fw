
09_uart2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b454  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800b5e4  0800b5e4  0001b5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e8  0800b6e8  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e8  0800b6e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6f0  0800b6f0  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6f4  0800b6f4  0001b6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800b6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201cc  2**0
                  CONTENTS
 10 .bss          0000234c  200001cc  200001cc  000201cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002518  20002518  000201cc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019930  00000000  00000000  000201f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004167  00000000  00000000  00039b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0003f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e43  00000000  00000000  00040688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000226e8  00000000  00000000  000674cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cffa7  00000000  00000000  00089bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159b5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d80  00000000  00000000  00159bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5cc 	.word	0x0800b5cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800b5cc 	.word	0x0800b5cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14d      	bne.n	800034c <__udivmoddi4+0xac>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d968      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b152      	cbz	r2, 80002d2 <__udivmoddi4+0x32>
 80002bc:	fa01 f302 	lsl.w	r3, r1, r2
 80002c0:	f1c2 0120 	rsb	r1, r2, #32
 80002c4:	fa20 f101 	lsr.w	r1, r0, r1
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	ea41 0803 	orr.w	r8, r1, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fbb8 fef5 	udiv	lr, r8, r5
 80002dc:	fa1f f78c 	uxth.w	r7, ip
 80002e0:	fb05 831e 	mls	r3, r5, lr, r8
 80002e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e8:	fb0e f107 	mul.w	r1, lr, r7
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d90b      	bls.n	8000308 <__udivmoddi4+0x68>
 80002f0:	eb1c 0303 	adds.w	r3, ip, r3
 80002f4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002f8:	f080 811e 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fc:	4299      	cmp	r1, r3
 80002fe:	f240 811b 	bls.w	8000538 <__udivmoddi4+0x298>
 8000302:	f1ae 0e02 	sub.w	lr, lr, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000310:	fb05 3310 	mls	r3, r5, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x96>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 8108 	bcs.w	800053c <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8105 	bls.w	800053c <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800033c:	2100      	movs	r1, #0
 800033e:	b11e      	cbz	r6, 8000348 <__udivmoddi4+0xa8>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c6 4300 	strd	r4, r3, [r6]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0xc2>
 8000350:	2e00      	cmp	r6, #0
 8000352:	f000 80ee 	beq.w	8000532 <__udivmoddi4+0x292>
 8000356:	2100      	movs	r1, #0
 8000358:	e9c6 0500 	strd	r0, r5, [r6]
 800035c:	4608      	mov	r0, r1
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0303 	sbc.w	r3, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e2      	beq.n	8000348 <__udivmoddi4+0xa8>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7df      	b.n	8000348 <__udivmoddi4+0xa8>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8091 	bne.w	80004b8 <__udivmoddi4+0x218>
 8000396:	eba1 050c 	sub.w	r5, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2101      	movs	r1, #1
 80003a4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003a8:	fb07 5013 	mls	r0, r7, r3, r5
 80003ac:	0c25      	lsrs	r5, r4, #16
 80003ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0505 	adds.w	r5, ip, r5
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	42a8      	cmp	r0, r5
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a2d      	subs	r5, r5, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003d4:	fb07 5510 	mls	r5, r7, r0, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4628      	mov	r0, r5
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79e      	b.n	800033e <__udivmoddi4+0x9e>
 8000400:	f1c1 0720 	rsb	r7, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa05 f301 	lsl.w	r3, r5, r1
 8000416:	431c      	orrs	r4, r3
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f301 	lsl.w	r3, r0, r1
 8000422:	fbb5 f8f9 	udiv	r8, r5, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 5518 	mls	r5, r9, r8, r5
 8000430:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	42a8      	cmp	r0, r5
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0505 	adds.w	r5, ip, r5
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	42a8      	cmp	r0, r5
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4465      	add	r5, ip
 8000458:	1a2d      	subs	r5, r5, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000460:	fb09 5510 	mls	r5, r9, r0, r5
 8000464:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	45ae      	cmp	lr, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	45ae      	cmp	lr, r5
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba5 050e 	sub.w	r5, r5, lr
 800048e:	42a5      	cmp	r5, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15e      	cbz	r6, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb65 050e 	sbc.w	r5, r5, lr
 80004a2:	fa05 f707 	lsl.w	r7, r5, r7
 80004a6:	fa22 f301 	lsr.w	r3, r2, r1
 80004aa:	40cd      	lsrs	r5, r1
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c6 7500 	strd	r7, r5, [r6]
 80004b2:	2100      	movs	r1, #0
 80004b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa25 f303 	lsr.w	r3, r5, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	430d      	orrs	r5, r1
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004d8:	fb07 3011 	mls	r0, r7, r1, r3
 80004dc:	0c2b      	lsrs	r3, r5, #16
 80004de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004e2:	fb01 f00e 	mul.w	r0, r1, lr
 80004e6:	4298      	cmp	r0, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	4298      	cmp	r0, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3902      	subs	r1, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a1b      	subs	r3, r3, r0
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3310 	mls	r3, r7, r0, r3
 800050c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000510:	fb00 f30e 	mul.w	r3, r0, lr
 8000514:	42ab      	cmp	r3, r5
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0505 	adds.w	r5, ip, r5
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3802      	subs	r0, #2
 8000528:	4465      	add	r5, ip
 800052a:	1aed      	subs	r5, r5, r3
 800052c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	4631      	mov	r1, r6
 8000534:	4630      	mov	r0, r6
 8000536:	e707      	b.n	8000348 <__udivmoddi4+0xa8>
 8000538:	4686      	mov	lr, r0
 800053a:	e6e5      	b.n	8000308 <__udivmoddi4+0x68>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fa      	b.n	8000336 <__udivmoddi4+0x96>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4640      	mov	r0, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4641      	mov	r1, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4465      	add	r5, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4608      	mov	r0, r1
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ledISR>:


#include "ap.h"

void ledISR(void *arg)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  ledToggle(_DEF_LED3);     //led3 토글한다
 800057c:	2002      	movs	r0, #2
 800057e:	f000 fbb1 	bl	8000ce4 <ledToggle>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <apInit>:

void apInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af02      	add	r7, sp, #8
  swtimer_handle_t          h_led_timer;    //동작할 타이머 인덱스 변수

  //하드웨어 타이머 인터럽트 발생 주기가 1000us(1ms) 되도록 아래와 같이 설정한다.
  timerSetPeriod(_DEF_TIMER1, 1000);
 8000592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fd4a 	bl	8001030 <timerSetPeriod>
  //timerAttachInterrupt(_DEF_TIMER1, func);
  timerStart(_DEF_TIMER1);                      //start timer...
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fd7d 	bl	800109c <timerStart>

  h_led_timer = swtimerGetHandle();             //타이머 인덱스값을 받아서 변수에 저장
 80005a2:	f000 fcf1 	bl	8000f88 <swtimerGetHandle>
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  swtimerSet(h_led_timer, 500, LOOP_TIME, ledISR, NULL);  //500ms 주기로 ledISR함수가 동작하도록 swtimer 설정
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <apInit+0x68>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ba:	f000 fc79 	bl	8000eb0 <swtimerSet>
  swtimerStart(h_led_timer);    //swtimer 시작
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fcb6 	bl	8000f34 <swtimerStart>

  uartOpen(_DEF_UART1, 115200);
 80005c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fe75 	bl	80012bc <uartOpen>
  uartOpen(_DEF_UART2, 115200);
 80005d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fe70 	bl	80012bc <uartOpen>

  uartPrintf(_DEF_UART1, "UART 1(USART) OPEN \r\n");
 80005dc:	4906      	ldr	r1, [pc, #24]	; (80005f8 <apInit+0x6c>)
 80005de:	2000      	movs	r0, #0
 80005e0:	f001 f802 	bl	80015e8 <uartPrintf>
  uartPrintf(_DEF_UART2, "UART 2(USB)   OPEN \r\n");
 80005e4:	4905      	ldr	r1, [pc, #20]	; (80005fc <apInit+0x70>)
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fffe 	bl	80015e8 <uartPrintf>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08000575 	.word	0x08000575
 80005f8:	0800b5e4 	.word	0x0800b5e4
 80005fc:	0800b5fc 	.word	0x0800b5fc

08000600 <apMain>:

void apMain(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint32_t pre_baud;  //baudrate값 저장변수

  pre_time = millis();
 8000606:	f000 f8c0 	bl	800078a <millis>
 800060a:	60f8      	str	r0, [r7, #12]

  //usb cdc의 baudrate값을 저장한다.
  pre_baud = uartGetBaud(_DEF_UART2);
 800060c:	2001      	movs	r0, #1
 800060e:	f001 f83d 	bl	800168c <uartGetBaud>
 8000612:	60b8      	str	r0, [r7, #8]
  uint8_t rx_data;

  while(1)
  {
    //최초의 usb baudrate와 현재 usb baudrate가 다르다면
    if(pre_baud != uartGetBaud(_DEF_UART2))
 8000614:	2001      	movs	r0, #1
 8000616:	f001 f839 	bl	800168c <uartGetBaud>
 800061a:	4602      	mov	r2, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4293      	cmp	r3, r2
 8000620:	d00c      	beq.n	800063c <apMain+0x3c>
    {
      //현재 설정한 baudrate값을 다시 저장하고,
      pre_baud = uartGetBaud(_DEF_UART2);
 8000622:	2001      	movs	r0, #1
 8000624:	f001 f832 	bl	800168c <uartGetBaud>
 8000628:	60b8      	str	r0, [r7, #8]
      //변경된 baudrate값을 출력한다.
      uartPrintf(_DEF_UART2, "USB BaudRate Changed To %d \r\n", uartGetBaud(_DEF_UART2));
 800062a:	2001      	movs	r0, #1
 800062c:	f001 f82e 	bl	800168c <uartGetBaud>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4911      	ldr	r1, [pc, #68]	; (800067c <apMain+0x7c>)
 8000636:	2001      	movs	r0, #1
 8000638:	f000 ffd6 	bl	80015e8 <uartPrintf>
    }

    if(millis() - pre_time >= 500)
 800063c:	f000 f8a5 	bl	800078a <millis>
 8000640:	4602      	mov	r2, r0
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800064a:	d305      	bcc.n	8000658 <apMain+0x58>
    {
      pre_time = millis();
 800064c:	f000 f89d 	bl	800078a <millis>
 8000650:	60f8      	str	r0, [r7, #12]
      ledToggle(_DEF_LED1);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fb46 	bl	8000ce4 <ledToggle>
    }

    //usb cdc로 입력되는 데이터가 있다면
    if(uartAvailable(_DEF_UART2) > 0)
 8000658:	2001      	movs	r0, #1
 800065a:	f000 ff05 	bl	8001468 <uartAvailable>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d7      	beq.n	8000614 <apMain+0x14>
    {
      //usb로 수신된 데이터를 변수에 저장
      rx_data = uartRead(_DEF_UART2);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 ff91 	bl	800158c <uartRead>
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]

      uartPrintf(_DEF_UART2, "rx_data : 0x%X [%c] \r\n", rx_data, rx_data);
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4903      	ldr	r1, [pc, #12]	; (8000680 <apMain+0x80>)
 8000674:	2001      	movs	r0, #1
 8000676:	f000 ffb7 	bl	80015e8 <uartPrintf>
    if(pre_baud != uartGetBaud(_DEF_UART2))
 800067a:	e7cb      	b.n	8000614 <apMain+0x14>
 800067c:	0800b614 	.word	0x0800b614
 8000680:	0800b634 	.word	0x0800b634

08000684 <bspInit>:
static void SystemClock_Config(void);
static void Error_Handler(void);


void bspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  HAL_Init();
 800068a:	f001 f8f5 	bl	8001878 <HAL_Init>

  SystemClock_Config();
 800068e:	f000 f883 	bl	8000798 <SystemClock_Config>

  GPIO_InitTypeDef    GPIO_InitStruct = {0,};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <bspInit+0xe8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <bspInit+0xe8>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <bspInit+0xe8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <bspInit+0xe8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a29      	ldr	r2, [pc, #164]	; (800076c <bspInit+0xe8>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <bspInit+0xe8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <bspInit+0xe8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <bspInit+0xe8>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <bspInit+0xe8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <bspInit+0xe8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <bspInit+0xe8>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <bspInit+0xe8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  //mcu reset 이후 usb가 정상적으로 실행되지 않을 경우가 있어서
  //usb dp 핀을 low -> 100ms -> high 로 제어해준다.
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000718:	2311      	movs	r3, #17
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <bspInit+0xec>)
 800072c:	f001 fed2 	bl	80024d4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <bspInit+0xec>)
 8000738:	f002 f960 	bl	80029fc <HAL_GPIO_WritePin>
  delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f000 f819 	bl	8000774 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <bspInit+0xec>)
 800074a:	f002 f957 	bl	80029fc <HAL_GPIO_WritePin>

  //usb dp를 입력핀으로 설정해준다.
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <bspInit+0xec>)
 800075a:	f001 febb 	bl	80024d4 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 800075e:	f009 fc4d 	bl	8009ffc <MX_USB_DEVICE_Init>
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000

08000774 <delay>:

void delay(uint32_t ms)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f001 f8e9 	bl	8001954 <HAL_Delay>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <millis>:

uint32_t millis(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800078e:	f001 f8d7 	bl	8001940 <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
}
 8000794:	4618      	mov	r0, r3
 8000796:	bd80      	pop	{r7, pc}

08000798 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f00a fa82 	bl	800acb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemClock_Config+0xd0>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000808:	2319      	movs	r3, #25
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800080c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000816:	2307      	movs	r3, #7
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fb98 	bl	8003f54 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082a:	f000 f81f 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2105      	movs	r1, #5
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fdf9 	bl	8004444 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000858:	f000 f808 	bl	800086c <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	; 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x4>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x48>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x48>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x48>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x48>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_MspInit+0x48>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_MspInit+0x48>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40023800 	.word	0x40023800

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f001 f809 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <USART1_IRQHandler+0x10>)
 8000916:	f004 fe4f 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000038c 	.word	0x2000038c

08000924 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <DMA2_Stream2_IRQHandler+0x10>)
 800092a:	f001 fb6d 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200003d0 	.word	0x200003d0

08000938 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <OTG_FS_IRQHandler+0x10>)
 800093e:	f002 f9de 	bl	8002cfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20001ddc 	.word	0x20001ddc

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f00a f96e 	bl	800ac5c <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20020000 	.word	0x20020000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	200001e8 	.word	0x200001e8
 80009b4:	20002518 	.word	0x20002518

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffe3 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f00a f939 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f00a f921 	bl	800ac3c <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000a08:	0800b6f8 	.word	0x0800b6f8
  ldr r2, =_sbss
 8000a0c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000a10:	20002518 	.word	0x20002518

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>

08000a16 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b087      	sub	sp, #28
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]

  //q buffer 입/출력 인덱스 초기화
  p_node->ptr_in    = 0;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
  p_node->ptr_out   = 0;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  p_node->p_buf     = p_buf;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  p_node->length    = length;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	609a      	str	r2, [r3, #8]

  if(p_node->p_buf == NULL)   //생성할 버퍼가 null이면 비정상 리턴
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d104      	bne.n	8000a50 <qbufferCreate+0x3a>
  {
    p_node->length = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    ret = false;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	371c      	adds	r7, #28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t i;
  uint32_t index;
  uint32_t next_index;

  if(p_node->p_buf == NULL)     return false;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <qbufferWrite+0x1c>
 8000a74:	2300      	movs	r3, #0
 8000a76:	e02d      	b.n	8000ad4 <qbufferWrite+0x78>

  for(i=0;i<length;i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	e025      	b.n	8000aca <qbufferWrite+0x6e>
  {
    index       = p_node->ptr_in;       //q 버퍼 입력 인덱스를 index에 저장
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	613b      	str	r3, [r7, #16]
    next_index  = p_node->ptr_in + 1;   //q 버퍼 입력 인덱스 1 증가한 값을 next_index에 저장
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
    //큐버퍼 읽지 않고 쓰기만 하다보면....
    //아래 조건을 만족하게 되고
    //next_index가 0으로 초기화 된다.
    //next_index가 0이 되면
    //prt out 인덱스와 같아지므로 buffer full error를 반환한다.
    if(next_index == p_node->length)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d101      	bne.n	8000a9a <qbufferWrite+0x3e>
    {
      next_index = 0;   //next index 초기화
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
    }

    //next_index가 out 인덱스와 같지 않다는것은
    //write할수 있는 버퍼 공간이 있다는 의미
    if(next_index != p_node->ptr_out)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d00c      	beq.n	8000abe <qbufferWrite+0x62>
    {
      //외부에서 입력된 length 길이의 p_buf i번째 데이터를 정의된 큐버퍼 index번째에 저장
      p_node->p_buf[index] = p_buf[i];
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	68d9      	ldr	r1, [r3, #12]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	440b      	add	r3, r1
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	701a      	strb	r2, [r3, #0]
      //in index 1증가
      p_node->ptr_in   = next_index;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	e002      	b.n	8000ac4 <qbufferWrite+0x68>
    }
    else
    {
      ret = false;    // buffer full error
 8000abe:	2300      	movs	r3, #0
 8000ac0:	77fb      	strb	r3, [r7, #31]
      break;          // stop loop
 8000ac2:	e006      	b.n	8000ad2 <qbufferWrite+0x76>
  for(i=0;i<length;i++)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3d5      	bcc.n	8000a7e <qbufferWrite+0x22>
    }
  }

  return ret;
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b087      	sub	sp, #28
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000aea:	2301      	movs	r3, #1
 8000aec:	75fb      	strb	r3, [r7, #23]
      break;          //stop loop
    }
  }
  */

  for(int i=0;i<length;i++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	e026      	b.n	8000b42 <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d009      	beq.n	8000b10 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->ptr_out];
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->ptr_out != p_node->ptr_in) // 꺼낼 데이터 존재한다면??
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d00c      	beq.n	8000b36 <qbufferRead+0x58>
    {
      p_node->ptr_out = (p_node->ptr_out + 1) % p_node->length; //out 인덱스 1 증가
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	6892      	ldr	r2, [r2, #8]
 8000b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b2a:	fb01 f202 	mul.w	r2, r1, r2
 8000b2e:	1a9a      	subs	r2, r3, r2
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	e002      	b.n	8000b3c <qbufferRead+0x5e>
    }
    else  //꺼낼 데이터가 없다면??
    {
      ret = false;
 8000b36:	2300      	movs	r3, #0
 8000b38:	75fb      	strb	r3, [r7, #23]
      break;
 8000b3a:	e006      	b.n	8000b4a <qbufferRead+0x6c>
  for(int i=0;i<length;i++)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d8d4      	bhi.n	8000af4 <qbufferRead+0x16>
    }
  }

  return ret;
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  uint32_t length = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]

  //최초 초기상태라면 length 0을 반환
  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	441a      	add	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6892      	ldr	r2, [r2, #8]
 8000b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]

  return length;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
	...

08000b90 <buttonInit>:
        {GPIOC, GPIO_PIN_0, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOC, GPIO_PIN_1, GPIO_PIN_RESET, GPIO_PIN_SET}
    };

void buttonInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	71fb      	strb	r3, [r7, #7]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <buttonInit+0x64>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <buttonInit+0x64>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <buttonInit+0x64>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <buttonInit+0x68>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]

  for(i=0; i<HW_BUTTON_MAX_CH; i++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	e010      	b.n	8000be4 <buttonInit+0x54>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <buttonInit+0x6c>)
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4413      	add	r3, r2
 8000bca:	889b      	ldrh	r3, [r3, #4]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <buttonInit+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(button_tbl[HW_BUTTON_MAX_CH].port, &GPIO_InitStruct);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <buttonInit+0x6c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <buttonInit+0x68>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fc7b 	bl	80024d4 <HAL_GPIO_Init>
  for(i=0; i<HW_BUTTON_MAX_CH; i++)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	3301      	adds	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d9eb      	bls.n	8000bc2 <buttonInit+0x32>
  }
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	200001ec 	.word	0x200001ec
 8000bfc:	20000004 	.word	0x20000004

08000c00 <ledInit>:
        {GPIOE, GPIO_PIN_5, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOB, GPIO_PIN_9, GPIO_PIN_SET  , GPIO_PIN_RESET}
    };

void ledInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <ledInit+0x98>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <ledInit+0x98>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <ledInit+0x98>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <ledInit+0x98>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <ledInit+0x98>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <ledInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <ledInit+0x9c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <ledInit+0x9c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <ledInit+0x9c>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	60da      	str	r2, [r3, #12]

  for(i=0;i<MAX_HW_LED_CH;i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e016      	b.n	8000c88 <ledInit+0x88>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <ledInit+0xa0>)
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4413      	add	r3, r2
 8000c62:	889b      	ldrh	r3, [r3, #4]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <ledInit+0x9c>)
 8000c68:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <ledInit+0xa0>)
 8000c6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c72:	490a      	ldr	r1, [pc, #40]	; (8000c9c <ledInit+0x9c>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fc2d 	bl	80024d4 <HAL_GPIO_Init>

    ledOff(i);
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f811 	bl	8000ca4 <ledOff>
  for(i=0;i<MAX_HW_LED_CH;i++)
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	3301      	adds	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d9e5      	bls.n	8000c5a <ledInit+0x5a>
  }


}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	20000200 	.word	0x20000200
 8000ca0:	2000001c 	.word	0x2000001c

08000ca4 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if(ch > MAX_HW_LED_CH)    return;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b05      	cmp	r3, #5
 8000cb2:	d811      	bhi.n	8000cd8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <ledOff+0x3c>)
 8000cb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <ledOff+0x3c>)
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	8899      	ldrh	r1, [r3, #4]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <ledOff+0x3c>)
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4413      	add	r3, r2
 8000cce:	79db      	ldrb	r3, [r3, #7]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f001 fe93 	bl	80029fc <HAL_GPIO_WritePin>
 8000cd6:	e000      	b.n	8000cda <ledOff+0x36>
  if(ch > MAX_HW_LED_CH)    return;
 8000cd8:	bf00      	nop
}
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000001c 	.word	0x2000001c

08000ce4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if(ch > MAX_HW_LED_CH)    return;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d80d      	bhi.n	8000d10 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <ledToggle+0x34>)
 8000cf8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4906      	ldr	r1, [pc, #24]	; (8000d18 <ledToggle+0x34>)
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	440b      	add	r3, r1
 8000d04:	889b      	ldrh	r3, [r3, #4]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4610      	mov	r0, r2
 8000d0a:	f001 fe8f 	bl	8002a2c <HAL_GPIO_TogglePin>
 8000d0e:	e000      	b.n	8000d12 <ledToggle+0x2e>
  if(ch > MAX_HW_LED_CH)    return;
 8000d10:	bf00      	nop
}
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000001c 	.word	0x2000001c

08000d1c <swtimerInit>:
static volatile uint32_t sw_timer_counter         = 0;
static volatile uint16_t sw_timer_handle_index    = 0;
static swtimer_t    swtimer_tbl[SW_TIMER_MAX];            //타이머 배열 선언

bool swtimerInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;

  if(excute == 1)
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <swtimerInit+0x84>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <swtimerInit+0x12>
  {
    return false;           //이미 한번 실행했다면 정지
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e033      	b.n	8000d96 <swtimerInit+0x7a>
  }

  //구조체 초기화
  for(i=0;i<SW_TIMER_MAX;i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e029      	b.n	8000d88 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_Cnt      = 0;          //현재 타이머값 0으로 초기화
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	491b      	ldr	r1, [pc, #108]	; (8000da4 <swtimerInit+0x88>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	3304      	adds	r3, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_En       = OFF;        //타이머는 초기에 비활성화
 8000d48:	79fa      	ldrb	r2, [r7, #7]
 8000d4a:	4916      	ldr	r1, [pc, #88]	; (8000da4 <swtimerInit+0x88>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init     = 0;          //타이머 초기화될때 타이머값 변수 초기화
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4911      	ldr	r1, [pc, #68]	; (8000da4 <swtimerInit+0x88>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	3308      	adds	r3, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFunt        = NULL;       //타이머 만료시 실행할 함수는 Null로 초기화
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <swtimerInit+0x88>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
  for(i=0;i<SW_TIMER_MAX;i++)
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3301      	adds	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	d9d2      	bls.n	8000d34 <swtimerInit+0x18>
  }

  //한번 실행됬으므로 변수 1로 설정
  excute = 1;
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <swtimerInit+0x84>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]

  return true;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	200002bc 	.word	0x200002bc
 8000da4:	2000021c 	.word	0x2000021c

08000da8 <swtimerISR>:

/*
 * @ 타이머 인터럽트 발생시 ㅅ실행되는 인럽텁트 서비스 루틴
 */
void swtimerISR(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  uint8_t i;

  //설정된 주기마다 이 함수가 실행되므로 카운터 변수가 설정된 주기마다 1씩 증가한다.
  //여기서는 주기가 1ms이므로 1ms 주기로 카운터 변수가 1씩 증가한다.
  sw_timer_counter++;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <swtimerISR+0xfc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <swtimerISR+0xfc>)
 8000db6:	6013      	str	r3, [r2, #0]

  for(i=0;i<SW_TIMER_MAX && i<sw_timer_handle_index; i++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	e063      	b.n	8000e86 <swtimerISR+0xde>
  {
    if(swtimer_tbl[i].Timer_En == ON)                             //해당 타이머가 활성화 됬는지??
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4939      	ldr	r1, [pc, #228]	; (8000ea8 <swtimerISR+0x100>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d156      	bne.n	8000e80 <swtimerISR+0xd8>
    {
      swtimer_tbl[i].Timer_Cnt--;                                 //타이머 1씩 감소
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4934      	ldr	r1, [pc, #208]	; (8000ea8 <swtimerISR+0x100>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	440b      	add	r3, r1
 8000de0:	3304      	adds	r3, #4
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1e59      	subs	r1, r3, #1
 8000de6:	4830      	ldr	r0, [pc, #192]	; (8000ea8 <swtimerISR+0x100>)
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4403      	add	r3, r0
 8000df2:	3304      	adds	r3, #4
 8000df4:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Cnt == 0)                           //해당 활성화된 타이머가 계속감소하여 0이 됬다면
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	492b      	ldr	r1, [pc, #172]	; (8000ea8 <swtimerISR+0x100>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	3304      	adds	r3, #4
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d139      	bne.n	8000e80 <swtimerISR+0xd8>
      {
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)                 //타이머를 한번만 실행하는 모드라면
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <swtimerISR+0x100>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <swtimerISR+0x8c>
        {
          swtimer_tbl[i].Timer_En = OFF;                          //타이머를 비활성화 시킨다.
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	4920      	ldr	r1, [pc, #128]	; (8000ea8 <swtimerISR+0x100>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
        }

        swtimer_tbl[i].Timer_Cnt = swtimer_tbl[i].Timer_Init;     //현재 타이머 값을 초기화 한다.
 8000e34:	79f9      	ldrb	r1, [r7, #7]
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <swtimerISR+0x100>)
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4403      	add	r3, r0
 8000e44:	3308      	adds	r3, #8
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <swtimerISR+0x100>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4403      	add	r3, r0
 8000e54:	3304      	adds	r3, #4
 8000e56:	6019      	str	r1, [r3, #0]

        (*swtimer_tbl[i].TmrFunt)(swtimer_tbl[i].TmrFuntArg);     //함수를 실행한다.
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <swtimerISR+0x100>)
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	330c      	adds	r3, #12
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <swtimerISR+0x100>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4403      	add	r3, r0
 8000e78:	3310      	adds	r3, #16
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	4788      	blx	r1
  for(i=0;i<SW_TIMER_MAX && i<sw_timer_handle_index; i++)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3301      	adds	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d806      	bhi.n	8000e9a <swtimerISR+0xf2>
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <swtimerISR+0x104>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d391      	bcc.n	8000dbe <swtimerISR+0x16>
      }
    }
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000214 	.word	0x20000214
 8000ea8:	2000021c 	.word	0x2000021c
 8000eac:	20000218 	.word	0x20000218

08000eb0 <swtimerSet>:

/*
 * @ 타이머 번호별로 모드, 실행할 함수설정
 * */
void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Func)(void*), void *arg)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode    = TmrMode;      //해당 타이머 번호의 동작 모드
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	491a      	ldr	r1, [pc, #104]	; (8000f30 <swtimerSet+0x80>)
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	7bba      	ldrb	r2, [r7, #14]
 8000ed4:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFunt       = Func;          //해당 타이머 번호 타이머 만료 시 실행할 함수
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	4915      	ldr	r1, [pc, #84]	; (8000f30 <swtimerSet+0x80>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFuntArg    = arg;          //해당 타이머 번호 타이머 만료 시 실행할 함수의 입력 매개변수
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	4910      	ldr	r1, [pc, #64]	; (8000f30 <swtimerSet+0x80>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3310      	adds	r3, #16
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Cnt     = TmrData;      //해당 타이머의 현재 카운터 값
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	490b      	ldr	r1, [pc, #44]	; (8000f30 <swtimerSet+0x80>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init    = TmrData;      //해당 타이머의 초기화 시 카운터 값
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <swtimerSet+0x80>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3308      	adds	r3, #8
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	2000021c 	.word	0x2000021c

08000f34 <swtimerStart>:


void swtimerStart(uint8_t TmrNum)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if(TmrNum  < SW_TIMER_MAX)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	d81a      	bhi.n	8000f7a <swtimerStart+0x46>
  {
    swtimer_tbl[TmrNum].Timer_Cnt = swtimer_tbl[TmrNum].Timer_Init;     //타이머 시작전에 카운터 변수 초기화
 8000f44:	79f9      	ldrb	r1, [r7, #7]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <swtimerStart+0x50>)
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4403      	add	r3, r0
 8000f54:	3308      	adds	r3, #8
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <swtimerStart+0x50>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4403      	add	r3, r0
 8000f64:	3304      	adds	r3, #4
 8000f66:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En = ON;                                  //해당 타이머 번호가 시작됨을 알리는 변수 ON 설정
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	4906      	ldr	r1, [pc, #24]	; (8000f84 <swtimerStart+0x50>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	2000021c 	.word	0x2000021c

08000f88 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_Cnt = swtimer_tbl[TmrNum].Timer_Init;     //해당 타미머 카운터 변수 초기화
  swtimer_tbl[TmrNum].Timer_En  = OFF;                                //해당 타이머 비활성화
}

swtimer_handle_t swtimerGetHandle(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  swtimer_handle_t  TmrIndex = sw_timer_handle_index;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <swtimerGetHandle+0x2c>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	80fb      	strh	r3, [r7, #6]

  sw_timer_handle_index++;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <swtimerGetHandle+0x2c>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <swtimerGetHandle+0x2c>)
 8000fa2:	801a      	strh	r2, [r3, #0]

  return TmrIndex;
 8000fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000218 	.word	0x20000218

08000fb8 <timerInit>:
    };

static hwtimer_t          timer_tbl[HWTIMER_MAX_CH];

void timerInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  timer_tbl[HWTIMER_TIMER1].freq                        = 1000000;      //인터럽트 발샐시키고자 하는 최소 단위 주파수 => 1MHz ==> 1us
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <timerInit+0x68>)
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <timerInit+0x6c>)
 8000fc0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                                                                        //Period와 곱하면 최종 인터럽트 발생주기(주파수)가 됨
  timer_tbl[HWTIMER_TIMER1].hTIM.Instance               = TIM3;         //TIM3 사용 설정
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <timerInit+0x68>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <timerInit+0x70>)
 8000fc8:	601a      	str	r2, [r3, #0]
   *  TIM3 Timer Max Clock : 84Mhz (System Clock / 2)
   *  (TIM3 Timer Max Clock / Prescaler)
   *
   *  84,000,000Hz / 4000Hz = 21,000
   */
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.Prescaler         = ((uint32_t)(SystemCoreClock / 2) / timer_tbl[HWTIMER_TIMER1].freq) - 1;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <timerInit+0x74>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	085a      	lsrs	r2, r3, #1
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <timerInit+0x68>)
 8000fd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	4a10      	ldr	r2, [pc, #64]	; (8001020 <timerInit+0x68>)
 8000fde:	6053      	str	r3, [r2, #4]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.ClockDivision     = 0;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <timerInit+0x68>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <timerInit+0x68>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <timerInit+0x68>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.RepetitionCounter = 0;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <timerInit+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]

  timer_tbl[HWTIMER_TIMER1].p_func[0]                   = NULL;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <timerInit+0x68>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  timer_tbl[HWTIMER_TIMER1].p_func[1]                   = NULL;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <timerInit+0x68>)
 8001002:	2200      	movs	r2, #0
 8001004:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  timer_tbl[HWTIMER_TIMER1].p_func[2]                   = NULL;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <timerInit+0x68>)
 800100a:	2200      	movs	r2, #0
 800100c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  timer_tbl[HWTIMER_TIMER1].p_func[3]                   = NULL;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <timerInit+0x68>)
 8001012:	2200      	movs	r2, #0
 8001014:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	200002c0 	.word	0x200002c0
 8001024:	000f4240 	.word	0x000f4240
 8001028:	40000400 	.word	0x40000400
 800102c:	20000000 	.word	0x20000000

08001030 <timerSetPeriod>:
/*
 *  @ 하드웨어 타이머가 가지고 있는 출력 비교 채널중 사용자가 설정하고자 하는 채널이
 *  인터럽트를 발생할 주기를 설정하는 함수임
 */
void timerSetPeriod(uint8_t ch, uint32_t us)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  hwtimer_t         *p_timer;   //타이머 핸들러 구조체 포인터 변수 선언

  uint32_t period;
  uint32_t time_div;

  if(ch > TIMER_MAX_CH)        return;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d820      	bhi.n	8001084 <timerSetPeriod+0x54>

  p_timer = &timer_tbl[hwtimer_index[ch].number];   //해당 채널의 구조체 변수 주소값 포인터 변수에 저장
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <timerSetPeriod+0x60>)
 8001046:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800104a:	461a      	mov	r2, r3
 800104c:	23cc      	movs	r3, #204	; 0xcc
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <timerSetPeriod+0x64>)
 8001054:	4413      	add	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

  time_div = 1000000 / p_timer->freq;     //1000000 / 4000 = 250
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <timerSetPeriod+0x68>)
 8001060:	fbb2 f3f3 	udiv	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]

  period = us / time_div;   // ex) 만약 us 가 1000*1000 이라면 period는 1000000 / 250 = 4000 이다.
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]

  if(period == 0)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <timerSetPeriod+0x4a>
  {
    period = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
  //최종 타이머 인터럽트 발생 주기는 Timer Max Clock / Prescaler 을 시간으로 환산한 다음
  //아래 Period 값을 곱해준다.
  //Timer Max Clock / Prescaler 은 4000 이고 시간으로 환산하면 0.00025 sec 이다.
  //0.00025 sec 를 period 4000 곱하면 1 sec가 되어
  //1초 주기로 타이머 인터럽트가 발생하도록 설정되게 된다.
  p_timer->hTIM.Init.Period = period - 1;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	e000      	b.n	8001086 <timerSetPeriod+0x56>
  if(ch > TIMER_MAX_CH)        return;
 8001084:	bf00      	nop
}
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000044 	.word	0x20000044
 8001094:	200002c0 	.word	0x200002c0
 8001098:	000f4240 	.word	0x000f4240

0800109c <timerStart>:
  //구조파 함수 포인터 변수를 null 처리한다.
  p_timer->p_func[hwtimer_index[ch].index] = NULL;
}

void timerStart(uint8_t ch)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  //함수내에서 구조체 변수에 접근하기 위해 구조체 포인터 변수 선언한다.
  hwtimer_t         *p_timer;
  uint32_t timer_sub_ch = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]

  if(ch > TIMER_MAX_CH)         return;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d845      	bhi.n	800113c <timerStart+0xa0>

  p_timer = &timer_tbl[hwtimer_index[ch].number];
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a24      	ldr	r2, [pc, #144]	; (8001144 <timerStart+0xa8>)
 80010b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80010b8:	461a      	mov	r2, r3
 80010ba:	23cc      	movs	r3, #204	; 0xcc
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <timerStart+0xac>)
 80010c2:	4413      	add	r3, r2
 80010c4:	60bb      	str	r3, [r7, #8]

  switch(hwtimer_index[ch].index)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <timerStart+0xa8>)
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	785b      	ldrb	r3, [r3, #1]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d817      	bhi.n	8001104 <timerStart+0x68>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <timerStart+0x40>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010ed 	.word	0x080010ed
 80010e0:	080010f3 	.word	0x080010f3
 80010e4:	080010f9 	.word	0x080010f9
 80010e8:	080010ff 	.word	0x080010ff
  {
    case HWTIMER_CH1:
      timer_sub_ch = TIM_CHANNEL_1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
      break;
 80010f0:	e008      	b.n	8001104 <timerStart+0x68>

    case HWTIMER_CH2:
      timer_sub_ch = TIM_CHANNEL_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
     break;
 80010f6:	e005      	b.n	8001104 <timerStart+0x68>

    case HWTIMER_CH3:
      timer_sub_ch = TIM_CHANNEL_3;
 80010f8:	2308      	movs	r3, #8
 80010fa:	60fb      	str	r3, [r7, #12]
     break;
 80010fc:	e002      	b.n	8001104 <timerStart+0x68>

    case HWTIMER_CH4:
      timer_sub_ch = TIM_CHANNEL_4;
 80010fe:	230c      	movs	r3, #12
 8001100:	60fb      	str	r3, [r7, #12]
     break;
 8001102:	bf00      	nop
  }
  //TIM3의 Output Compare 기능을 사용하므로 해당 초기화 함수를 이용하여 초기화 한다.
  HAL_TIM_OC_Init(&p_timer->hTIM);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fb7a 	bl	8004800 <HAL_TIM_OC_Init>
  //TIM3 Output Compare 파라미터를 설정한다.
  HAL_TIM_OC_ConfigChannel(&p_timer->hTIM, &p_timer->sConfig[hwtimer_index[ch].index], timer_sub_ch);
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <timerStart+0xa8>)
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	461a      	mov	r2, r3
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	3348      	adds	r3, #72	; 0x48
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4619      	mov	r1, r3
 800112c:	f003 fdd6 	bl	8004cdc <HAL_TIM_OC_ConfigChannel>
  //TIM3 Output Compare 인터럽트 동작을 시작한다.
  HAL_TIM_OC_Start_IT(&p_timer->hTIM, timer_sub_ch);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	68f9      	ldr	r1, [r7, #12]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fbb3 	bl	80048a0 <HAL_TIM_OC_Start_IT>
 800113a:	e000      	b.n	800113e <timerStart+0xa2>
  if(ch > TIMER_MAX_CH)         return;
 800113c:	bf00      	nop
}
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000044 	.word	0x20000044
 8001148:	200002c0 	.word	0x200002c0

0800114c <timerCallBack>:

void timerCallBack(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t index;
  hwtimer_t         *p_timer;

  for(i=0;i<TIMER_MAX_CH;i++)
 8001154:	2300      	movs	r3, #0
 8001156:	75fb      	strb	r3, [r7, #23]
 8001158:	e02c      	b.n	80011b4 <timerCallBack+0x68>
  {
    p_timer = &timer_tbl[hwtimer_index[i].number];
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <timerCallBack+0x78>)
 800115e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001162:	461a      	mov	r2, r3
 8001164:	23cc      	movs	r3, #204	; 0xcc
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <timerCallBack+0x7c>)
 800116c:	4413      	add	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    index   = hwtimer_index[i].index;
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <timerCallBack+0x78>)
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	60fb      	str	r3, [r7, #12]

    //사용할 Output Compare 채널이 맞다면
    if(htim->Channel == hwtimer_index[i].active_channel)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7f1b      	ldrb	r3, [r3, #28]
 8001180:	4619      	mov	r1, r3
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <timerCallBack+0x78>)
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4299      	cmp	r1, r3
 800118e:	d10e      	bne.n	80011ae <timerCallBack+0x62>
    {
      //등록된 함수가 존재한다면
      if(p_timer->p_func[index] != NULL)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	332e      	adds	r3, #46	; 0x2e
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <timerCallBack+0x62>
      {
        //등록된 함수를 불려온다.
        (*p_timer->p_func[index])();
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	332e      	adds	r3, #46	; 0x2e
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4798      	blx	r3
  for(i=0;i<TIMER_MAX_CH;i++)
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	3301      	adds	r3, #1
 80011b2:	75fb      	strb	r3, [r7, #23]
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d9cf      	bls.n	800115a <timerCallBack+0xe>
      }
    }
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000044 	.word	0x20000044
 80011c8:	200002c0 	.word	0x200002c0

080011cc <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&timer_tbl[HWTIMER_CH1].hTIM);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <TIM3_IRQHandler+0x10>)
 80011d2:	f003 fc7b 	bl	8004acc <HAL_TIM_IRQHandler>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002c0 	.word	0x200002c0

080011e0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  timerCallBack(htim);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffaf 	bl	800114c <timerCallBack>
  swtimerISR();
 80011ee:	f7ff fddb 	bl	8000da8 <swtimerISR>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_TIM_OC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  }
}

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim->Instance == timer_tbl[HWTIMER_CH1].hTIM.Instance)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_TIM_OC_MspInit+0x48>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d115      	bne.n	800123c <HAL_TIM_OC_MspInit+0x40>
  {
    //TIM3 클릭을 활성화 한다.
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_TIM_OC_MspInit+0x4c>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_TIM_OC_MspInit+0x4c>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_TIM_OC_MspInit+0x4c>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

    //인터럽트 우선순위를 설정하고, 활성화 한다.
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	210f      	movs	r1, #15
 8001230:	201d      	movs	r0, #29
 8001232:	f000 fcae 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001236:	201d      	movs	r0, #29
 8001238:	f000 fcc7 	bl	8001bca <HAL_NVIC_EnableIRQ>
  }
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200002c0 	.word	0x200002c0
 8001248:	40023800 	.word	0x40023800

0800124c <uartInit>:

void uartStartRx(uint8_t ch);         //uart 수신시작 설정 함수
void uartRxHandler(uint8_t ch);       //uart 수신 핸들러 함수

void uartInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i=0;i<UART_MAX_CH;i++)
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e025      	b.n	80012a4 <uartInit+0x58>
  {
    uart_tbl[i].is_open   = false;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <uartInit+0x6c>)
 800125c:	21d0      	movs	r1, #208	; 0xd0
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].vcp_mode  = false;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <uartInit+0x6c>)
 800126c:	21d0      	movs	r1, #208	; 0xd0
 800126e:	fb01 f303 	mul.w	r3, r1, r3
 8001272:	4413      	add	r3, r2
 8001274:	3308      	adds	r3, #8
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
    //uart_tbl[i].rx_mode   = UART_MODE_INTERRUPT;
    //uart_tbl[i].tx_mode   = UART_MODE_INTERRUPT;
    uart_tbl[i].rx_mode   = UART_MODE_DMA;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <uartInit+0x6c>)
 800127e:	21d0      	movs	r1, #208	; 0xd0
 8001280:	fb01 f303 	mul.w	r3, r1, r3
 8001284:	4413      	add	r3, r2
 8001286:	330a      	adds	r3, #10
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode   = UART_MODE_DMA;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <uartInit+0x6c>)
 8001290:	21d0      	movs	r1, #208	; 0xd0
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	4413      	add	r3, r2
 8001298:	3309      	adds	r3, #9
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
  for(i=0;i<UART_MAX_CH;i++)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3301      	adds	r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d9d6      	bls.n	8001258 <uartInit+0xc>
  }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000450 	.word	0x20000450

080012bc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
  uart_t  *p_uart;        //uart 핸들용 구조체 포인터 변수 선언

  p_uart = &uart_tbl[ch];
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	22d0      	movs	r2, #208	; 0xd0
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <uartOpen+0xf4>)
 80012d6:	4413      	add	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]

  if(ch > UART_MAX_CH)    return false;
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <uartOpen+0x28>
 80012e0:	2300      	movs	r3, #0
 80012e2:	e060      	b.n	80013a6 <uartOpen+0xea>

  switch(ch)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <uartOpen+0x34>
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d056      	beq.n	800139c <uartOpen+0xe0>
 80012ee:	e059      	b.n	80013a4 <uartOpen+0xe8>
  {
    case _DEF_UART1:

      p_uart->baud = baud;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
      p_uart->vcp_mode  = false;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2200      	movs	r2, #0
 8001300:	721a      	strb	r2, [r3, #8]
      //p_uart->rx_mode   = UART_MODE_DMA;
      //p_uart->tx_mode   = UART_MODE_DMA;
      //p_uart->rx_mode     = UART_MODE_INTERRUPT;
      //p_uart->tx_mode     = UART_MODE_INTERRUPT;

      huart1.Instance           = USART1;
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <uartOpen+0xf8>)
 8001304:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <uartOpen+0xfc>)
 8001306:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate      = baud;
 8001308:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <uartOpen+0xf8>)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength    = UART_WORDLENGTH_8B;
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <uartOpen+0xf8>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits      = UART_STOPBITS_1;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <uartOpen+0xf8>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity        = UART_PARITY_NONE;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <uartOpen+0xf8>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode          = UART_MODE_TX_RX;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <uartOpen+0xf8>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl     = UART_HWCONTROL_NONE;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <uartOpen+0xf8>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling  = UART_OVERSAMPLING_16;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <uartOpen+0xf8>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8001332:	4820      	ldr	r0, [pc, #128]	; (80013b4 <uartOpen+0xf8>)
 8001334:	f004 f81f 	bl	8005376 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &uart_rx_qbuf[0], UART_RX_QBUF_LENGTH);    //큐 버퍼 생성
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <uartOpen+0x100>)
 800133e:	4413      	add	r3, r2
 8001340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001344:	491e      	ldr	r1, [pc, #120]	; (80013c0 <uartOpen+0x104>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fb65 	bl	8000a16 <qbufferCreate>

      if(p_uart->rx_mode == UART_MODE_DMA)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	7a9b      	ldrb	r3, [r3, #10]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d115      	bne.n	8001380 <uartOpen+0xc4>
      {
        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <uartOpen+0x108>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <uartOpen+0x108>)
 800135e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <uartOpen+0x108>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	203a      	movs	r0, #58	; 0x3a
 8001376:	f000 fc0c 	bl	8001b92 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800137a:	203a      	movs	r0, #58	; 0x3a
 800137c:	f000 fc25 	bl	8001bca <HAL_NVIC_EnableIRQ>
      }

      if(HAL_UART_Init(&huart1) != HAL_OK)                                          //uart 초기화
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <uartOpen+0xf8>)
 8001382:	f003 ffab 	bl	80052dc <HAL_UART_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <uartOpen+0xd6>
      {
        ret = false;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
      else
      {
        uartStartRx(ch);
      }

      break;
 8001390:	e008      	b.n	80013a4 <uartOpen+0xe8>
        uartStartRx(ch);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f817 	bl	80013c8 <uartStartRx>
      break;
 800139a:	e003      	b.n	80013a4 <uartOpen+0xe8>

    case _DEF_UART2:            //usb
      p_uart->is_open = true;   //usb 통신채널이 오픈됨.
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]

      break;
 80013a2:	bf00      	nop
  }
  return ret;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000450 	.word	0x20000450
 80013b4:	2000038c 	.word	0x2000038c
 80013b8:	40011000 	.word	0x40011000
 80013bc:	20000430 	.word	0x20000430
 80013c0:	200005f0 	.word	0x200005f0
 80013c4:	40023800 	.word	0x40023800

080013c8 <uartStartRx>:

/**
 * @uart 수신시작 설정 함수
 */
void uartStartRx(uint8_t ch)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  uart_t        *p_uart;

  p_uart = &uart_tbl[ch];
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	22d0      	movs	r2, #208	; 0xd0
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <uartStartRx+0x8c>)
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d132      	bne.n	800144c <uartStartRx+0x84>
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d104      	bne.n	80013f8 <uartStartRx+0x30>
      {
        //HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_qbuf[0], 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4919      	ldr	r1, [pc, #100]	; (8001458 <uartStartRx+0x90>)
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <uartStartRx+0x94>)
 80013f4:	f004 f880 	bl	80054f8 <HAL_UART_Receive_IT>
      }

      if(p_uart->rx_mode == UART_MODE_DMA)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7a9b      	ldrb	r3, [r3, #10]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d122      	bne.n	8001446 <uartStartRx+0x7e>
      {
        //if(HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t*)&uart_rx_qbuf[0], 256) != HAL_OK)
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t*)&uart_rx_qbuf[0], 256) != HAL_OK)
 8001400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001404:	4914      	ldr	r1, [pc, #80]	; (8001458 <uartStartRx+0x90>)
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <uartStartRx+0x94>)
 8001408:	f004 f8a6 	bl	8005558 <HAL_UART_Receive_DMA>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11b      	bne.n	800144a <uartStartRx+0x82>
        {
          return;
        }
        //p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma.Instance->NDTR;
        qbuffer[ch].ptr_in = qbuffer[ch].length - hdma_usart1_rx.Instance->NDTR;
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <uartStartRx+0x98>)
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	3308      	adds	r3, #8
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <uartStartRx+0x9c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	1a8a      	subs	r2, r1, r2
 8001428:	490d      	ldr	r1, [pc, #52]	; (8001460 <uartStartRx+0x98>)
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	601a      	str	r2, [r3, #0]
        //p_uart->qbuffer_rx.ptr_out = p_uart->qbuffer_rx.ptr_in;
        qbuffer[ch].ptr_out = qbuffer[ch].ptr_in;
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	490a      	ldr	r1, [pc, #40]	; (8001460 <uartStartRx+0x98>)
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	440a      	add	r2, r1
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	4908      	ldr	r1, [pc, #32]	; (8001460 <uartStartRx+0x98>)
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	440b      	add	r3, r1
 8001442:	3304      	adds	r3, #4
 8001444:	601a      	str	r2, [r3, #0]
      }
      break;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <uartStartRx+0x84>
          return;
 800144a:	bf00      	nop
  }
}
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000450 	.word	0x20000450
 8001458:	200005f0 	.word	0x200005f0
 800145c:	2000038c 	.word	0x2000038c
 8001460:	20000430 	.word	0x20000430
 8001464:	200003d0 	.word	0x200003d0

08001468 <uartAvailable>:

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;

  uart_t    *p_uart;

  p_uart = &uart_tbl[ch];
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	22d0      	movs	r2, #208	; 0xd0
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <uartAvailable+0x88>)
 800147c:	4413      	add	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <uartAvailable+0x24>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d028      	beq.n	80014dc <uartAvailable+0x74>
 800148a:	e02c      	b.n	80014e6 <uartAvailable+0x7e>
  {
    case _DEF_UART1:    //uart
      if(p_uart->rx_mode == UART_MODE_DMA)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	7a9b      	ldrb	r3, [r3, #10]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d116      	bne.n	80014c2 <uartAvailable+0x5a>
      {
        qbuffer[ch].ptr_in = qbuffer[ch].length - hdma_usart1_rx.Instance->NDTR;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <uartAvailable+0x8c>)
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	3308      	adds	r3, #8
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <uartAvailable+0x90>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	1a8a      	subs	r2, r1, r2
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <uartAvailable+0x8c>)
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	440b      	add	r3, r1
 80014b0:	601a      	str	r2, [r3, #0]
        ret = qbufferAvailable(&qbuffer[ch]);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <uartAvailable+0x8c>)
 80014b8:	4413      	add	r3, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb4b 	bl	8000b56 <qbufferAvailable>
 80014c0:	60f8      	str	r0, [r7, #12]
      }

      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	7a9b      	ldrb	r3, [r3, #10]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10c      	bne.n	80014e4 <uartAvailable+0x7c>
      {
        ret = qbufferAvailable(&qbuffer[ch]);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <uartAvailable+0x8c>)
 80014d0:	4413      	add	r3, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb3f 	bl	8000b56 <qbufferAvailable>
 80014d8:	60f8      	str	r0, [r7, #12]
      }
      break;
 80014da:	e003      	b.n	80014e4 <uartAvailable+0x7c>

    case _DEF_UART2:            //usb
      ret = cdcAvailable();     //usb 수신버퍼 사용가능한지 확인
 80014dc:	f008 fdbe 	bl	800a05c <cdcAvailable>
 80014e0:	60f8      	str	r0, [r7, #12]
      break;
 80014e2:	e000      	b.n	80014e6 <uartAvailable+0x7e>
      break;
 80014e4:	bf00      	nop
  }
  return ret;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000450 	.word	0x20000450
 80014f4:	20000430 	.word	0x20000430
 80014f8:	200003d0 	.word	0x200003d0

080014fc <uartWrite>:

  return ret;
}

int32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]

  uart_t    *p_uart;
  p_uart = &uart_tbl[ch];
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	22d0      	movs	r2, #208	; 0xd0
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <uartWrite+0x88>)
 8001518:	4413      	add	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

  switch(ch)
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <uartWrite+0x2c>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d021      	beq.n	800156a <uartWrite+0x6e>
 8001526:	e028      	b.n	800157a <uartWrite+0x7e>
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_DMA)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	7a9b      	ldrb	r3, [r3, #10]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d10b      	bne.n	8001548 <uartWrite+0x4c>
      {
        if(HAL_UART_Transmit(&huart1, p_data, length, 100) == HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	b29a      	uxth	r2, r3
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <uartWrite+0x8c>)
 800153a:	f003 ff4b 	bl	80053d4 <HAL_UART_Transmit>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <uartWrite+0x4c>
        {
          ret = length;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	617b      	str	r3, [r7, #20]
        }
      }

      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	7a9b      	ldrb	r3, [r3, #10]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d113      	bne.n	8001578 <uartWrite+0x7c>
      {
        if(HAL_UART_Transmit(&huart1, p_data, length, 100) == HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	b29a      	uxth	r2, r3
 8001554:	2364      	movs	r3, #100	; 0x64
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <uartWrite+0x8c>)
 800155a:	f003 ff3b 	bl	80053d4 <HAL_UART_Transmit>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d109      	bne.n	8001578 <uartWrite+0x7c>
        {
          ret = length;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	617b      	str	r3, [r7, #20]
        }
      }
      break;
 8001568:	e006      	b.n	8001578 <uartWrite+0x7c>

    case _DEF_UART2:      //usb
      //usb로 수신된 데이터를 길이만큼 write한다.
      ret = cdcWrite(p_data, length);
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f008 fde3 	bl	800a138 <cdcWrite>
 8001572:	4603      	mov	r3, r0
 8001574:	617b      	str	r3, [r7, #20]
      break;
 8001576:	e000      	b.n	800157a <uartWrite+0x7e>
      break;
 8001578:	bf00      	nop
  }

  return ret;
 800157a:	697b      	ldr	r3, [r7, #20]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000450 	.word	0x20000450
 8001588:	2000038c 	.word	0x2000038c

0800158c <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	72fb      	strb	r3, [r7, #11]

  uart_t  *p_uart;
  p_uart = &uart_tbl[ch];
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	22d0      	movs	r2, #208	; 0xd0
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <uartRead+0x54>)
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <uartRead+0x28>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d00b      	beq.n	80015ca <uartRead+0x3e>
 80015b2:	e00f      	b.n	80015d4 <uartRead+0x48>
  {
    case _DEF_UART1:

      //qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
      qbufferRead(&qbuffer[ch], &ret, 1);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <uartRead+0x58>)
 80015ba:	4413      	add	r3, r2
 80015bc:	f107 010b 	add.w	r1, r7, #11
 80015c0:	2201      	movs	r2, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fa8b 	bl	8000ade <qbufferRead>

      break;
 80015c8:	e004      	b.n	80015d4 <uartRead+0x48>

    case _DEF_UART2:      //usb
      //usb로 수신된 데이터를 읽어서 변수에 저장한다.
      ret = cdcRead();
 80015ca:	f008 fd63 	bl	800a094 <cdcRead>
 80015ce:	4603      	mov	r3, r0
 80015d0:	72fb      	strb	r3, [r7, #11]
      break;
 80015d2:	bf00      	nop
  }

  return ret;
 80015d4:	7afb      	ldrb	r3, [r7, #11]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000450 	.word	0x20000450
 80015e4:	20000430 	.word	0x20000430

080015e8 <uartPrintf>:

int32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 80015e8:	b40e      	push	{r1, r2, r3}
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b0c7      	sub	sp, #284	; 0x11c
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4602      	mov	r2, r0
 80015f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015f6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80015fa:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list   args;
  int len;
  int32_t ret = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_start(args, fmt);
 8001602:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001606:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800160a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800160e:	601a      	str	r2, [r3, #0]

  len = vsnprintf(buf, 256, fmt, args);
 8001610:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001614:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001618:	f107 0010 	add.w	r0, r7, #16
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001626:	f009 fb77 	bl	800ad18 <vsniprintf>
 800162a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  switch(ch)
 800162e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001632:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <uartPrintf+0x5a>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d00f      	beq.n	8001660 <uartPrintf+0x78>
 8001640:	e01a      	b.n	8001678 <uartPrintf+0x90>
  {
    case _DEF_UART1:
      ret = uartWrite(ch, (uint8_t*)buf, len);
 8001642:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001646:	f107 0110 	add.w	r1, r7, #16
 800164a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800164e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff51 	bl	80014fc <uartWrite>
 800165a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
      break;
 800165e:	e00b      	b.n	8001678 <uartPrintf+0x90>

    case _DEF_UART2:  //usb
      //usb로 print한다.
      ret = cdcWrite((uint8_t*)buf, len);
 8001660:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f008 fd64 	bl	800a138 <cdcWrite>
 8001670:	4603      	mov	r3, r0
 8001672:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      break;
 8001676:	bf00      	nop
  }

  va_end(args);

  return ret;
 8001678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 800167c:	4618      	mov	r0, r3
 800167e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001682:	46bd      	mov	sp, r7
 8001684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001688:	b003      	add	sp, #12
 800168a:	4770      	bx	lr

0800168c <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  uint32_t baud;
  switch(ch)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <uartGetBaud+0x1c>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <uartGetBaud+0x1e>
  {
    case _DEF_UART1:      //uart
      break;

    case _DEF_UART2:      //usb cdc
      baud = cdcGetBaud();
 80016a0:	f008 fd72 	bl	800a188 <cdcGetBaud>
 80016a4:	60f8      	str	r0, [r7, #12]
      break;
 80016a6:	e000      	b.n	80016aa <uartGetBaud+0x1e>
      break;
 80016a8:	bf00      	nop
  }

  return baud;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(uart_tbl[_DEF_UART1].rx_mode == UART_MODE_INTERRUPT)
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_UART_RxCpltCallback+0x34>)
 80016be:	7a9b      	ldrb	r3, [r3, #10]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10c      	bne.n	80016de <HAL_UART_RxCpltCallback+0x2a>
  {
    qbufferWrite(&qbuffer[_DEF_UART1], &qbuffer[_DEF_UART1].p_buf[0], 1); //uart rx 수신데이터를 큐버퍼에 쓴다.
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_UART_RxCpltCallback+0x38>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <HAL_UART_RxCpltCallback+0x38>)
 80016ce:	f7ff f9c5 	bl	8000a5c <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_qbuf[0], 1);  //수신인터럽트를 다시 활성화 한다.
 80016d2:	2201      	movs	r2, #1
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <HAL_UART_RxCpltCallback+0x3c>)
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <HAL_UART_RxCpltCallback+0x40>)
 80016d8:	f003 ff0e 	bl	80054f8 <HAL_UART_Receive_IT>
 80016dc:	e000      	b.n	80016e0 <HAL_UART_RxCpltCallback+0x2c>
  }
  else
  {
    return;
 80016de:	bf00      	nop
  }
}
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000450 	.word	0x20000450
 80016ec:	20000430 	.word	0x20000430
 80016f0:	200005f0 	.word	0x200005f0
 80016f4:	2000038c 	.word	0x2000038c

080016f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a35      	ldr	r2, [pc, #212]	; (80017ec <HAL_UART_MspInit+0xf4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d163      	bne.n	80017e2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_UART_MspInit+0xf8>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <HAL_UART_MspInit+0xf8>)
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_UART_MspInit+0xf8>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_UART_MspInit+0xf8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2c      	ldr	r2, [pc, #176]	; (80017f0 <HAL_UART_MspInit+0xf8>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_UART_MspInit+0xf8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001752:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001764:	2307      	movs	r3, #7
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4821      	ldr	r0, [pc, #132]	; (80017f4 <HAL_UART_MspInit+0xfc>)
 8001770:	f000 feb0 	bl	80024d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_UART_MspInit+0x100>)
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_UART_MspInit+0x104>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_UART_MspInit+0x100>)
 800177c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001780:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_UART_MspInit+0x100>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_UART_MspInit+0x100>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_UART_MspInit+0x100>)
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001794:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0x100>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_UART_MspInit+0x100>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_MspInit+0x100>)
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_UART_MspInit+0x100>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_UART_MspInit+0x100>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <HAL_UART_MspInit+0x100>)
 80017b8:	f000 fa30 	bl	8001c1c <HAL_DMA_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017c2:	f000 f843 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_UART_MspInit+0x100>)
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_UART_MspInit+0x100>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2025      	movs	r0, #37	; 0x25
 80017d8:	f000 f9db 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017dc:	2025      	movs	r0, #37	; 0x25
 80017de:	f000 f9f4 	bl	8001bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	200003d0 	.word	0x200003d0
 80017fc:	40026440 	.word	0x40026440

08001800 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <HAL_UART_MspDeInit+0x40>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d112      	bne.n	8001838 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_UART_MspDeInit+0x44>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_UART_MspDeInit+0x44>)
 8001818:	f023 0310 	bic.w	r3, r3, #16
 800181c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800181e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001822:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_UART_MspDeInit+0x48>)
 8001824:	f000 fff0 	bl	8002808 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	4618      	mov	r0, r3
 800182e:	f000 faa3 	bl	8001d78 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001832:	2025      	movs	r0, #37	; 0x25
 8001834:	f000 f9d7 	bl	8001be6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40011000 	.word	0x40011000
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <Error_Handler>:
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>

08001856 <hwInit>:




void hwInit(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  bspInit();
 800185a:	f7fe ff13 	bl	8000684 <bspInit>
  ledInit();
 800185e:	f7ff f9cf 	bl	8000c00 <ledInit>
  buttonInit();
 8001862:	f7ff f995 	bl	8000b90 <buttonInit>
  timerInit();
 8001866:	f7ff fba7 	bl	8000fb8 <timerInit>
  swtimerInit();
 800186a:	f7ff fa57 	bl	8000d1c <swtimerInit>
  uartInit();
 800186e:	f7ff fced 	bl	800124c <uartInit>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f96b 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7fe ffe2 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f991 	bl	8001c02 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f94b 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000068 	.word	0x20000068
 8001918:	20000064 	.word	0x20000064

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000068 	.word	0x20000068
 800193c:	200006f0 	.word	0x200006f0

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200006f0 	.word	0x200006f0

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fff0 	bl	8001940 <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffe0 	bl	8001940 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000068 	.word	0x20000068

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	; (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db12      	blt.n	8001a70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	490a      	ldr	r1, [pc, #40]	; (8001a7c <__NVIC_DisableIRQ+0x44>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	3320      	adds	r3, #32
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a64:	f3bf 8f4f 	dsb	sy
}
 8001a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a6a:	f3bf 8f6f 	isb	sy
}
 8001a6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff90 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff09 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff1e 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff11 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff1f 	bl	8001a38 <__NVIC_DisableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff94 	bl	8001b38 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fe8a 	bl	8001940 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e099      	b.n	8001d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c58:	e00f      	b.n	8001c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5a:	f7ff fe71 	bl	8001940 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d908      	bls.n	8001c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e078      	b.n	8001d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e8      	bne.n	8001c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_DMA_Init+0x158>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d107      	bne.n	8001ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f023 0307 	bic.w	r3, r3, #7
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d117      	bne.n	8001d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fb5d 	bl	80023e0 <DMA_CheckFifoParam>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e016      	b.n	8001d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fb16 	bl	8002378 <DMA_CalcBaseAndBitshift>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	223f      	movs	r2, #63	; 0x3f
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	f010803f 	.word	0xf010803f

08001d78 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e050      	b.n	8001e2c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	e048      	b.n	8001e2c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2221      	movs	r2, #33	; 0x21
 8001dd8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 facc 	bl	8002378 <DMA_CalcBaseAndBitshift>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	223f      	movs	r2, #63	; 0x3f
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Start_IT+0x26>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e040      	b.n	8001edc <HAL_DMA_Start_IT+0xa8>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d12f      	bne.n	8001ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fa4a 	bl	800231c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	223f      	movs	r2, #63	; 0x3f
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0216 	orr.w	r2, r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e005      	b.n	8001eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ef2:	f7ff fd25 	bl	8001940 <HAL_GetTick>
 8001ef6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e052      	b.n	8001fbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_Abort+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	e013      	b.n	8001f90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f68:	f7ff fcea 	bl	8001940 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d90c      	bls.n	8001f90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e015      	b.n	8001fbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1e4      	bne.n	8001f68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	223f      	movs	r2, #63	; 0x3f
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00c      	b.n	8001ffc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002014:	4b8e      	ldr	r3, [pc, #568]	; (8002250 <HAL_DMA_IRQHandler+0x248>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a8e      	ldr	r2, [pc, #568]	; (8002254 <HAL_DMA_IRQHandler+0x24c>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0a9b      	lsrs	r3, r3, #10
 8002020:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2208      	movs	r2, #8
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01a      	beq.n	8002074 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	2208      	movs	r2, #8
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	2201      	movs	r2, #1
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2204      	movs	r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2204      	movs	r2, #4
 80020ce:	409a      	lsls	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	2210      	movs	r2, #16
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d043      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03c      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2210      	movs	r2, #16
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d024      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	e01f      	b.n	8002178 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e016      	b.n	8002178 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0208 	bic.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2220      	movs	r2, #32
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 808f 	beq.w	80022a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8087 	beq.w	80022a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2220      	movs	r2, #32
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d136      	bne.n	8002220 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0216 	bic.w	r2, r2, #22
 80021c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x1da>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0208 	bic.w	r2, r2, #8
 80021f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	223f      	movs	r2, #63	; 0x3f
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07e      	beq.n	8002314 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
        }
        return;
 800221e:	e079      	b.n	8002314 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01d      	beq.n	800226a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	2b00      	cmp	r3, #0
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e02c      	b.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000
 8002254:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
 8002268:	e01e      	b.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10f      	bne.n	8002298 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d032      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d307      	bcc.n	80022f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f2      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x2cc>
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
 8002312:	e000      	b.n	8002316 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002314:	bf00      	nop
    }
  }
}
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002338:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d108      	bne.n	800235c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800235a:	e007      	b.n	800236c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
	...

08002378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3b10      	subs	r3, #16
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <DMA_CalcBaseAndBitshift+0x60>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <DMA_CalcBaseAndBitshift+0x64>)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d909      	bls.n	80023ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58
 80023b8:	e007      	b.n	80023ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	aaaaaaab 	.word	0xaaaaaaab
 80023dc:	0800b6ac 	.word	0x0800b6ac

080023e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d11f      	bne.n	800243a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d856      	bhi.n	80024ae <DMA_CheckFifoParam+0xce>
 8002400:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <DMA_CheckFifoParam+0x28>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	08002419 	.word	0x08002419
 800240c:	0800242b 	.word	0x0800242b
 8002410:	08002419 	.word	0x08002419
 8002414:	080024af 	.word	0x080024af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d046      	beq.n	80024b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002428:	e043      	b.n	80024b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002432:	d140      	bne.n	80024b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002438:	e03d      	b.n	80024b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002442:	d121      	bne.n	8002488 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d837      	bhi.n	80024ba <DMA_CheckFifoParam+0xda>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <DMA_CheckFifoParam+0x70>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002461 	.word	0x08002461
 8002454:	08002467 	.word	0x08002467
 8002458:	08002461 	.word	0x08002461
 800245c:	08002479 	.word	0x08002479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e030      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d025      	beq.n	80024be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002476:	e022      	b.n	80024be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002480:	d11f      	bne.n	80024c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002486:	e01c      	b.n	80024c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d903      	bls.n	8002496 <DMA_CheckFifoParam+0xb6>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d003      	beq.n	800249c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002494:	e018      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      break;
 800249a:	e015      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00e      	beq.n	80024c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      break;
 80024ac:	e00b      	b.n	80024c6 <DMA_CheckFifoParam+0xe6>
      break;
 80024ae:	bf00      	nop
 80024b0:	e00a      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
 80024b4:	e008      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e006      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e004      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
    }
  } 
  
  return status; 
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e16b      	b.n	80027c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 815a 	bne.w	80027c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d005      	beq.n	8002526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	2b02      	cmp	r3, #2
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b03      	cmp	r3, #3
 8002592:	d017      	beq.n	80025c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d123      	bne.n	8002618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80b4 	beq.w	80027c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_GPIO_Init+0x308>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a5e      	ldr	r2, [pc, #376]	; (80027dc <HAL_GPIO_Init+0x308>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_GPIO_Init+0x308>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002676:	4a5a      	ldr	r2, [pc, #360]	; (80027e0 <HAL_GPIO_Init+0x30c>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a51      	ldr	r2, [pc, #324]	; (80027e4 <HAL_GPIO_Init+0x310>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x226>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a50      	ldr	r2, [pc, #320]	; (80027e8 <HAL_GPIO_Init+0x314>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x222>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_GPIO_Init+0x318>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x21e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_GPIO_Init+0x31c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x21a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_GPIO_Init+0x320>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x216>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x324>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x212>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x328>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x20a>
 80026da:	2307      	movs	r3, #7
 80026dc:	e00e      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026de:	2308      	movs	r3, #8
 80026e0:	e00c      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026e2:	2306      	movs	r3, #6
 80026e4:	e00a      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e008      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026ea:	2304      	movs	r3, #4
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026fa:	2300      	movs	r3, #0
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270c:	4934      	ldr	r1, [pc, #208]	; (80027e0 <HAL_GPIO_Init+0x30c>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_GPIO_Init+0x330>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_GPIO_Init+0x330>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_GPIO_Init+0x330>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <HAL_GPIO_Init+0x330>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_GPIO_Init+0x330>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002792:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_GPIO_Init+0x330>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_GPIO_Init+0x330>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_GPIO_Init+0x330>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	f67f ae90 	bls.w	80024f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020800 	.word	0x40020800
 80027f0:	40020c00 	.word	0x40020c00
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40021400 	.word	0x40021400
 80027fc:	40021800 	.word	0x40021800
 8002800:	40021c00 	.word	0x40021c00
 8002804:	40013c00 	.word	0x40013c00

08002808 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e0cd      	b.n	80029c0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002824:	2201      	movs	r2, #1
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	f040 80bd 	bne.w	80029ba <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002840:	4a64      	ldr	r2, [pc, #400]	; (80029d4 <HAL_GPIO_DeInit+0x1cc>)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a5c      	ldr	r2, [pc, #368]	; (80029d8 <HAL_GPIO_DeInit+0x1d0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_DeInit+0xba>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a5b      	ldr	r2, [pc, #364]	; (80029dc <HAL_GPIO_DeInit+0x1d4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_DeInit+0xb6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a5a      	ldr	r2, [pc, #360]	; (80029e0 <HAL_GPIO_DeInit+0x1d8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_DeInit+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a59      	ldr	r2, [pc, #356]	; (80029e4 <HAL_GPIO_DeInit+0x1dc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_DeInit+0xae>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_GPIO_DeInit+0x1e0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_DeInit+0xaa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a57      	ldr	r2, [pc, #348]	; (80029ec <HAL_GPIO_DeInit+0x1e4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_DeInit+0xa6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_GPIO_DeInit+0x1e8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_DeInit+0xa2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a55      	ldr	r2, [pc, #340]	; (80029f4 <HAL_GPIO_DeInit+0x1ec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_DeInit+0x9e>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00e      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028a6:	2308      	movs	r3, #8
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e00a      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_DeInit+0xbc>
 80028c2:	2300      	movs	r3, #0
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d132      	bne.n	800293a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028d4:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4946      	ldr	r1, [pc, #280]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 80028de:	4013      	ands	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028e2:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4943      	ldr	r1, [pc, #268]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	493f      	ldr	r1, [pc, #252]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	493c      	ldr	r1, [pc, #240]	; (80029f8 <HAL_GPIO_DeInit+0x1f0>)
 8002908:	4013      	ands	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800291c:	4a2d      	ldr	r2, [pc, #180]	; (80029d4 <HAL_GPIO_DeInit+0x1cc>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	43da      	mvns	r2, r3
 800292c:	4829      	ldr	r0, [pc, #164]	; (80029d4 <HAL_GPIO_DeInit+0x1cc>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	400a      	ands	r2, r1
 8002934:	3302      	adds	r3, #2
 8002936:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2103      	movs	r1, #3
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	08d2      	lsrs	r2, r2, #3
 8002970:	4019      	ands	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2103      	movs	r1, #3
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	2101      	movs	r1, #1
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2103      	movs	r1, #3
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	f67f af2e 	bls.w	8002824 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40021400 	.word	0x40021400
 80029f0:	40021800 	.word	0x40021800
 80029f4:	40021c00 	.word	0x40021c00
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4013      	ands	r3, r2
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43d9      	mvns	r1, r3
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a60:	b08f      	sub	sp, #60	; 0x3c
 8002a62:	af0a      	add	r7, sp, #40	; 0x28
 8002a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e10f      	b.n	8002c90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f007 fdc4 	bl	800a618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 ffc8 	bl	8006a44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	687e      	ldr	r6, [r7, #4]
 8002abc:	466d      	mov	r5, sp
 8002abe:	f106 0410 	add.w	r4, r6, #16
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ad2:	1d33      	adds	r3, r6, #4
 8002ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f003 fea0 	bl	800681c <USB_CoreInit>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0d0      	b.n	8002c90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 ffb5 	bl	8006a64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e04a      	b.n	8002b96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	333d      	adds	r3, #61	; 0x3d
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	333c      	adds	r3, #60	; 0x3c
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	b298      	uxth	r0, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3344      	adds	r3, #68	; 0x44
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3340      	adds	r3, #64	; 0x40
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3348      	adds	r3, #72	; 0x48
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334c      	adds	r3, #76	; 0x4c
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3354      	adds	r3, #84	; 0x54
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3af      	bcc.n	8002b00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e044      	b.n	8002c30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3b5      	bcc.n	8002ba6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	687e      	ldr	r6, [r7, #4]
 8002c42:	466d      	mov	r5, sp
 8002c44:	f106 0410 	add.w	r4, r6, #16
 8002c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c58:	1d33      	adds	r3, r6, #4
 8002c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f003 ff4d 	bl	8006afc <USB_DevInit>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e00d      	b.n	8002c90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f005 f890 	bl	8007dae <USB_DevDisconnect>

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_Start+0x1c>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e020      	b.n	8002cf6 <HAL_PCD_Start+0x5e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d109      	bne.n	8002cd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d005      	beq.n	8002cd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fea1 	bl	8006a24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 f841 	bl	8007d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cfe:	b590      	push	{r4, r7, lr}
 8002d00:	b08d      	sub	sp, #52	; 0x34
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 f8f8 	bl	8007f0a <USB_GetMode>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 848a 	bne.w	8003636 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f005 f861 	bl	8007dee <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8480 	beq.w	8003634 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 f84e 	bl	8007dee <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d107      	bne.n	8002d6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f002 0202 	and.w	r2, r2, #2
 8002d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 f83c 	bl	8007dee <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d161      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0210 	bic.w	r2, r2, #16
 8002d8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	0c5b      	lsrs	r3, r3, #17
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d124      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d035      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6a38      	ldr	r0, [r7, #32]
 8002ddc:	f004 fe79 	bl	8007ad2 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dec:	441a      	add	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfe:	441a      	add	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
 8002e04:	e016      	b.n	8002e34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	0c5b      	lsrs	r3, r3, #17
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d110      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e18:	2208      	movs	r2, #8
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6a38      	ldr	r0, [r7, #32]
 8002e1e:	f004 fe58 	bl	8007ad2 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2e:	441a      	add	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0210 	orr.w	r2, r2, #16
 8002e42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 ffd0 	bl	8007dee <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e58:	f040 80a7 	bne.w	8002faa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 ffd4 	bl	8007e12 <USB_ReadDevAllOutEpInterrupt>
 8002e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e6c:	e099      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 808e 	beq.w	8002f96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fff6 	bl	8007e76 <USB_ReadDevOutEPInterrupt>
 8002e8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fec2 	bl	8003c34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2308      	movs	r3, #8
 8002eca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 ff98 	bl	8003e04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eea:	461a      	mov	r2, r3
 8002eec:	2310      	movs	r3, #16
 8002eee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d030      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d109      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f007 fc6d 	bl	800a824 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f56:	461a      	mov	r2, r3
 8002f58:	2302      	movs	r3, #2
 8002f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f72:	461a      	mov	r2, r3
 8002f74:	2320      	movs	r3, #32
 8002f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af62 	bne.w	8002e6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 ff1d 	bl	8007dee <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fbe:	f040 80db 	bne.w	8003178 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 ff3c 	bl	8007e44 <USB_ReadDevAllInEpInterrupt>
 8002fcc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fd2:	e0cd      	b.n	8003170 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80c2 	beq.w	8003164 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 ff60 	bl	8007eb0 <USB_ReadDevInEPInterrupt>
 8002ff0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d057      	beq.n	80030ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	2201      	movs	r2, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43db      	mvns	r3, r3
 8003016:	69f9      	ldr	r1, [r7, #28]
 8003018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800301c:	4013      	ands	r3, r2
 800301e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302c:	461a      	mov	r2, r3
 800302e:	2301      	movs	r3, #1
 8003030:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d132      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	334c      	adds	r3, #76	; 0x4c
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4403      	add	r3, r0
 800305a:	3348      	adds	r3, #72	; 0x48
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4419      	add	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4403      	add	r3, r0
 800306e:	334c      	adds	r3, #76	; 0x4c
 8003070:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d113      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x3a2>
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3354      	adds	r3, #84	; 0x54
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003098:	461a      	mov	r2, r3
 800309a:	2101      	movs	r1, #1
 800309c:	f004 ff64 	bl	8007f68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f007 fb37 	bl	800a71a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	2308      	movs	r3, #8
 80030c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030de:	461a      	mov	r2, r3
 80030e0:	2310      	movs	r3, #16
 80030e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fa:	461a      	mov	r2, r3
 80030fc:	2340      	movs	r3, #64	; 0x40
 80030fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800310a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310c:	6a38      	ldr	r0, [r7, #32]
 800310e:	f003 fe59 	bl	8006dc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3338      	adds	r3, #56	; 0x38
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	78db      	ldrb	r3, [r3, #3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d108      	bne.n	8003140 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	b2db      	uxtb	r3, r3
 8003138:	4619      	mov	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f007 fb84 	bl	800a848 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	461a      	mov	r2, r3
 800314e:	2302      	movs	r3, #2
 8003150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800315c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fcda 	bl	8003b18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	3301      	adds	r3, #1
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	f47f af2e 	bne.w	8002fd4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f004 fe36 	bl	8007dee <USB_ReadInterrupts>
 8003182:	4603      	mov	r3, r0
 8003184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318c:	d122      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d108      	bne.n	80031be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031b4:	2100      	movs	r1, #0
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fec0 	bl	8003f3c <HAL_PCDEx_LPM_Callback>
 80031bc:	e002      	b.n	80031c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f007 fb22 	bl	800a808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 fe08 	bl	8007dee <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e8:	d112      	bne.n	8003210 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f007 fade 	bl	800a7bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800320e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fdea 	bl	8007dee <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	f040 80b7 	bne.w	8003396 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2110      	movs	r1, #16
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fdbe 	bl	8006dc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	e046      	b.n	80032dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325a:	461a      	mov	r2, r3
 800325c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003260:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	0151      	lsls	r1, r2, #5
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	440a      	add	r2, r1
 8003278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800327c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003280:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003294:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c6:	0151      	lsls	r1, r2, #5
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	440a      	add	r2, r1
 80032cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	3301      	adds	r3, #1
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3b3      	bcc.n	800324e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f043 030b 	orr.w	r3, r3, #11
 8003316:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f043 030b 	orr.w	r3, r3, #11
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	e015      	b.n	800335c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003342:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003346:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003356:	f043 030b 	orr.w	r3, r3, #11
 800335a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800336e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003380:	461a      	mov	r2, r3
 8003382:	f004 fdf1 	bl	8007f68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fd27 	bl	8007dee <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033aa:	d124      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fdb7 	bl	8007f24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fd7e 	bl	8006ebc <USB_GetDevSpeed>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681c      	ldr	r4, [r3, #0]
 80033cc:	f001 f9e6 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80033d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4620      	mov	r0, r4
 80033dc:	f003 fa80 	bl	80068e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f007 f9c2 	bl	800a76a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 fcf7 	bl	8007dee <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d10a      	bne.n	8003420 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f007 f99f 	bl	800a74e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f002 0208 	and.w	r2, r2, #8
 800341e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fce2 	bl	8007dee <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d122      	bne.n	800347a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	e014      	b.n	8003470 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	b2db      	uxtb	r3, r3
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb26 	bl	8003ab6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	3301      	adds	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	429a      	cmp	r2, r3
 8003478:	d3e5      	bcc.n	8003446 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fcb5 	bl	8007dee <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348e:	d13b      	bne.n	8003508 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003490:	2301      	movs	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	e02b      	b.n	80034ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d115      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da12      	bge.n	80034e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	333f      	adds	r3, #63	; 0x3f
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fae7 	bl	8003ab6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3ce      	bcc.n	8003496 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f004 fc6e 	bl	8007dee <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351c:	d155      	bne.n	80035ca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351e:	2301      	movs	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e045      	b.n	80035b0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d12e      	bne.n	80035aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800354c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	da2b      	bge.n	80035aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800355e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003562:	429a      	cmp	r2, r3
 8003564:	d121      	bne.n	80035aa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a6:	6053      	str	r3, [r2, #4]
            break;
 80035a8:	e007      	b.n	80035ba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	3301      	adds	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d3b4      	bcc.n	8003524 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fc0d 	bl	8007dee <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d10a      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f007 f943 	bl	800a86c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fbf7 	bl	8007dee <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d115      	bne.n	8003636 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f007 f933 	bl	800a888 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e000      	b.n	8003636 <HAL_PCD_IRQHandler+0x938>
      return;
 8003634:	bf00      	nop
    }
  }
}
 8003636:	3734      	adds	r7, #52	; 0x34
 8003638:	46bd      	mov	sp, r7
 800363a:	bd90      	pop	{r4, r7, pc}

0800363c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_PCD_SetAddress+0x1a>
 8003652:	2302      	movs	r3, #2
 8003654:	e013      	b.n	800367e <HAL_PCD_SetAddress+0x42>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f004 fb58 	bl	8007d24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	4608      	mov	r0, r1
 8003690:	4611      	mov	r1, r2
 8003692:	461a      	mov	r2, r3
 8003694:	4603      	mov	r3, r0
 8003696:	70fb      	strb	r3, [r7, #3]
 8003698:	460b      	mov	r3, r1
 800369a:	803b      	strh	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da0f      	bge.n	80036cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	f003 020f 	and.w	r2, r3, #15
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	3338      	adds	r3, #56	; 0x38
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	705a      	strb	r2, [r3, #1]
 80036ca:	e00f      	b.n	80036ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 020f 	and.w	r2, r3, #15
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036f8:	883a      	ldrh	r2, [r7, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	78ba      	ldrb	r2, [r7, #2]
 8003702:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003716:	78bb      	ldrb	r3, [r7, #2]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d102      	bne.n	8003722 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_PCD_EP_Open+0xaa>
 800372c:	2302      	movs	r3, #2
 800372e:	e00e      	b.n	800374e <HAL_PCD_EP_Open+0xc8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68f9      	ldr	r1, [r7, #12]
 800373e:	4618      	mov	r0, r3
 8003740:	f003 fbe0 	bl	8006f04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800374c:	7afb      	ldrb	r3, [r7, #11]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003766:	2b00      	cmp	r3, #0
 8003768:	da0f      	bge.n	800378a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3338      	adds	r3, #56	; 0x38
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	705a      	strb	r2, [r3, #1]
 8003788:	e00f      	b.n	80037aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f003 020f 	and.w	r2, r3, #15
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	3304      	adds	r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_PCD_EP_Close+0x6e>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e00e      	b.n	80037e2 <HAL_PCD_EP_Close+0x8c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68f9      	ldr	r1, [r7, #12]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fc1c 	bl	8007010 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	460b      	mov	r3, r1
 80037f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	7afb      	ldrb	r3, [r7, #11]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800382c:	7afb      	ldrb	r3, [r7, #11]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	b2da      	uxtb	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d102      	bne.n	8003846 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	f003 fefb 	bl	8007658 <USB_EP0StartXfer>
 8003862:	e008      	b.n	8003876 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	f003 fca9 	bl	80071c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 020f 	and.w	r2, r3, #15
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	460b      	mov	r3, r1
 80038bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	3338      	adds	r3, #56	; 0x38
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2201      	movs	r2, #1
 80038ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	f003 fe9a 	bl	8007658 <USB_EP0StartXfer>
 8003924:	e008      	b.n	8003938 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	f003 fc48 	bl	80071c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d901      	bls.n	8003960 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e050      	b.n	8003a02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003964:	2b00      	cmp	r3, #0
 8003966:	da0f      	bge.n	8003988 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3338      	adds	r3, #56	; 0x38
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	705a      	strb	r2, [r3, #1]
 8003986:	e00d      	b.n	80039a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_PCD_EP_SetStall+0x82>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e01e      	b.n	8003a02 <HAL_PCD_EP_SetStall+0xc0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f004 f8d4 	bl	8007b80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	b2d9      	uxtb	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f2:	461a      	mov	r2, r3
 80039f4:	f004 fab8 	bl	8007f68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d901      	bls.n	8003a28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e042      	b.n	8003aae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da0f      	bge.n	8003a50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3338      	adds	r3, #56	; 0x38
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	705a      	strb	r2, [r3, #1]
 8003a4e:	e00f      	b.n	8003a70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_PCD_EP_ClrStall+0x86>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e00e      	b.n	8003aae <HAL_PCD_EP_ClrStall+0xa4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 f8db 	bl	8007c5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	da0c      	bge.n	8003ae4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	3338      	adds	r3, #56	; 0x38
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	3304      	adds	r3, #4
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e00c      	b.n	8003afe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	3304      	adds	r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f003 fefe 	bl	8007906 <USB_EPStopXfer>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3338      	adds	r3, #56	; 0x38
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d901      	bls.n	8003b50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e06c      	b.n	8003c2a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d902      	bls.n	8003b6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3303      	adds	r3, #3
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b74:	e02b      	b.n	8003bce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d902      	bls.n	8003b92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3303      	adds	r3, #3
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6919      	ldr	r1, [r3, #16]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4603      	mov	r3, r0
 8003bb0:	6978      	ldr	r0, [r7, #20]
 8003bb2:	f003 ff51 	bl	8007a58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	441a      	add	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d809      	bhi.n	8003bf8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d203      	bcs.n	8003bf8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1be      	bne.n	8003b76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d811      	bhi.n	8003c28 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	6939      	ldr	r1, [r7, #16]
 8003c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c24:	4013      	ands	r3, r2
 8003c26:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	333c      	adds	r3, #60	; 0x3c
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d17b      	bne.n	8003d62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4a61      	ldr	r2, [pc, #388]	; (8003dfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	f240 80b9 	bls.w	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80b3 	beq.w	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	461a      	mov	r2, r3
 8003c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9c:	6093      	str	r3, [r2, #8]
 8003c9e:	e0a7      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2320      	movs	r3, #32
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	e098      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 8093 	bne.w	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4a4b      	ldr	r2, [pc, #300]	; (8003dfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d90f      	bls.n	8003cf2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	e07e      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	0159      	lsls	r1, r3, #5
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	440b      	add	r3, r1
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1e:	1ad2      	subs	r2, r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d114      	bne.n	8003d54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2101      	movs	r1, #1
 8003d40:	f004 f912 	bl	8007f68 <USB_EP0_OutStart>
 8003d44:	e006      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	441a      	add	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f006 fcc2 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
 8003d60:	e046      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d124      	bne.n	8003db4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	461a      	mov	r2, r3
 8003d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d86:	6093      	str	r3, [r2, #8]
 8003d88:	e032      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da0:	461a      	mov	r2, r3
 8003da2:	2320      	movs	r3, #32
 8003da4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f006 fc99 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
 8003db2:	e01d      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d114      	bne.n	8003de4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	f004 f8c2 	bl	8007f68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f006 fc7a 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	4f54300a 	.word	0x4f54300a
 8003e00:	4f54310a 	.word	0x4f54310a

08003e04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	333c      	adds	r3, #60	; 0x3c
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d90e      	bls.n	8003e58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	461a      	mov	r2, r3
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f006 fc31 	bl	800a6c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d90c      	bls.n	8003e80 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d108      	bne.n	8003e80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f004 f874 	bl	8007f68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	4f54300a 	.word	0x4f54300a

08003e90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d107      	bne.n	8003ebe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eae:	883b      	ldrh	r3, [r7, #0]
 8003eb0:	0419      	lsls	r1, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
 8003ebc:	e028      	b.n	8003f10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4413      	add	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e00d      	b.n	8003eee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	3340      	adds	r3, #64	; 0x40
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	3301      	adds	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3ec      	bcc.n	8003ed2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ef8:	883b      	ldrh	r3, [r7, #0]
 8003efa:	0418      	lsls	r0, r3, #16
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	4302      	orrs	r2, r0
 8003f08:	3340      	adds	r3, #64	; 0x40
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e267      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d00c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b85      	ldr	r3, [pc, #532]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d112      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b7e      	ldr	r3, [pc, #504]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05b      	beq.n	800405c <HAL_RCC_OscConfig+0x108>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d157      	bne.n	800405c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e242      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x74>
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a75      	ldr	r2, [pc, #468]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b70      	ldr	r3, [pc, #448]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6f      	ldr	r2, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6c      	ldr	r2, [pc, #432]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fec:	4b69      	ldr	r3, [pc, #420]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a68      	ldr	r2, [pc, #416]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a65      	ldr	r2, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd fc98 	bl	8001940 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fd fc94 	bl	8001940 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e207      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xc0>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd fc84 	bl	8001940 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7fd fc80 	bl	8001940 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1f3      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b51      	ldr	r3, [pc, #324]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0xe8>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11c      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b44      	ldr	r3, [pc, #272]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1c7      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4937      	ldr	r1, [pc, #220]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	e03a      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x244>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd fc39 	bl	8001940 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d2:	f7fd fc35 	bl	8001940 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1a8      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b28      	ldr	r3, [pc, #160]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	e015      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_OscConfig+0x244>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd fc18 	bl	8001940 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fd fc14 	bl	8001940 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e187      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d036      	beq.n	80041ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_RCC_OscConfig+0x248>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd fbf8 	bl	8001940 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004154:	f7fd fbf4 	bl	8001940 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e167      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x200>
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_OscConfig+0x248>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fd fbe1 	bl	8001940 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	e00e      	b.n	80041a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004182:	f7fd fbdd 	bl	8001940 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d907      	bls.n	80041a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e150      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 8004194:	40023800 	.word	0x40023800
 8004198:	42470000 	.word	0x42470000
 800419c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ea      	bne.n	8004182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8097 	beq.w	80042e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b7d      	ldr	r3, [pc, #500]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a7c      	ldr	r2, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b77      	ldr	r3, [pc, #476]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a73      	ldr	r2, [pc, #460]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fd fb9d 	bl	8001940 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fd fb99 	bl	8001940 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e10c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x2ea>
 8004230:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a63      	ldr	r2, [pc, #396]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	e01c      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b05      	cmp	r3, #5
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x30c>
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 8004260:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a57      	ldr	r2, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a54      	ldr	r2, [pc, #336]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd fb5e 	bl	8001940 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd fb5a 	bl	8001940 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0cb      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <HAL_RCC_OscConfig+0x334>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fd fb48 	bl	8001940 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fd fb44 	bl	8001940 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0b5      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ca:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ee      	bne.n	80042b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a1 	beq.w	8004434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d05c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d141      	bne.n	800438a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fd fb18 	bl	8001940 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fd fb14 	bl	8001940 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e087      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	019b      	lsls	r3, r3, #6
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	3b01      	subs	r3, #1
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	491b      	ldr	r1, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fd faed 	bl	8001940 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436a:	f7fd fae9 	bl	8001940 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e05c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x416>
 8004388:	e054      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd fad6 	bl	8001940 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd fad2 	bl	8001940 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e045      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x444>
 80043b6:	e03d      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e038      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x4ec>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d028      	beq.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d121      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d11a      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d107      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fd fa04 	bl	8001940 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd fa00 	bl	8001940 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	490a      	ldr	r1, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd f966 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	0800b694 	.word	0x0800b694
 8004608:	20000000 	.word	0x20000000
 800460c:	20000064 	.word	0x20000064

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004614:	b090      	sub	sp, #64	; 0x40
 8004616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004620:	2300      	movs	r3, #0
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d00d      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x40>
 8004634:	2b08      	cmp	r3, #8
 8004636:	f200 80a2 	bhi.w	800477e <HAL_RCC_GetSysClockFreq+0x16e>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 800463e:	2b04      	cmp	r3, #4
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x3a>
 8004642:	e09c      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b53      	ldr	r3, [pc, #332]	; (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 8004646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004648:	e09c      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464a:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800464e:	e099      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004650:	4b4f      	ldr	r3, [pc, #316]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465a:	4b4d      	ldr	r3, [pc, #308]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d027      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004666:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	2200      	movs	r2, #0
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	627a      	str	r2, [r7, #36]	; 0x24
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004678:	2100      	movs	r1, #0
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	fb03 f201 	mul.w	r2, r3, r1
 8004680:	2300      	movs	r3, #0
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	4413      	add	r3, r2
 8004688:	4a43      	ldr	r2, [pc, #268]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800468a:	fba0 2102 	umull	r2, r1, r0, r2
 800468e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004690:	62ba      	str	r2, [r7, #40]	; 0x28
 8004692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004694:	4413      	add	r3, r2
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469a:	2200      	movs	r2, #0
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	61fa      	str	r2, [r7, #28]
 80046a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046a8:	f7fb fde2 	bl	8000270 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	e055      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b6:	4b36      	ldr	r3, [pc, #216]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	2200      	movs	r2, #0
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	617a      	str	r2, [r7, #20]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046c8:	f04f 0b00 	mov.w	fp, #0
 80046cc:	4652      	mov	r2, sl
 80046ce:	465b      	mov	r3, fp
 80046d0:	f04f 0000 	mov.w	r0, #0
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	0159      	lsls	r1, r3, #5
 80046da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046de:	0150      	lsls	r0, r2, #5
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	ebb2 080a 	subs.w	r8, r2, sl
 80046e8:	eb63 090b 	sbc.w	r9, r3, fp
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046f8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046fc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004700:	ebb2 0408 	subs.w	r4, r2, r8
 8004704:	eb63 0509 	sbc.w	r5, r3, r9
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00eb      	lsls	r3, r5, #3
 8004712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004716:	00e2      	lsls	r2, r4, #3
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	eb14 030a 	adds.w	r3, r4, sl
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	eb45 030b 	adc.w	r3, r5, fp
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004734:	4629      	mov	r1, r5
 8004736:	028b      	lsls	r3, r1, #10
 8004738:	4620      	mov	r0, r4
 800473a:	4629      	mov	r1, r5
 800473c:	4604      	mov	r4, r0
 800473e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004742:	4601      	mov	r1, r0
 8004744:	028a      	lsls	r2, r1, #10
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474c:	2200      	movs	r2, #0
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	60fa      	str	r2, [r7, #12]
 8004752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004756:	f7fb fd8b 	bl	8000270 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4613      	mov	r3, r2
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	3301      	adds	r3, #1
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800477c:	e002      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 8004780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004786:	4618      	mov	r0, r3
 8004788:	3740      	adds	r7, #64	; 0x40
 800478a:	46bd      	mov	sp, r7
 800478c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400
 8004798:	017d7840 	.word	0x017d7840

0800479c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b02      	ldr	r3, [pc, #8]	; (80047ac <HAL_RCC_GetHCLKFreq+0x10>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	20000000 	.word	0x20000000

080047b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047b4:	f7ff fff2 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	0800b6a4 	.word	0x0800b6a4

080047d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047dc:	f7ff ffde 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	; (80047fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0800b6a4 	.word	0x0800b6a4

08004800 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e041      	b.n	8004896 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc fce8 	bl	80011fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 facc 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_TIM_OC_Start_IT+0x28>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e022      	b.n	800490e <HAL_TIM_OC_Start_IT+0x6e>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d109      	bne.n	80048e2 <HAL_TIM_OC_Start_IT+0x42>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e015      	b.n	800490e <HAL_TIM_OC_Start_IT+0x6e>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d109      	bne.n	80048fc <HAL_TIM_OC_Start_IT+0x5c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e008      	b.n	800490e <HAL_TIM_OC_Start_IT+0x6e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0c7      	b.n	8004aa6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <HAL_TIM_OC_Start_IT+0x86>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	e013      	b.n	800494e <HAL_TIM_OC_Start_IT+0xae>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d104      	bne.n	8004936 <HAL_TIM_OC_Start_IT+0x96>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004934:	e00b      	b.n	800494e <HAL_TIM_OC_Start_IT+0xae>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d104      	bne.n	8004946 <HAL_TIM_OC_Start_IT+0xa6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	e003      	b.n	800494e <HAL_TIM_OC_Start_IT+0xae>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b0c      	cmp	r3, #12
 8004952:	d841      	bhi.n	80049d8 <HAL_TIM_OC_Start_IT+0x138>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <HAL_TIM_OC_Start_IT+0xbc>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004991 	.word	0x08004991
 8004960:	080049d9 	.word	0x080049d9
 8004964:	080049d9 	.word	0x080049d9
 8004968:	080049d9 	.word	0x080049d9
 800496c:	080049a3 	.word	0x080049a3
 8004970:	080049d9 	.word	0x080049d9
 8004974:	080049d9 	.word	0x080049d9
 8004978:	080049d9 	.word	0x080049d9
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049d9 	.word	0x080049d9
 8004984:	080049d9 	.word	0x080049d9
 8004988:	080049d9 	.word	0x080049d9
 800498c:	080049c7 	.word	0x080049c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0202 	orr.w	r2, r2, #2
 800499e:	60da      	str	r2, [r3, #12]
      break;
 80049a0:	e01d      	b.n	80049de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0204 	orr.w	r2, r2, #4
 80049b0:	60da      	str	r2, [r3, #12]
      break;
 80049b2:	e014      	b.n	80049de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0208 	orr.w	r2, r2, #8
 80049c2:	60da      	str	r2, [r3, #12]
      break;
 80049c4:	e00b      	b.n	80049de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0210 	orr.w	r2, r2, #16
 80049d4:	60da      	str	r2, [r3, #12]
      break;
 80049d6:	e002      	b.n	80049de <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      break;
 80049dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d15f      	bne.n	8004aa4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2201      	movs	r2, #1
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fc3f 	bl	8005270 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2e      	ldr	r2, [pc, #184]	; (8004ab0 <HAL_TIM_OC_Start_IT+0x210>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_TIM_OC_Start_IT+0x166>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <HAL_TIM_OC_Start_IT+0x214>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_OC_Start_IT+0x16a>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_TIM_OC_Start_IT+0x16c>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <HAL_TIM_OC_Start_IT+0x210>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d01d      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <HAL_TIM_OC_Start_IT+0x218>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_TIM_OC_Start_IT+0x21c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ac0 <HAL_TIM_OC_Start_IT+0x220>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_TIM_OC_Start_IT+0x214>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <HAL_TIM_OC_Start_IT+0x224>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_OC_Start_IT+0x1d0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <HAL_TIM_OC_Start_IT+0x228>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d111      	bne.n	8004a94 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d010      	beq.n	8004aa4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a92:	e007      	b.n	8004aa4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40001800 	.word	0x40001800

08004acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0202 	mvn.w	r2, #2
 8004af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f949 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc fb62 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f94b 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0204 	mvn.w	r2, #4
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f91f 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc fb38 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f921 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0208 	mvn.w	r2, #8
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8f5 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc fb0e 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8f7 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0210 	mvn.w	r2, #16
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8cb 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fae4 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8cd 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8a2 	bl	8004d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb27 	bl	80052ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f891 	bl	8004dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0220 	mvn.w	r2, #32
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 faf2 	bl	80052b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_OC_ConfigChannel+0x1e>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e048      	b.n	8004d8c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d839      	bhi.n	8004d7c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d7d 	.word	0x08004d7d
 8004d18:	08004d7d 	.word	0x08004d7d
 8004d1c:	08004d7d 	.word	0x08004d7d
 8004d20:	08004d53 	.word	0x08004d53
 8004d24:	08004d7d 	.word	0x08004d7d
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004d61 	.word	0x08004d61
 8004d34:	08004d7d 	.word	0x08004d7d
 8004d38:	08004d7d 	.word	0x08004d7d
 8004d3c:	08004d7d 	.word	0x08004d7d
 8004d40:	08004d6f 	.word	0x08004d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f8e4 	bl	8004f18 <TIM_OC1_SetConfig>
      break;
 8004d50:	e017      	b.n	8004d82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f94d 	bl	8004ff8 <TIM_OC2_SetConfig>
      break;
 8004d5e:	e010      	b.n	8004d82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f9ba 	bl	80050e0 <TIM_OC3_SetConfig>
      break;
 8004d6c:	e009      	b.n	8004d82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fa27 	bl	80051c8 <TIM_OC4_SetConfig>
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3f      	ldr	r2, [pc, #252]	; (8004eec <TIM_Base_SetConfig+0x110>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3c      	ldr	r2, [pc, #240]	; (8004ef0 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	; (8004ef4 <TIM_Base_SetConfig+0x118>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3a      	ldr	r2, [pc, #232]	; (8004ef8 <TIM_Base_SetConfig+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a39      	ldr	r2, [pc, #228]	; (8004efc <TIM_Base_SetConfig+0x120>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2e      	ldr	r2, [pc, #184]	; (8004eec <TIM_Base_SetConfig+0x110>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d02b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d027      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <TIM_Base_SetConfig+0x114>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d023      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <TIM_Base_SetConfig+0x118>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <TIM_Base_SetConfig+0x11c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a28      	ldr	r2, [pc, #160]	; (8004efc <TIM_Base_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d017      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <TIM_Base_SetConfig+0x124>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <TIM_Base_SetConfig+0x128>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <TIM_Base_SetConfig+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <TIM_Base_SetConfig+0x138>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d108      	bne.n	8004ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <TIM_Base_SetConfig+0x110>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0xf8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <TIM_Base_SetConfig+0x120>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	40001800 	.word	0x40001800
 8004f10:	40001c00 	.word	0x40001c00
 8004f14:	40002000 	.word	0x40002000

08004f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 0302 	bic.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC1_SetConfig+0x64>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10c      	bne.n	8004f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0308 	bic.w	r3, r3, #8
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC1_SetConfig+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d111      	bne.n	8004fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0210 	bic.w	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <TIM_OC2_SetConfig+0xe0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC2_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a20      	ldr	r2, [pc, #128]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <TIM_OC2_SetConfig+0xe0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0x94>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40010400 	.word	0x40010400

080050e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_OC3_SetConfig+0xe0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC3_SetConfig+0x66>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_OC3_SetConfig+0xe4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10d      	bne.n	8005162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800514c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <TIM_OC3_SetConfig+0xe0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC3_SetConfig+0x92>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <TIM_OC3_SetConfig+0xe4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40010400 	.word	0x40010400

080051c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a11      	ldr	r2, [pc, #68]	; (8005268 <TIM_OC4_SetConfig+0xa0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC4_SetConfig+0x68>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a10      	ldr	r2, [pc, #64]	; (800526c <TIM_OC4_SetConfig+0xa4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d109      	bne.n	8005244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400

08005270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e03f      	b.n	800536e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc f9f8 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 ffff 	bl	8006324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e021      	b.n	80053cc <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2224      	movs	r2, #36	; 0x24
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800539e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fc fa2d 	bl	8001800 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d17c      	bne.n	80054ee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_UART_Transmit+0x2c>
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e075      	b.n	80054f0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_UART_Transmit+0x3e>
 800540e:	2302      	movs	r3, #2
 8005410:	e06e      	b.n	80054f0 <HAL_UART_Transmit+0x11c>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2221      	movs	r2, #33	; 0x21
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005428:	f7fc fa8a 	bl	8001940 <HAL_GetTick>
 800542c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d108      	bne.n	8005456 <HAL_UART_Transmit+0x82>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	e003      	b.n	800545e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005466:	e02a      	b.n	80054be <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fc4c 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e036      	b.n	80054f0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005496:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	3302      	adds	r3, #2
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e007      	b.n	80054b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3301      	adds	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1cf      	bne.n	8005468 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2140      	movs	r1, #64	; 0x40
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fc1c 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e006      	b.n	80054f0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b20      	cmp	r3, #32
 8005510:	d11d      	bne.n	800554e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_UART_Receive_IT+0x26>
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e016      	b.n	8005550 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_UART_Receive_IT+0x38>
 800552c:	2302      	movs	r3, #2
 800552e:	e00f      	b.n	8005550 <HAL_UART_Receive_IT+0x58>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	461a      	mov	r2, r3
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fc51 	bl	8005dec <UART_Start_Receive_IT>
 800554a:	4603      	mov	r3, r0
 800554c:	e000      	b.n	8005550 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b20      	cmp	r3, #32
 8005570:	d11d      	bne.n	80055ae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_UART_Receive_DMA+0x26>
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e016      	b.n	80055b0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_UART_Receive_DMA+0x38>
 800558c:	2302      	movs	r3, #2
 800558e:	e00f      	b.n	80055b0 <HAL_UART_Receive_DMA+0x58>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 fc5f 	bl	8005e68 <UART_Start_Receive_DMA>
 80055aa:	4603      	mov	r3, r0
 80055ac:	e000      	b.n	80055b0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b0ba      	sub	sp, #232	; 0xe8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fdc8 	bl	80061ac <UART_Receive_IT>
      return;
 800561c:	e256      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800561e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80de 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005638:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80d1 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
 8005672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0202 	orr.w	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d011      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f043 0208 	orr.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 81ed 	beq.w	8005ac2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fd53 	bl	80061ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <HAL_UART_IRQHandler+0x17a>
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04f      	beq.n	80057d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fc5d 	bl	8005ff2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d141      	bne.n	80057ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800575c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800577e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800578a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1d9      	bne.n	8005746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	4a7d      	ldr	r2, [pc, #500]	; (8005994 <HAL_UART_IRQHandler+0x3dc>)
 80057a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc fc0c 	bl	8001fc4 <HAL_DMA_Abort_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	e00e      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f998 	bl	8005af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e00a      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f994 	bl	8005af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e006      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f990 	bl	8005af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057de:	e170      	b.n	8005ac2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	bf00      	nop
    return;
 80057e2:	e16e      	b.n	8005ac2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 814a 	bne.w	8005a82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8143 	beq.w	8005a82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 813c 	beq.w	8005a82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	f040 80b4 	bne.w	8005998 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800583c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8140 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800584a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800584e:	429a      	cmp	r2, r3
 8005850:	f080 8139 	bcs.w	8005ac6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800585a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005866:	f000 8088 	beq.w	800597a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1d9      	bne.n	800586a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e1      	bne.n	80058b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005916:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800591c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594a:	f023 0310 	bic.w	r3, r3, #16
 800594e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800595c:	65ba      	str	r2, [r7, #88]	; 0x58
 800595e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800596a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	4618      	mov	r0, r3
 8005976:	f7fc fab5 	bl	8001ee4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005982:	b29b      	uxth	r3, r3
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	b29b      	uxth	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8bd 	bl	8005b0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005990:	e099      	b.n	8005ac6 <HAL_UART_IRQHandler+0x50e>
 8005992:	bf00      	nop
 8005994:	080060b7 	.word	0x080060b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 808b 	beq.w	8005aca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8086 	beq.w	8005aca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059e2:	647a      	str	r2, [r7, #68]	; 0x44
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e3      	bne.n	80059be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	623b      	str	r3, [r7, #32]
   return(result);
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e3      	bne.n	80059f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0310 	bic.w	r3, r3, #16
 8005a52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a60:	61fa      	str	r2, [r7, #28]
 8005a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69b9      	ldr	r1, [r7, #24]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e3      	bne.n	8005a3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f845 	bl	8005b0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a80:	e023      	b.n	8005aca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x4ea>
 8005a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fb1f 	bl	80060de <UART_Transmit_IT>
    return;
 8005aa0:	e014      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <HAL_UART_IRQHandler+0x514>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb5e 	bl	800617c <UART_EndTransmit_IT>
    return;
 8005ac0:	e004      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
    return;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
      return;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
      return;
 8005aca:	bf00      	nop
  }
}
 8005acc:	37e8      	adds	r7, #232	; 0xe8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b09c      	sub	sp, #112	; 0x70
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d172      	bne.n	8005c22 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	2200      	movs	r2, #0
 8005b40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b62:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b96:	647a      	str	r2, [r7, #68]	; 0x44
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e5      	bne.n	8005b76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3314      	adds	r3, #20
 8005bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bca:	633a      	str	r2, [r7, #48]	; 0x30
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e5      	bne.n	8005baa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d119      	bne.n	8005c22 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d106      	bne.n	8005c38 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c32:	f7ff ff6a 	bl	8005b0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c36:	e002      	b.n	8005c3e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005c38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c3a:	f7fb fd3b 	bl	80016b4 <HAL_UART_RxCpltCallback>
}
 8005c3e:	bf00      	nop
 8005c40:	3770      	adds	r7, #112	; 0x70
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d108      	bne.n	8005c6e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff ff4f 	bl	8005b0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c6c:	e002      	b.n	8005c74 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff ff39 	bl	8005ae6 <HAL_UART_RxHalfCpltCallback>
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c98:	2b80      	cmp	r3, #128	; 0x80
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b21      	cmp	r3, #33	; 0x21
 8005cae:	d108      	bne.n	8005cc2 <UART_DMAError+0x46>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	f000 f971 	bl	8005fa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b22      	cmp	r3, #34	; 0x22
 8005ce2:	d108      	bne.n	8005cf6 <UART_DMAError+0x7a>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005cf0:	68b8      	ldr	r0, [r7, #8]
 8005cf2:	f000 f97e 	bl	8005ff2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f043 0210 	orr.w	r2, r3, #16
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d02:	68b8      	ldr	r0, [r7, #8]
 8005d04:	f7ff fef8 	bl	8005af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b090      	sub	sp, #64	; 0x40
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	e050      	b.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d04c      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d30:	f7fb fe06 	bl	8001940 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d241      	bcs.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d60:	637a      	str	r2, [r7, #52]	; 0x34
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	613b      	str	r3, [r7, #16]
   return(result);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d94:	623a      	str	r2, [r7, #32]
 8005d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	69f9      	ldr	r1, [r7, #28]
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e00f      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d09f      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3740      	adds	r7, #64	; 0x40
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2222      	movs	r2, #34	; 0x22
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0220 	orr.w	r2, r2, #32
 8005e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
	...

08005e68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b098      	sub	sp, #96	; 0x60
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2222      	movs	r2, #34	; 0x22
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	4a40      	ldr	r2, [pc, #256]	; (8005f98 <UART_Start_Receive_DMA+0x130>)
 8005e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	; (8005f9c <UART_Start_Receive_DMA+0x134>)
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	4a3e      	ldr	r2, [pc, #248]	; (8005fa0 <UART_Start_Receive_DMA+0x138>)
 8005ea6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	2200      	movs	r2, #0
 8005eae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f7fb ffb4 	bl	8001e34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d019      	beq.n	8005f26 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	657b      	str	r3, [r7, #84]	; 0x54
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f46:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e5      	bne.n	8005f26 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f70:	653b      	str	r3, [r7, #80]	; 0x50
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6a39      	ldr	r1, [r7, #32]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3760      	adds	r7, #96	; 0x60
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08005b21 	.word	0x08005b21
 8005f9c:	08005c47 	.word	0x08005c47
 8005fa0:	08005c7d 	.word	0x08005c7d

08005fa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	; 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	61ba      	str	r2, [r7, #24]
 8005fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005fe8:	bf00      	nop
 8005fea:	3724      	adds	r7, #36	; 0x24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b095      	sub	sp, #84	; 0x54
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	330c      	adds	r3, #12
 8006018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800601a:	643a      	str	r2, [r7, #64]	; 0x40
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	61fb      	str	r3, [r7, #28]
   return(result);
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	64bb      	str	r3, [r7, #72]	; 0x48
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800604e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	2b01      	cmp	r3, #1
 8006068:	d119      	bne.n	800609e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60bb      	str	r3, [r7, #8]
   return(result);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	647b      	str	r3, [r7, #68]	; 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800608a:	61ba      	str	r2, [r7, #24]
 800608c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	613b      	str	r3, [r7, #16]
   return(result);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060ac:	bf00      	nop
 80060ae:	3754      	adds	r7, #84	; 0x54
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fd11 	bl	8005af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b21      	cmp	r3, #33	; 0x21
 80060f0:	d13e      	bne.n	8006170 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d114      	bne.n	8006126 <UART_Transmit_IT+0x48>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d110      	bne.n	8006126 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006118:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	1c9a      	adds	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	621a      	str	r2, [r3, #32]
 8006124:	e008      	b.n	8006138 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6211      	str	r1, [r2, #32]
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29b      	uxth	r3, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	4619      	mov	r1, r3
 8006146:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10f      	bne.n	800616c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800615a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e000      	b.n	8006172 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006170:	2302      	movs	r3, #2
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr

0800617c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006192:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fc99 	bl	8005ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	; 0x30
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b22      	cmp	r3, #34	; 0x22
 80061be:	f040 80ab 	bne.w	8006318 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d117      	bne.n	80061fc <UART_Receive_IT+0x50>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d113      	bne.n	80061fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	1c9a      	adds	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28
 80061fa:	e026      	b.n	800624a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	d007      	beq.n	8006220 <UART_Receive_IT+0x74>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <UART_Receive_IT+0x82>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e008      	b.n	8006240 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623a:	b2da      	uxtb	r2, r3
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29b      	uxth	r3, r3
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4619      	mov	r1, r3
 8006258:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800625a:	2b00      	cmp	r3, #0
 800625c:	d15a      	bne.n	8006314 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0220 	bic.w	r2, r2, #32
 800626c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800627c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695a      	ldr	r2, [r3, #20]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	2b01      	cmp	r3, #1
 800629c:	d135      	bne.n	800630a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	613b      	str	r3, [r7, #16]
   return(result);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 0310 	bic.w	r3, r3, #16
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c4:	623a      	str	r2, [r7, #32]
 80062c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	6a3a      	ldr	r2, [r7, #32]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e5      	bne.n	80062a4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d10a      	bne.n	80062fc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fc01 	bl	8005b0a <HAL_UARTEx_RxEventCallback>
 8006308:	e002      	b.n	8006310 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb f9d2 	bl	80016b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e002      	b.n	800631a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	; 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006328:	b0c0      	sub	sp, #256	; 0x100
 800632a:	af00      	add	r7, sp, #0
 800632c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	68d9      	ldr	r1, [r3, #12]
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	ea40 0301 	orr.w	r3, r0, r1
 800634c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	431a      	orrs	r2, r3
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	431a      	orrs	r2, r3
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800637c:	f021 010c 	bic.w	r1, r1, #12
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800638a:	430b      	orrs	r3, r1
 800638c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639e:	6999      	ldr	r1, [r3, #24]
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	ea40 0301 	orr.w	r3, r0, r1
 80063aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b91      	ldr	r3, [pc, #580]	; (80065f8 <UART_SetConfig+0x2d4>)
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d005      	beq.n	80063c4 <UART_SetConfig+0xa0>
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4b8f      	ldr	r3, [pc, #572]	; (80065fc <UART_SetConfig+0x2d8>)
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d104      	bne.n	80063ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fe fa08 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 80063c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80063cc:	e003      	b.n	80063d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ce:	f7fe f9ef 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 80063d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e0:	f040 8110 	bne.w	8006604 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063f6:	4622      	mov	r2, r4
 80063f8:	462b      	mov	r3, r5
 80063fa:	1891      	adds	r1, r2, r2
 80063fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80063fe:	415b      	adcs	r3, r3
 8006400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	4604      	mov	r4, r0
 800640c:	eb12 0804 	adds.w	r8, r2, r4
 8006410:	460c      	mov	r4, r1
 8006412:	eb43 0904 	adc.w	r9, r3, r4
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800642a:	4690      	mov	r8, r2
 800642c:	4699      	mov	r9, r3
 800642e:	4603      	mov	r3, r0
 8006430:	eb18 0303 	adds.w	r3, r8, r3
 8006434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006438:	460b      	mov	r3, r1
 800643a:	eb49 0303 	adc.w	r3, r9, r3
 800643e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800644e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006456:	460b      	mov	r3, r1
 8006458:	18db      	adds	r3, r3, r3
 800645a:	653b      	str	r3, [r7, #80]	; 0x50
 800645c:	4613      	mov	r3, r2
 800645e:	eb42 0303 	adc.w	r3, r2, r3
 8006462:	657b      	str	r3, [r7, #84]	; 0x54
 8006464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800646c:	f7f9 ff00 	bl	8000270 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b62      	ldr	r3, [pc, #392]	; (8006600 <UART_SetConfig+0x2dc>)
 8006476:	fba3 2302 	umull	r2, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	011c      	lsls	r4, r3, #4
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800648c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	1891      	adds	r1, r2, r2
 8006496:	64b9      	str	r1, [r7, #72]	; 0x48
 8006498:	415b      	adcs	r3, r3
 800649a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800649c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064a0:	4645      	mov	r5, r8
 80064a2:	eb12 0a05 	adds.w	sl, r2, r5
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	460d      	mov	r5, r1
 80064ac:	eb43 0b05 	adc.w	fp, r3, r5
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064c4:	4692      	mov	sl, r2
 80064c6:	469b      	mov	fp, r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	eb1a 0303 	adds.w	r3, sl, r3
 80064ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d2:	460b      	mov	r3, r1
 80064d4:	eb4b 0303 	adc.w	r3, fp, r3
 80064d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064f0:	460b      	mov	r3, r1
 80064f2:	18db      	adds	r3, r3, r3
 80064f4:	643b      	str	r3, [r7, #64]	; 0x40
 80064f6:	4613      	mov	r3, r2
 80064f8:	eb42 0303 	adc.w	r3, r2, r3
 80064fc:	647b      	str	r3, [r7, #68]	; 0x44
 80064fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006502:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006506:	f7f9 feb3 	bl	8000270 <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4611      	mov	r1, r2
 8006510:	4b3b      	ldr	r3, [pc, #236]	; (8006600 <UART_SetConfig+0x2dc>)
 8006512:	fba3 2301 	umull	r2, r3, r3, r1
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	2264      	movs	r2, #100	; 0x64
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	1acb      	subs	r3, r1, r3
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006526:	4b36      	ldr	r3, [pc, #216]	; (8006600 <UART_SetConfig+0x2dc>)
 8006528:	fba3 2302 	umull	r2, r3, r3, r2
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006534:	441c      	add	r4, r3
 8006536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800653a:	2200      	movs	r2, #0
 800653c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006540:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006544:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006548:	4642      	mov	r2, r8
 800654a:	464b      	mov	r3, r9
 800654c:	1891      	adds	r1, r2, r2
 800654e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006550:	415b      	adcs	r3, r3
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006558:	4641      	mov	r1, r8
 800655a:	1851      	adds	r1, r2, r1
 800655c:	6339      	str	r1, [r7, #48]	; 0x30
 800655e:	4649      	mov	r1, r9
 8006560:	414b      	adcs	r3, r1
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006570:	4659      	mov	r1, fp
 8006572:	00cb      	lsls	r3, r1, #3
 8006574:	4655      	mov	r5, sl
 8006576:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800657a:	4651      	mov	r1, sl
 800657c:	00ca      	lsls	r2, r1, #3
 800657e:	4610      	mov	r0, r2
 8006580:	4619      	mov	r1, r3
 8006582:	4603      	mov	r3, r0
 8006584:	4642      	mov	r2, r8
 8006586:	189b      	adds	r3, r3, r2
 8006588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800658c:	464b      	mov	r3, r9
 800658e:	460a      	mov	r2, r1
 8006590:	eb42 0303 	adc.w	r3, r2, r3
 8006594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065ac:	460b      	mov	r3, r1
 80065ae:	18db      	adds	r3, r3, r3
 80065b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b2:	4613      	mov	r3, r2
 80065b4:	eb42 0303 	adc.w	r3, r2, r3
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065c2:	f7f9 fe55 	bl	8000270 <__aeabi_uldivmod>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <UART_SetConfig+0x2dc>)
 80065cc:	fba3 1302 	umull	r1, r3, r3, r2
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	2164      	movs	r1, #100	; 0x64
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	3332      	adds	r3, #50	; 0x32
 80065de:	4a08      	ldr	r2, [pc, #32]	; (8006600 <UART_SetConfig+0x2dc>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	f003 0207 	and.w	r2, r3, #7
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4422      	add	r2, r4
 80065f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065f4:	e109      	b.n	800680a <UART_SetConfig+0x4e6>
 80065f6:	bf00      	nop
 80065f8:	40011000 	.word	0x40011000
 80065fc:	40011400 	.word	0x40011400
 8006600:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006608:	2200      	movs	r2, #0
 800660a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800660e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006612:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006616:	4642      	mov	r2, r8
 8006618:	464b      	mov	r3, r9
 800661a:	1891      	adds	r1, r2, r2
 800661c:	6239      	str	r1, [r7, #32]
 800661e:	415b      	adcs	r3, r3
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
 8006622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006626:	4641      	mov	r1, r8
 8006628:	1854      	adds	r4, r2, r1
 800662a:	46cc      	mov	ip, r9
 800662c:	eb43 050c 	adc.w	r5, r3, ip
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	00eb      	lsls	r3, r5, #3
 800663a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800663e:	00e2      	lsls	r2, r4, #3
 8006640:	4614      	mov	r4, r2
 8006642:	461d      	mov	r5, r3
 8006644:	4640      	mov	r0, r8
 8006646:	4649      	mov	r1, r9
 8006648:	4603      	mov	r3, r0
 800664a:	18e3      	adds	r3, r4, r3
 800664c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006650:	460b      	mov	r3, r1
 8006652:	eb45 0303 	adc.w	r3, r5, r3
 8006656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006676:	4629      	mov	r1, r5
 8006678:	008b      	lsls	r3, r1, #2
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	4604      	mov	r4, r0
 8006680:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006684:	4601      	mov	r1, r0
 8006686:	008a      	lsls	r2, r1, #2
 8006688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800668c:	f7f9 fdf0 	bl	8000270 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4b60      	ldr	r3, [pc, #384]	; (8006818 <UART_SetConfig+0x4f4>)
 8006696:	fba3 2302 	umull	r2, r3, r3, r2
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	011c      	lsls	r4, r3, #4
 800669e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	1891      	adds	r1, r2, r2
 80066b6:	61b9      	str	r1, [r7, #24]
 80066b8:	415b      	adcs	r3, r3
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066c0:	4641      	mov	r1, r8
 80066c2:	1851      	adds	r1, r2, r1
 80066c4:	6139      	str	r1, [r7, #16]
 80066c6:	4649      	mov	r1, r9
 80066c8:	414b      	adcs	r3, r1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066d8:	4659      	mov	r1, fp
 80066da:	00cb      	lsls	r3, r1, #3
 80066dc:	4655      	mov	r5, sl
 80066de:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80066e2:	4651      	mov	r1, sl
 80066e4:	00ca      	lsls	r2, r1, #3
 80066e6:	4610      	mov	r0, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	4642      	mov	r2, r8
 80066ee:	189b      	adds	r3, r3, r2
 80066f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066f4:	464b      	mov	r3, r9
 80066f6:	460a      	mov	r2, r1
 80066f8:	eb42 0303 	adc.w	r3, r2, r3
 80066fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	67bb      	str	r3, [r7, #120]	; 0x78
 800670a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006718:	4649      	mov	r1, r9
 800671a:	008b      	lsls	r3, r1, #2
 800671c:	4645      	mov	r5, r8
 800671e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8006722:	4641      	mov	r1, r8
 8006724:	008a      	lsls	r2, r1, #2
 8006726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800672a:	f7f9 fda1 	bl	8000270 <__aeabi_uldivmod>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4b39      	ldr	r3, [pc, #228]	; (8006818 <UART_SetConfig+0x4f4>)
 8006734:	fba3 1302 	umull	r1, r3, r3, r2
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	2164      	movs	r1, #100	; 0x64
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	3332      	adds	r3, #50	; 0x32
 8006746:	4a34      	ldr	r2, [pc, #208]	; (8006818 <UART_SetConfig+0x4f4>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006752:	441c      	add	r4, r3
 8006754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006758:	2200      	movs	r2, #0
 800675a:	673b      	str	r3, [r7, #112]	; 0x70
 800675c:	677a      	str	r2, [r7, #116]	; 0x74
 800675e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006762:	4642      	mov	r2, r8
 8006764:	464b      	mov	r3, r9
 8006766:	1891      	adds	r1, r2, r2
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	415b      	adcs	r3, r3
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006772:	4641      	mov	r1, r8
 8006774:	1851      	adds	r1, r2, r1
 8006776:	6039      	str	r1, [r7, #0]
 8006778:	4649      	mov	r1, r9
 800677a:	414b      	adcs	r3, r1
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800678a:	4659      	mov	r1, fp
 800678c:	00cb      	lsls	r3, r1, #3
 800678e:	4655      	mov	r5, sl
 8006790:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006794:	4651      	mov	r1, sl
 8006796:	00ca      	lsls	r2, r1, #3
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	4603      	mov	r3, r0
 800679e:	4642      	mov	r2, r8
 80067a0:	189b      	adds	r3, r3, r2
 80067a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80067a4:	464b      	mov	r3, r9
 80067a6:	460a      	mov	r2, r1
 80067a8:	eb42 0303 	adc.w	r3, r2, r3
 80067ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	663b      	str	r3, [r7, #96]	; 0x60
 80067b8:	667a      	str	r2, [r7, #100]	; 0x64
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067c6:	4649      	mov	r1, r9
 80067c8:	008b      	lsls	r3, r1, #2
 80067ca:	4645      	mov	r5, r8
 80067cc:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80067d0:	4641      	mov	r1, r8
 80067d2:	008a      	lsls	r2, r1, #2
 80067d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067d8:	f7f9 fd4a 	bl	8000270 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <UART_SetConfig+0x4f4>)
 80067e2:	fba3 1302 	umull	r1, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2164      	movs	r1, #100	; 0x64
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	3332      	adds	r3, #50	; 0x32
 80067f4:	4a08      	ldr	r2, [pc, #32]	; (8006818 <UART_SetConfig+0x4f4>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f003 020f 	and.w	r2, r3, #15
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4422      	add	r2, r4
 8006808:	609a      	str	r2, [r3, #8]
}
 800680a:	bf00      	nop
 800680c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006810:	46bd      	mov	sp, r7
 8006812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006816:	bf00      	nop
 8006818:	51eb851f 	.word	0x51eb851f

0800681c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800681c:	b084      	sub	sp, #16
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	f107 001c 	add.w	r0, r7, #28
 800682a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	d122      	bne.n	800687a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800685c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d105      	bne.n	800686e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fbd6 	bl	8008020 <USB_CoreReset>
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	e01a      	b.n	80068b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 fbca 	bl	8008020 <USB_CoreReset>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
 80068a2:	e005      	b.n	80068b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d10b      	bne.n	80068ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f043 0206 	orr.w	r2, r3, #6
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068da:	b004      	add	sp, #16
 80068dc:	4770      	bx	lr
	...

080068e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d165      	bne.n	80069c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4a41      	ldr	r2, [pc, #260]	; (80069fc <USB_SetTurnaroundTime+0x11c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d906      	bls.n	800690a <USB_SetTurnaroundTime+0x2a>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4a40      	ldr	r2, [pc, #256]	; (8006a00 <USB_SetTurnaroundTime+0x120>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d202      	bcs.n	800690a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006904:	230f      	movs	r3, #15
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e062      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4a3c      	ldr	r2, [pc, #240]	; (8006a00 <USB_SetTurnaroundTime+0x120>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d306      	bcc.n	8006920 <USB_SetTurnaroundTime+0x40>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4a3b      	ldr	r2, [pc, #236]	; (8006a04 <USB_SetTurnaroundTime+0x124>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d202      	bcs.n	8006920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800691a:	230e      	movs	r3, #14
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e057      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4a38      	ldr	r2, [pc, #224]	; (8006a04 <USB_SetTurnaroundTime+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d306      	bcc.n	8006936 <USB_SetTurnaroundTime+0x56>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4a37      	ldr	r2, [pc, #220]	; (8006a08 <USB_SetTurnaroundTime+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d202      	bcs.n	8006936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006930:	230d      	movs	r3, #13
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e04c      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4a33      	ldr	r2, [pc, #204]	; (8006a08 <USB_SetTurnaroundTime+0x128>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d306      	bcc.n	800694c <USB_SetTurnaroundTime+0x6c>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4a32      	ldr	r2, [pc, #200]	; (8006a0c <USB_SetTurnaroundTime+0x12c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d802      	bhi.n	800694c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006946:	230c      	movs	r3, #12
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e041      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4a2f      	ldr	r2, [pc, #188]	; (8006a0c <USB_SetTurnaroundTime+0x12c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d906      	bls.n	8006962 <USB_SetTurnaroundTime+0x82>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4a2e      	ldr	r2, [pc, #184]	; (8006a10 <USB_SetTurnaroundTime+0x130>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d802      	bhi.n	8006962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800695c:	230b      	movs	r3, #11
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e036      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4a2a      	ldr	r2, [pc, #168]	; (8006a10 <USB_SetTurnaroundTime+0x130>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d906      	bls.n	8006978 <USB_SetTurnaroundTime+0x98>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <USB_SetTurnaroundTime+0x134>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d802      	bhi.n	8006978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006972:	230a      	movs	r3, #10
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e02b      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <USB_SetTurnaroundTime+0x134>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d906      	bls.n	800698e <USB_SetTurnaroundTime+0xae>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <USB_SetTurnaroundTime+0x138>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d202      	bcs.n	800698e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006988:	2309      	movs	r3, #9
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e020      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <USB_SetTurnaroundTime+0x138>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d306      	bcc.n	80069a4 <USB_SetTurnaroundTime+0xc4>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <USB_SetTurnaroundTime+0x13c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d802      	bhi.n	80069a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800699e:	2308      	movs	r3, #8
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	e015      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <USB_SetTurnaroundTime+0x13c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d906      	bls.n	80069ba <USB_SetTurnaroundTime+0xda>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <USB_SetTurnaroundTime+0x140>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d202      	bcs.n	80069ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069b4:	2307      	movs	r3, #7
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e00a      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069ba:	2306      	movs	r3, #6
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e007      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069c6:	2309      	movs	r3, #9
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e001      	b.n	80069d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069cc:	2309      	movs	r3, #9
 80069ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80069e8:	431a      	orrs	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	00d8acbf 	.word	0x00d8acbf
 8006a00:	00e4e1c0 	.word	0x00e4e1c0
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	01067380 	.word	0x01067380
 8006a0c:	011a499f 	.word	0x011a499f
 8006a10:	01312cff 	.word	0x01312cff
 8006a14:	014ca43f 	.word	0x014ca43f
 8006a18:	016e3600 	.word	0x016e3600
 8006a1c:	01a6ab1f 	.word	0x01a6ab1f
 8006a20:	01e84800 	.word	0x01e84800

08006a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f023 0201 	bic.w	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d115      	bne.n	8006ab2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a92:	2001      	movs	r0, #1
 8006a94:	f7fa ff5e 	bl	8001954 <HAL_Delay>
      ms++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fa33 	bl	8007f0a <USB_GetMode>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d01e      	beq.n	8006ae8 <USB_SetCurrentMode+0x84>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b31      	cmp	r3, #49	; 0x31
 8006aae:	d9f0      	bls.n	8006a92 <USB_SetCurrentMode+0x2e>
 8006ab0:	e01a      	b.n	8006ae8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f7fa ff45 	bl	8001954 <HAL_Delay>
      ms++;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3301      	adds	r3, #1
 8006ace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fa1a 	bl	8007f0a <USB_GetMode>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <USB_SetCurrentMode+0x84>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b31      	cmp	r3, #49	; 0x31
 8006ae0:	d9f0      	bls.n	8006ac4 <USB_SetCurrentMode+0x60>
 8006ae2:	e001      	b.n	8006ae8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e005      	b.n	8006af4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b32      	cmp	r3, #50	; 0x32
 8006aec:	d101      	bne.n	8006af2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006afc:	b084      	sub	sp, #16
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	e009      	b.n	8006b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	3340      	adds	r3, #64	; 0x40
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b0e      	cmp	r3, #14
 8006b34:	d9f2      	bls.n	8006b1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d11c      	bne.n	8006b76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b4a:	f043 0302 	orr.w	r3, r3, #2
 8006b4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
 8006b74:	e00b      	b.n	8006b8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b94:	461a      	mov	r2, r3
 8006b96:	2300      	movs	r3, #0
 8006b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	461a      	mov	r2, r3
 8006baa:	680b      	ldr	r3, [r1, #0]
 8006bac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d10c      	bne.n	8006bce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f965 	bl	8006e8c <USB_SetDevSpeed>
 8006bc2:	e008      	b.n	8006bd6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f960 	bl	8006e8c <USB_SetDevSpeed>
 8006bcc:	e003      	b.n	8006bd6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bce:	2103      	movs	r1, #3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f95b 	bl	8006e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f8f3 	bl	8006dc4 <USB_FlushTxFifo>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f91f 	bl	8006e2c <USB_FlushRxFifo>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	461a      	mov	r2, r3
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	e043      	b.n	8006caa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c38:	d118      	bne.n	8006c6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e013      	b.n	8006c7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c62:	461a      	mov	r2, r3
 8006c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e008      	b.n	8006c7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3b7      	bcc.n	8006c22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	e043      	b.n	8006d40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cce:	d118      	bne.n	8006d02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	e013      	b.n	8006d14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	e008      	b.n	8006d14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	461a      	mov	r2, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	461a      	mov	r2, r3
 8006d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d3b7      	bcc.n	8006cb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f043 0210 	orr.w	r2, r3, #16
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <USB_DevInit+0x2c4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f043 0208 	orr.w	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d107      	bne.n	8006db0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006da8:	f043 0304 	orr.w	r3, r3, #4
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dbc:	b004      	add	sp, #16
 8006dbe:	4770      	bx	lr
 8006dc0:	803c3800 	.word	0x803c3800

08006dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <USB_FlushTxFifo+0x64>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d901      	bls.n	8006de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e01b      	b.n	8006e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	daf2      	bge.n	8006dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	019b      	lsls	r3, r3, #6
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4a08      	ldr	r2, [pc, #32]	; (8006e28 <USB_FlushTxFifo+0x64>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e006      	b.n	8006e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d0f0      	beq.n	8006dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	00030d40 	.word	0x00030d40

08006e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a11      	ldr	r2, [pc, #68]	; (8006e88 <USB_FlushRxFifo+0x5c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e018      	b.n	8006e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	daf2      	bge.n	8006e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <USB_FlushRxFifo+0x5c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e006      	b.n	8006e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d0f0      	beq.n	8006e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	00030d40 	.word	0x00030d40

08006e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eac:	4313      	orrs	r3, r2
 8006eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0306 	and.w	r3, r3, #6
 8006ed4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
 8006ee0:	e00a      	b.n	8006ef8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d002      	beq.n	8006eee <USB_GetDevSpeed+0x32>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d102      	bne.n	8006ef4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	75fb      	strb	r3, [r7, #23]
 8006ef2:	e001      	b.n	8006ef8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d13a      	bne.n	8006f96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	2101      	movs	r1, #1
 8006f32:	fa01 f303 	lsl.w	r3, r1, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	68f9      	ldr	r1, [r7, #12]
 8006f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d155      	bne.n	8007004 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	059b      	lsls	r3, r3, #22
 8006f7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e036      	b.n	8007004 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	69da      	ldr	r2, [r3, #28]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fac:	041b      	lsls	r3, r3, #16
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d11a      	bne.n	8007004 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fea:	430b      	orrs	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007002:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d161      	bne.n	80070f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007042:	d11f      	bne.n	8007084 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007062:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	43db      	mvns	r3, r3
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a4:	4013      	ands	r3, r2
 80070a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	2101      	movs	r1, #1
 80070ba:	fa01 f303 	lsl.w	r3, r1, r3
 80070be:	b29b      	uxth	r3, r3
 80070c0:	43db      	mvns	r3, r3
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c8:	4013      	ands	r3, r2
 80070ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	0159      	lsls	r1, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	440b      	add	r3, r1
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	4619      	mov	r1, r3
 80070e8:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <USB_DeactivateEndpoint+0x1b0>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	600b      	str	r3, [r1, #0]
 80070ee:	e060      	b.n	80071b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007106:	d11f      	bne.n	8007148 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007126:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f303 	lsl.w	r3, r1, r3
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	43db      	mvns	r3, r3
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007168:	4013      	ands	r3, r2
 800716a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	2101      	movs	r1, #1
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	43db      	mvns	r3, r3
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800718c:	4013      	ands	r3, r2
 800718e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	0159      	lsls	r1, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	440b      	add	r3, r1
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	4619      	mov	r1, r3
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <USB_DeactivateEndpoint+0x1b4>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	ec337800 	.word	0xec337800
 80071c4:	eff37800 	.word	0xeff37800

080071c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	f040 815c 	bne.w	80074a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d132      	bne.n	8007258 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007250:	0cdb      	lsrs	r3, r3, #19
 8007252:	04db      	lsls	r3, r3, #19
 8007254:	6113      	str	r3, [r2, #16]
 8007256:	e074      	b.n	8007342 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007272:	0cdb      	lsrs	r3, r3, #19
 8007274:	04db      	lsls	r3, r3, #19
 8007276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800729a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6999      	ldr	r1, [r3, #24]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	440b      	add	r3, r1
 80072b4:	1e59      	subs	r1, r3, #1
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80072be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80072c0:	4b9d      	ldr	r3, [pc, #628]	; (8007538 <USB_EPStartXfer+0x370>)
 80072c2:	400b      	ands	r3, r1
 80072c4:	69b9      	ldr	r1, [r7, #24]
 80072c6:	0148      	lsls	r0, r1, #5
 80072c8:	69f9      	ldr	r1, [r7, #28]
 80072ca:	4401      	add	r1, r0
 80072cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072d0:	4313      	orrs	r3, r2
 80072d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	69b9      	ldr	r1, [r7, #24]
 80072ec:	0148      	lsls	r0, r1, #5
 80072ee:	69f9      	ldr	r1, [r7, #28]
 80072f0:	4401      	add	r1, r0
 80072f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072f6:	4313      	orrs	r3, r2
 80072f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	791b      	ldrb	r3, [r3, #4]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d11f      	bne.n	8007342 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007320:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	440a      	add	r2, r1
 8007338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007340:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d14b      	bne.n	80073e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	461a      	mov	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d128      	bne.n	80073be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	2b00      	cmp	r3, #0
 800737a:	d110      	bne.n	800739e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e00f      	b.n	80073be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	e133      	b.n	8007648 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	791b      	ldrb	r3, [r3, #4]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d015      	beq.n	8007434 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 811b 	beq.w	8007648 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	2101      	movs	r1, #1
 8007424:	fa01 f303 	lsl.w	r3, r1, r3
 8007428:	69f9      	ldr	r1, [r7, #28]
 800742a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800742e:	4313      	orrs	r3, r2
 8007430:	634b      	str	r3, [r1, #52]	; 0x34
 8007432:	e109      	b.n	8007648 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d110      	bne.n	8007466 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	e00f      	b.n	8007486 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007484:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6919      	ldr	r1, [r3, #16]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	b298      	uxth	r0, r3
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	4603      	mov	r3, r0
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fadc 	bl	8007a58 <USB_WritePacket>
 80074a0:	e0d2      	b.n	8007648 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074bc:	0cdb      	lsrs	r3, r3, #19
 80074be:	04db      	lsls	r3, r3, #19
 80074c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d126      	bne.n	800753c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007504:	69b9      	ldr	r1, [r7, #24]
 8007506:	0148      	lsls	r0, r1, #5
 8007508:	69f9      	ldr	r1, [r7, #28]
 800750a:	4401      	add	r1, r0
 800750c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007510:	4313      	orrs	r3, r2
 8007512:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800752e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007532:	6113      	str	r3, [r2, #16]
 8007534:	e03a      	b.n	80075ac <USB_EPStartXfer+0x3e4>
 8007536:	bf00      	nop
 8007538:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	4413      	add	r3, r2
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	8afa      	ldrh	r2, [r7, #22]
 8007558:	fb03 f202 	mul.w	r2, r3, r2
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	8afb      	ldrh	r3, [r7, #22]
 8007570:	04d9      	lsls	r1, r3, #19
 8007572:	4b38      	ldr	r3, [pc, #224]	; (8007654 <USB_EPStartXfer+0x48c>)
 8007574:	400b      	ands	r3, r1
 8007576:	69b9      	ldr	r1, [r7, #24]
 8007578:	0148      	lsls	r0, r1, #5
 800757a:	69f9      	ldr	r1, [r7, #28]
 800757c:	4401      	add	r1, r0
 800757e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007582:	4313      	orrs	r3, r2
 8007584:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	0148      	lsls	r0, r1, #5
 80075a0:	69f9      	ldr	r1, [r7, #28]
 80075a2:	4401      	add	r1, r0
 80075a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075a8:	4313      	orrs	r3, r2
 80075aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10d      	bne.n	80075ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6919      	ldr	r1, [r3, #16]
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	460a      	mov	r2, r1
 80075cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	791b      	ldrb	r3, [r3, #4]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d128      	bne.n	8007628 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d110      	bne.n	8007608 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e00f      	b.n	8007628 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007626:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	1ff80000 	.word	0x1ff80000

08007658 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b01      	cmp	r3, #1
 8007676:	f040 80ce 	bne.w	8007816 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d132      	bne.n	80076e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e0:	0cdb      	lsrs	r3, r3, #19
 80076e2:	04db      	lsls	r3, r3, #19
 80076e4:	6113      	str	r3, [r2, #16]
 80076e6:	e04e      	b.n	8007786 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007702:	0cdb      	lsrs	r3, r3, #19
 8007704:	04db      	lsls	r3, r3, #19
 8007706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800772a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	429a      	cmp	r2, r3
 8007736:	d903      	bls.n	8007740 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800775e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007776:	6939      	ldr	r1, [r7, #16]
 8007778:	0148      	lsls	r0, r1, #5
 800777a:	6979      	ldr	r1, [r7, #20]
 800777c:	4401      	add	r1, r0
 800777e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007782:	4313      	orrs	r3, r2
 8007784:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d11e      	bne.n	80077ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d009      	beq.n	80077a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a0:	461a      	mov	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	e097      	b.n	80078fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 8083 	beq.w	80078fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	2101      	movs	r1, #1
 8007806:	fa01 f303 	lsl.w	r3, r1, r3
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007810:	4313      	orrs	r3, r2
 8007812:	634b      	str	r3, [r1, #52]	; 0x34
 8007814:	e071      	b.n	80078fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007830:	0cdb      	lsrs	r3, r3, #19
 8007832:	04db      	lsls	r3, r3, #19
 8007834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	0151      	lsls	r1, r2, #5
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	440a      	add	r2, r1
 800784c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007858:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800788c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a8:	6939      	ldr	r1, [r7, #16]
 80078aa:	0148      	lsls	r0, r1, #5
 80078ac:	6979      	ldr	r1, [r7, #20]
 80078ae:	4401      	add	r1, r0
 80078b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078b4:	4313      	orrs	r3, r2
 80078b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10d      	bne.n	80078da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6919      	ldr	r1, [r3, #16]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d6:	460a      	mov	r2, r1
 80078d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007906:	b480      	push	{r7}
 8007908:	b087      	sub	sp, #28
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d14a      	bne.n	80079ba <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800793c:	f040 8086 	bne.w	8007a4c <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	440a      	add	r2, r1
 800795a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007962:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4413      	add	r3, r2
 800796e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007986:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f242 7210 	movw	r2, #10000	; 0x2710
 8007994:	4293      	cmp	r3, r2
 8007996:	d902      	bls.n	800799e <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
          break;
 800799c:	e056      	b.n	8007a4c <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b6:	d0e7      	beq.n	8007988 <USB_EPStopXfer+0x82>
 80079b8:	e048      	b.n	8007a4c <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d2:	d13b      	bne.n	8007a4c <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a1a:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d902      	bls.n	8007a32 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a30:	e00c      	b.n	8007a4c <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a4a:	d0e7      	beq.n	8007a1c <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b089      	sub	sp, #36	; 0x24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	460b      	mov	r3, r1
 8007a68:	71fb      	strb	r3, [r7, #7]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d123      	bne.n	8007ac6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a7e:	88bb      	ldrh	r3, [r7, #4]
 8007a80:	3303      	adds	r3, #3
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e018      	b.n	8007abe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	031a      	lsls	r2, r3, #12
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a98:	461a      	mov	r2, r3
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	3301      	adds	r3, #1
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d3e2      	bcc.n	8007a8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3724      	adds	r7, #36	; 0x24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr

08007ad2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b08b      	sub	sp, #44	; 0x2c
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	4613      	mov	r3, r2
 8007ade:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	089b      	lsrs	r3, r3, #2
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007af8:	2300      	movs	r3, #0
 8007afa:	623b      	str	r3, [r7, #32]
 8007afc:	e014      	b.n	8007b28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	3301      	adds	r3, #1
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	3301      	adds	r3, #1
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	3301      	adds	r3, #1
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	3301      	adds	r3, #1
 8007b26:	623b      	str	r3, [r7, #32]
 8007b28:	6a3a      	ldr	r2, [r7, #32]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d3e6      	bcc.n	8007afe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b30:	8bfb      	ldrh	r3, [r7, #30]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01e      	beq.n	8007b74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b40:	461a      	mov	r2, r3
 8007b42:	f107 0310 	add.w	r3, r7, #16
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	fa22 f303 	lsr.w	r3, r2, r3
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	701a      	strb	r2, [r3, #0]
      i++;
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	3301      	adds	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b68:	8bfb      	ldrh	r3, [r7, #30]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b6e:	8bfb      	ldrh	r3, [r7, #30]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1ea      	bne.n	8007b4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	372c      	adds	r7, #44	; 0x2c
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d12c      	bne.n	8007bf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db12      	blt.n	8007bd4 <USB_EPSetStall+0x54>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00f      	beq.n	8007bd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	e02b      	b.n	8007c4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	db12      	blt.n	8007c2e <USB_EPSetStall+0xae>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00f      	beq.n	8007c2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d128      	bne.n	8007cc8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d003      	beq.n	8007ca6 <USB_EPClearStall+0x4c>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d138      	bne.n	8007d18 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e027      	b.n	8007d18 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	791b      	ldrb	r3, [r3, #4]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d003      	beq.n	8007cf8 <USB_EPClearStall+0x9e>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	791b      	ldrb	r3, [r3, #4]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d10f      	bne.n	8007d18 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d16:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr

08007d6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d9c:	f023 0302 	bic.w	r3, r3, #2
 8007da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ddc:	f043 0302 	orr.w	r3, r3, #2
 8007de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4013      	ands	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e06:	68fb      	ldr	r3, [r7, #12]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	4013      	ands	r3, r2
 8007e34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	0c1b      	lsrs	r3, r3, #16
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	b29b      	uxth	r3, r3
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr

08007e76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	01db      	lsls	r3, r3, #7
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4013      	ands	r3, r2
 8007efc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007efe:	68bb      	ldr	r3, [r7, #8]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f003 0301 	and.w	r3, r3, #1
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr

08007f24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f42:	f023 0307 	bic.w	r3, r3, #7
 8007f46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	460b      	mov	r3, r1
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	333c      	adds	r3, #60	; 0x3c
 8007f7e:	3304      	adds	r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4a25      	ldr	r2, [pc, #148]	; (800801c <USB_EP0_OutStart+0xb4>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d90a      	bls.n	8007fa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f9c:	d101      	bne.n	8007fa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e037      	b.n	8008012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa8:	461a      	mov	r2, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd0:	f043 0318 	orr.w	r3, r3, #24
 8007fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007fe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d10f      	bne.n	8008010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800800e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr
 800801c:	4f54300a 	.word	0x4f54300a

08008020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a12      	ldr	r2, [pc, #72]	; (8008080 <USB_CoreReset+0x60>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d901      	bls.n	800803e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e01b      	b.n	8008076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	daf2      	bge.n	800802c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f043 0201 	orr.w	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a08      	ldr	r2, [pc, #32]	; (8008080 <USB_CoreReset+0x60>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d901      	bls.n	8008068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e006      	b.n	8008076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b01      	cmp	r3, #1
 8008072:	d0f0      	beq.n	8008056 <USB_CoreReset+0x36>

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr
 8008080:	00030d40 	.word	0x00030d40

08008084 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008090:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008094:	f002 fd90 	bl	800abb8 <USBD_static_malloc>
 8008098:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32b0      	adds	r2, #176	; 0xb0
 80080aa:	2100      	movs	r1, #0
 80080ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80080b0:	2302      	movs	r3, #2
 80080b2:	e0d4      	b.n	800825e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80080b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f002 fdf8 	bl	800acb0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32b0      	adds	r2, #176	; 0xb0
 80080ca:	68f9      	ldr	r1, [r7, #12]
 80080cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32b0      	adds	r2, #176	; 0xb0
 80080da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7c1b      	ldrb	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d138      	bne.n	800815e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080ec:	4b5e      	ldr	r3, [pc, #376]	; (8008268 <USBD_CDC_Init+0x1e4>)
 80080ee:	7819      	ldrb	r1, [r3, #0]
 80080f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f4:	2202      	movs	r2, #2
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f002 fc3b 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080fc:	4b5a      	ldr	r3, [pc, #360]	; (8008268 <USBD_CDC_Init+0x1e4>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	f003 020f 	and.w	r2, r3, #15
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4613      	mov	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	3324      	adds	r3, #36	; 0x24
 8008112:	2201      	movs	r2, #1
 8008114:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008116:	4b55      	ldr	r3, [pc, #340]	; (800826c <USBD_CDC_Init+0x1e8>)
 8008118:	7819      	ldrb	r1, [r3, #0]
 800811a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811e:	2202      	movs	r2, #2
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f002 fc26 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008126:	4b51      	ldr	r3, [pc, #324]	; (800826c <USBD_CDC_Init+0x1e8>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 020f 	and.w	r2, r3, #15
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800813e:	2201      	movs	r2, #1
 8008140:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008142:	4b4b      	ldr	r3, [pc, #300]	; (8008270 <USBD_CDC_Init+0x1ec>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f003 020f 	and.w	r2, r3, #15
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	3326      	adds	r3, #38	; 0x26
 8008158:	2210      	movs	r2, #16
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	e035      	b.n	80081ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800815e:	4b42      	ldr	r3, [pc, #264]	; (8008268 <USBD_CDC_Init+0x1e4>)
 8008160:	7819      	ldrb	r1, [r3, #0]
 8008162:	2340      	movs	r3, #64	; 0x40
 8008164:	2202      	movs	r2, #2
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f002 fc03 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800816c:	4b3e      	ldr	r3, [pc, #248]	; (8008268 <USBD_CDC_Init+0x1e4>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 020f 	and.w	r2, r3, #15
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3324      	adds	r3, #36	; 0x24
 8008182:	2201      	movs	r2, #1
 8008184:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008186:	4b39      	ldr	r3, [pc, #228]	; (800826c <USBD_CDC_Init+0x1e8>)
 8008188:	7819      	ldrb	r1, [r3, #0]
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	2202      	movs	r2, #2
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f002 fbef 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008194:	4b35      	ldr	r3, [pc, #212]	; (800826c <USBD_CDC_Init+0x1e8>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081ac:	2201      	movs	r2, #1
 80081ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081b0:	4b2f      	ldr	r3, [pc, #188]	; (8008270 <USBD_CDC_Init+0x1ec>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 020f 	and.w	r2, r3, #15
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	3326      	adds	r3, #38	; 0x26
 80081c6:	2210      	movs	r2, #16
 80081c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081ca:	4b29      	ldr	r3, [pc, #164]	; (8008270 <USBD_CDC_Init+0x1ec>)
 80081cc:	7819      	ldrb	r1, [r3, #0]
 80081ce:	2308      	movs	r3, #8
 80081d0:	2203      	movs	r2, #3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f002 fbcd 	bl	800a972 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80081d8:	4b25      	ldr	r3, [pc, #148]	; (8008270 <USBD_CDC_Init+0x1ec>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3324      	adds	r3, #36	; 0x24
 80081ee:	2201      	movs	r2, #1
 80081f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	33b0      	adds	r3, #176	; 0xb0
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008228:	2302      	movs	r3, #2
 800822a:	e018      	b.n	800825e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7c1b      	ldrb	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008234:	4b0d      	ldr	r3, [pc, #52]	; (800826c <USBD_CDC_Init+0x1e8>)
 8008236:	7819      	ldrb	r1, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800823e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f002 fc83 	bl	800ab4e <USBD_LL_PrepareReceive>
 8008248:	e008      	b.n	800825c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800824a:	4b08      	ldr	r3, [pc, #32]	; (800826c <USBD_CDC_Init+0x1e8>)
 800824c:	7819      	ldrb	r1, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f002 fc79 	bl	800ab4e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	200000f3 	.word	0x200000f3
 800826c:	200000f4 	.word	0x200000f4
 8008270:	200000f5 	.word	0x200000f5

08008274 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008280:	4b3a      	ldr	r3, [pc, #232]	; (800836c <USBD_CDC_DeInit+0xf8>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f002 fb99 	bl	800a9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800828c:	4b37      	ldr	r3, [pc, #220]	; (800836c <USBD_CDC_DeInit+0xf8>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	3324      	adds	r3, #36	; 0x24
 80082a2:	2200      	movs	r2, #0
 80082a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80082a6:	4b32      	ldr	r3, [pc, #200]	; (8008370 <USBD_CDC_DeInit+0xfc>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f002 fb86 	bl	800a9be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80082b2:	4b2f      	ldr	r3, [pc, #188]	; (8008370 <USBD_CDC_DeInit+0xfc>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 020f 	and.w	r2, r3, #15
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082ca:	2200      	movs	r2, #0
 80082cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80082ce:	4b29      	ldr	r3, [pc, #164]	; (8008374 <USBD_CDC_DeInit+0x100>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f002 fb72 	bl	800a9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80082da:	4b26      	ldr	r3, [pc, #152]	; (8008374 <USBD_CDC_DeInit+0x100>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f003 020f 	and.w	r2, r3, #15
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	3324      	adds	r3, #36	; 0x24
 80082f0:	2200      	movs	r2, #0
 80082f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082f4:	4b1f      	ldr	r3, [pc, #124]	; (8008374 <USBD_CDC_DeInit+0x100>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f003 020f 	and.w	r2, r3, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	3326      	adds	r3, #38	; 0x26
 800830a:	2200      	movs	r2, #0
 800830c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	32b0      	adds	r2, #176	; 0xb0
 8008318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01f      	beq.n	8008360 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	33b0      	adds	r3, #176	; 0xb0
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	32b0      	adds	r2, #176	; 0xb0
 800833e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008342:	4618      	mov	r0, r3
 8008344:	f002 fc44 	bl	800abd0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32b0      	adds	r2, #176	; 0xb0
 8008352:	2100      	movs	r1, #0
 8008354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200000f3 	.word	0x200000f3
 8008370:	200000f4 	.word	0x200000f4
 8008374:	200000f5 	.word	0x200000f5

08008378 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	32b0      	adds	r2, #176	; 0xb0
 800838c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008390:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e0bf      	b.n	8008528 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d050      	beq.n	8008456 <USBD_CDC_Setup+0xde>
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	f040 80af 	bne.w	8008518 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d03a      	beq.n	8008438 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	b25b      	sxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da1b      	bge.n	8008404 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	33b0      	adds	r3, #176	; 0xb0
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80083e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	88d2      	ldrh	r2, [r2, #6]
 80083e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	88db      	ldrh	r3, [r3, #6]
 80083ee:	2b07      	cmp	r3, #7
 80083f0:	bf28      	it	cs
 80083f2:	2307      	movcs	r3, #7
 80083f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	89fa      	ldrh	r2, [r7, #14]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fd7c 	bl	8009efa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008402:	e090      	b.n	8008526 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	785a      	ldrb	r2, [r3, #1]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	88db      	ldrh	r3, [r3, #6]
 8008412:	2b3f      	cmp	r3, #63	; 0x3f
 8008414:	d803      	bhi.n	800841e <USBD_CDC_Setup+0xa6>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	88db      	ldrh	r3, [r3, #6]
 800841a:	b2da      	uxtb	r2, r3
 800841c:	e000      	b.n	8008420 <USBD_CDC_Setup+0xa8>
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008426:	6939      	ldr	r1, [r7, #16]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800842e:	461a      	mov	r2, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 fd8e 	bl	8009f52 <USBD_CtlPrepareRx>
      break;
 8008436:	e076      	b.n	8008526 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	33b0      	adds	r3, #176	; 0xb0
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	7850      	ldrb	r0, [r2, #1]
 800844e:	2200      	movs	r2, #0
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	4798      	blx	r3
      break;
 8008454:	e067      	b.n	8008526 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	2b0b      	cmp	r3, #11
 800845c:	d851      	bhi.n	8008502 <USBD_CDC_Setup+0x18a>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <USBD_CDC_Setup+0xec>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	08008495 	.word	0x08008495
 8008468:	08008511 	.word	0x08008511
 800846c:	08008503 	.word	0x08008503
 8008470:	08008503 	.word	0x08008503
 8008474:	08008503 	.word	0x08008503
 8008478:	08008503 	.word	0x08008503
 800847c:	08008503 	.word	0x08008503
 8008480:	08008503 	.word	0x08008503
 8008484:	08008503 	.word	0x08008503
 8008488:	08008503 	.word	0x08008503
 800848c:	080084bf 	.word	0x080084bf
 8008490:	080084e9 	.word	0x080084e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b03      	cmp	r3, #3
 800849e:	d107      	bne.n	80084b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80084a0:	f107 030a 	add.w	r3, r7, #10
 80084a4:	2202      	movs	r2, #2
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fd26 	bl	8009efa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084ae:	e032      	b.n	8008516 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fcb1 	bl	8009e1a <USBD_CtlError>
            ret = USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	75fb      	strb	r3, [r7, #23]
          break;
 80084bc:	e02b      	b.n	8008516 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d107      	bne.n	80084da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ca:	f107 030d 	add.w	r3, r7, #13
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fd11 	bl	8009efa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084d8:	e01d      	b.n	8008516 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fc9c 	bl	8009e1a <USBD_CtlError>
            ret = USBD_FAIL;
 80084e2:	2303      	movs	r3, #3
 80084e4:	75fb      	strb	r3, [r7, #23]
          break;
 80084e6:	e016      	b.n	8008516 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d00f      	beq.n	8008514 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 fc8f 	bl	8009e1a <USBD_CtlError>
            ret = USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008500:	e008      	b.n	8008514 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fc88 	bl	8009e1a <USBD_CtlError>
          ret = USBD_FAIL;
 800850a:	2303      	movs	r3, #3
 800850c:	75fb      	strb	r3, [r7, #23]
          break;
 800850e:	e002      	b.n	8008516 <USBD_CDC_Setup+0x19e>
          break;
 8008510:	bf00      	nop
 8008512:	e008      	b.n	8008526 <USBD_CDC_Setup+0x1ae>
          break;
 8008514:	bf00      	nop
      }
      break;
 8008516:	e006      	b.n	8008526 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fc7d 	bl	8009e1a <USBD_CtlError>
      ret = USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	75fb      	strb	r3, [r7, #23]
      break;
 8008524:	bf00      	nop
  }

  return (uint8_t)ret;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	32b0      	adds	r2, #176	; 0xb0
 800854e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008556:	2303      	movs	r3, #3
 8008558:	e065      	b.n	8008626 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	32b0      	adds	r2, #176	; 0xb0
 8008564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008568:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	f003 020f 	and.w	r2, r3, #15
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	3318      	adds	r3, #24
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d02f      	beq.n	80085e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	f003 020f 	and.w	r2, r3, #15
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	3318      	adds	r3, #24
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	f003 010f 	and.w	r1, r3, #15
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	460b      	mov	r3, r1
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	440b      	add	r3, r1
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4403      	add	r3, r0
 80085ac:	3348      	adds	r3, #72	; 0x48
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d112      	bne.n	80085e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	f003 020f 	and.w	r2, r3, #15
 80085c4:	6879      	ldr	r1, [r7, #4]
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	3318      	adds	r3, #24
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085d6:	78f9      	ldrb	r1, [r7, #3]
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f002 fa95 	bl	800ab0c <USBD_LL_Transmit>
 80085e2:	e01f      	b.n	8008624 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	33b0      	adds	r3, #176	; 0xb0
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d010      	beq.n	8008624 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	33b0      	adds	r3, #176	; 0xb0
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	32b0      	adds	r2, #176	; 0xb0
 8008644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008648:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	32b0      	adds	r2, #176	; 0xb0
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	e01a      	b.n	8008696 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 fa93 	bl	800ab90 <USBD_LL_GetRxDataSize>
 800866a:	4602      	mov	r2, r0
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	33b0      	adds	r3, #176	; 0xb0
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008690:	4611      	mov	r1, r2
 8008692:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	32b0      	adds	r2, #176	; 0xb0
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e025      	b.n	800870c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	33b0      	adds	r3, #176	; 0xb0
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01a      	beq.n	800870a <USBD_CDC_EP0_RxReady+0x6c>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086da:	2bff      	cmp	r3, #255	; 0xff
 80086dc:	d015      	beq.n	800870a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	33b0      	adds	r3, #176	; 0xb0
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80086f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086fe:	b292      	uxth	r2, r2
 8008700:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800871c:	2182      	movs	r1, #130	; 0x82
 800871e:	4818      	ldr	r0, [pc, #96]	; (8008780 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008720:	f000 fd44 	bl	80091ac <USBD_GetEpDesc>
 8008724:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008726:	2101      	movs	r1, #1
 8008728:	4815      	ldr	r0, [pc, #84]	; (8008780 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800872a:	f000 fd3f 	bl	80091ac <USBD_GetEpDesc>
 800872e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008730:	2181      	movs	r1, #129	; 0x81
 8008732:	4813      	ldr	r0, [pc, #76]	; (8008780 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008734:	f000 fd3a 	bl	80091ac <USBD_GetEpDesc>
 8008738:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2210      	movs	r2, #16
 8008744:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	2200      	movs	r2, #0
 8008750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008754:	711a      	strb	r2, [r3, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d006      	beq.n	800876e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008768:	711a      	strb	r2, [r3, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2243      	movs	r2, #67	; 0x43
 8008772:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008774:	4b02      	ldr	r3, [pc, #8]	; (8008780 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200000b0 	.word	0x200000b0

08008784 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800878c:	2182      	movs	r1, #130	; 0x82
 800878e:	4818      	ldr	r0, [pc, #96]	; (80087f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008790:	f000 fd0c 	bl	80091ac <USBD_GetEpDesc>
 8008794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008796:	2101      	movs	r1, #1
 8008798:	4815      	ldr	r0, [pc, #84]	; (80087f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800879a:	f000 fd07 	bl	80091ac <USBD_GetEpDesc>
 800879e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087a0:	2181      	movs	r1, #129	; 0x81
 80087a2:	4813      	ldr	r0, [pc, #76]	; (80087f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80087a4:	f000 fd02 	bl	80091ac <USBD_GetEpDesc>
 80087a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2210      	movs	r2, #16
 80087b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d006      	beq.n	80087ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2200      	movs	r2, #0
 80087c0:	711a      	strb	r2, [r3, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f042 0202 	orr.w	r2, r2, #2
 80087c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	711a      	strb	r2, [r3, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f042 0202 	orr.w	r2, r2, #2
 80087dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2243      	movs	r2, #67	; 0x43
 80087e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200000b0 	.word	0x200000b0

080087f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087fc:	2182      	movs	r1, #130	; 0x82
 80087fe:	4818      	ldr	r0, [pc, #96]	; (8008860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008800:	f000 fcd4 	bl	80091ac <USBD_GetEpDesc>
 8008804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008806:	2101      	movs	r1, #1
 8008808:	4815      	ldr	r0, [pc, #84]	; (8008860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800880a:	f000 fccf 	bl	80091ac <USBD_GetEpDesc>
 800880e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008810:	2181      	movs	r1, #129	; 0x81
 8008812:	4813      	ldr	r0, [pc, #76]	; (8008860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008814:	f000 fcca 	bl	80091ac <USBD_GetEpDesc>
 8008818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2210      	movs	r2, #16
 8008824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d006      	beq.n	800883a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2200      	movs	r2, #0
 8008830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008834:	711a      	strb	r2, [r3, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008848:	711a      	strb	r2, [r3, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2243      	movs	r2, #67	; 0x43
 8008852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008854:	4b02      	ldr	r3, [pc, #8]	; (8008860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	200000b0 	.word	0x200000b0

08008864 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	220a      	movs	r2, #10
 8008870:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008872:	4b03      	ldr	r3, [pc, #12]	; (8008880 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	bc80      	pop	{r7}
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	2000006c 	.word	0x2000006c

08008884 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008894:	2303      	movs	r3, #3
 8008896:	e009      	b.n	80088ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	33b0      	adds	r3, #176	; 0xb0
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b087      	sub	sp, #28
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	32b0      	adds	r2, #176	; 0xb0
 80088cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e008      	b.n	80088ee <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	32b0      	adds	r2, #176	; 0xb0
 800890c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008910:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	e004      	b.n	8008926 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32b0      	adds	r2, #176	; 0xb0
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32b0      	adds	r2, #176	; 0xb0
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800895e:	2303      	movs	r3, #3
 8008960:	e025      	b.n	80089ae <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11f      	bne.n	80089ac <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2201      	movs	r2, #1
 8008970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008974:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <USBD_CDC_TransmitPacket+0x88>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4403      	add	r3, r0
 800898e:	3318      	adds	r3, #24
 8008990:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <USBD_CDC_TransmitPacket+0x88>)
 8008994:	7819      	ldrb	r1, [r3, #0]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f002 f8b2 	bl	800ab0c <USBD_LL_Transmit>

    ret = USBD_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	200000f3 	.word	0x200000f3

080089bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	32b0      	adds	r2, #176	; 0xb0
 80089ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	32b0      	adds	r2, #176	; 0xb0
 80089de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e018      	b.n	8008a1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7c1b      	ldrb	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10a      	bne.n	8008a08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <USBD_CDC_ReceivePacket+0x68>)
 80089f4:	7819      	ldrb	r1, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 f8a4 	bl	800ab4e <USBD_LL_PrepareReceive>
 8008a06:	e008      	b.n	8008a1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <USBD_CDC_ReceivePacket+0x68>)
 8008a0a:	7819      	ldrb	r1, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a12:	2340      	movs	r3, #64	; 0x40
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f002 f89a 	bl	800ab4e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200000f4 	.word	0x200000f4

08008a28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e01f      	b.n	8008a80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	79fa      	ldrb	r2, [r7, #7]
 8008a72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f001 ff15 	bl	800a8a4 <USBD_LL_Init>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e025      	b.n	8008aec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32ae      	adds	r2, #174	; 0xae
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00f      	beq.n	8008adc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	32ae      	adds	r2, #174	; 0xae
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	f107 020e 	add.w	r2, r7, #14
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 ff1d 	bl	800a93c <USBD_LL_Start>
 8008b02:	4603      	mov	r3, r0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d009      	beq.n	8008b4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	4611      	mov	r1, r2
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 f901 	bl	8009da6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d01a      	beq.n	8008bfe <USBD_LL_SetupStage+0x72>
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d822      	bhi.n	8008c12 <USBD_LL_SetupStage+0x86>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <USBD_LL_SetupStage+0x4a>
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d00a      	beq.n	8008bea <USBD_LL_SetupStage+0x5e>
 8008bd4:	e01d      	b.n	8008c12 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fb58 	bl	8009294 <USBD_StdDevReq>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]
      break;
 8008be8:	e020      	b.n	8008c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fbc0 	bl	8009378 <USBD_StdItfReq>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfc:	e016      	b.n	8008c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fc22 	bl	8009450 <USBD_StdEPReq>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c10:	e00c      	b.n	8008c2c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 feeb 	bl	800a9fc <USBD_LL_StallEP>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2a:	bf00      	nop
  }

  return ret;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d16e      	bne.n	8008d2c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	f040 8098 	bne.w	8008d92 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d913      	bls.n	8008c96 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	689a      	ldr	r2, [r3, #8]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	4293      	cmp	r3, r2
 8008c86:	bf28      	it	cs
 8008c88:	4613      	movcs	r3, r2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f001 f97c 	bl	8009f8c <USBD_CtlContinueRx>
 8008c94:	e07d      	b.n	8008d92 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d014      	beq.n	8008cce <USBD_LL_DataOutStage+0x98>
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d81d      	bhi.n	8008ce4 <USBD_LL_DataOutStage+0xae>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_LL_DataOutStage+0x7c>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d003      	beq.n	8008cb8 <USBD_LL_DataOutStage+0x82>
 8008cb0:	e018      	b.n	8008ce4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75bb      	strb	r3, [r7, #22]
            break;
 8008cb6:	e018      	b.n	8008cea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fa5a 	bl	800917c <USBD_CoreFindIF>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	75bb      	strb	r3, [r7, #22]
            break;
 8008ccc:	e00d      	b.n	8008cea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fa5b 	bl	8009194 <USBD_CoreFindEP>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ce2:	e002      	b.n	8008cea <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ce8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008cea:	7dbb      	ldrb	r3, [r7, #22]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d119      	bne.n	8008d24 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d113      	bne.n	8008d24 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008cfc:	7dba      	ldrb	r2, [r7, #22]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	32ae      	adds	r2, #174	; 0xae
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008d0c:	7dba      	ldrb	r2, [r7, #22]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d14:	7dba      	ldrb	r2, [r7, #22]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	32ae      	adds	r2, #174	; 0xae
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f001 f942 	bl	8009fae <USBD_CtlSendStatus>
 8008d2a:	e032      	b.n	8008d92 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fa2c 	bl	8009194 <USBD_CoreFindEP>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d40:	7dbb      	ldrb	r3, [r7, #22]
 8008d42:	2bff      	cmp	r3, #255	; 0xff
 8008d44:	d025      	beq.n	8008d92 <USBD_LL_DataOutStage+0x15c>
 8008d46:	7dbb      	ldrb	r3, [r7, #22]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d122      	bne.n	8008d92 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d117      	bne.n	8008d88 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d58:	7dba      	ldrb	r2, [r7, #22]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	32ae      	adds	r2, #174	; 0xae
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00f      	beq.n	8008d88 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d68:	7dba      	ldrb	r2, [r7, #22]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d70:	7dba      	ldrb	r2, [r7, #22]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	32ae      	adds	r2, #174	; 0xae
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	7afa      	ldrb	r2, [r7, #11]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	4798      	blx	r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	e000      	b.n	8008d94 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	460b      	mov	r3, r1
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008daa:	7afb      	ldrb	r3, [r7, #11]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d16f      	bne.n	8008e90 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3314      	adds	r3, #20
 8008db4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d15a      	bne.n	8008e76 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d914      	bls.n	8008df6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	461a      	mov	r2, r3
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f001 f8a4 	bl	8009f30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008de8:	2300      	movs	r3, #0
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f001 fead 	bl	800ab4e <USBD_LL_PrepareReceive>
 8008df4:	e03f      	b.n	8008e76 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d11c      	bne.n	8008e3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d316      	bcc.n	8008e3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d20f      	bcs.n	8008e3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f001 f885 	bl	8009f30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 fe8a 	bl	800ab4e <USBD_LL_PrepareReceive>
 8008e3a:	e01c      	b.n	8008e76 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d10f      	bne.n	8008e68 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d009      	beq.n	8008e68 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e68:	2180      	movs	r1, #128	; 0x80
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f001 fdc6 	bl	800a9fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 f8af 	bl	8009fd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d03a      	beq.n	8008ef6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff fe43 	bl	8008b0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e8e:	e032      	b.n	8008ef6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e90:	7afb      	ldrb	r3, [r7, #11]
 8008e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	4619      	mov	r1, r3
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f97a 	bl	8009194 <USBD_CoreFindEP>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	2bff      	cmp	r3, #255	; 0xff
 8008ea8:	d025      	beq.n	8008ef6 <USBD_LL_DataInStage+0x15a>
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d122      	bne.n	8008ef6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d11c      	bne.n	8008ef6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ebc:	7dfa      	ldrb	r2, [r7, #23]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	32ae      	adds	r2, #174	; 0xae
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d014      	beq.n	8008ef6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ecc:	7dfa      	ldrb	r2, [r7, #23]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ed4:	7dfa      	ldrb	r2, [r7, #23]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	32ae      	adds	r2, #174	; 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	7afa      	ldrb	r2, [r7, #11]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	4798      	blx	r3
 8008ee8:	4603      	mov	r3, r0
 8008eea:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008eec:	7dbb      	ldrb	r3, [r7, #22]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ef2:	7dbb      	ldrb	r3, [r7, #22]
 8008ef4:	e000      	b.n	8008ef8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d014      	beq.n	8008f66 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00e      	beq.n	8008f66 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6852      	ldr	r2, [r2, #4]
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	4611      	mov	r1, r2
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	4798      	blx	r3
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fd00 	bl	800a972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2240      	movs	r2, #64	; 0x40
 8008f7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2200      	movs	r2, #0
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 fcf2 	bl	800a972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2240      	movs	r2, #64	; 0x40
 8008f98:	621a      	str	r2, [r3, #32]

  return ret;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr

08008fc2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d106      	bne.n	800900e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009006:	b2da      	uxtb	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	bc80      	pop	{r7}
 8009018:	4770      	bx	lr

0800901a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b03      	cmp	r3, #3
 800902c:	d110      	bne.n	8009050 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	32ae      	adds	r2, #174	; 0xae
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	e01c      	b.n	80090b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b03      	cmp	r3, #3
 8009086:	d115      	bne.n	80090b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	32ae      	adds	r2, #174	; 0xae
 8009092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	32ae      	adds	r2, #174	; 0xae
 80090a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	4611      	mov	r1, r2
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	32ae      	adds	r2, #174	; 0xae
 80090d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80090dc:	2303      	movs	r3, #3
 80090de:	e01c      	b.n	800911a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d115      	bne.n	8009118 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	32ae      	adds	r2, #174	; 0xae
 80090f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	32ae      	adds	r2, #174	; 0xae
 800910a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	4611      	mov	r1, r2
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr

08009136 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00e      	beq.n	8009172 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6852      	ldr	r2, [r2, #4]
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	4611      	mov	r1, r2
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800916e:	2303      	movs	r3, #3
 8009170:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009188:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr

08009194 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80091a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr

080091ac <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	885b      	ldrh	r3, [r3, #2]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d920      	bls.n	8009216 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80091dc:	e013      	b.n	8009206 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80091de:	f107 030a 	add.w	r3, r7, #10
 80091e2:	4619      	mov	r1, r3
 80091e4:	6978      	ldr	r0, [r7, #20]
 80091e6:	f000 f81b 	bl	8009220 <USBD_GetNextDesc>
 80091ea:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b05      	cmp	r3, #5
 80091f2:	d108      	bne.n	8009206 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	789b      	ldrb	r3, [r3, #2]
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d008      	beq.n	8009214 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	b29a      	uxth	r2, r3
 800920c:	897b      	ldrh	r3, [r7, #10]
 800920e:	429a      	cmp	r2, r3
 8009210:	d8e5      	bhi.n	80091de <USBD_GetEpDesc+0x32>
 8009212:	e000      	b.n	8009216 <USBD_GetEpDesc+0x6a>
          break;
 8009214:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009216:	693b      	ldr	r3, [r7, #16]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	881a      	ldrh	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	4413      	add	r3, r2
 800923a:	b29a      	uxth	r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800924c:	68fb      	ldr	r3, [r7, #12]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr

08009258 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	3301      	adds	r3, #1
 800926e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009276:	8a3b      	ldrh	r3, [r7, #16]
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	b21a      	sxth	r2, r3
 800927c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009280:	4313      	orrs	r3, r2
 8009282:	b21b      	sxth	r3, r3
 8009284:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009286:	89fb      	ldrh	r3, [r7, #14]
}
 8009288:	4618      	mov	r0, r3
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	bc80      	pop	{r7}
 8009290:	4770      	bx	lr
	...

08009294 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d005      	beq.n	80092ba <USBD_StdDevReq+0x26>
 80092ae:	2b40      	cmp	r3, #64	; 0x40
 80092b0:	d857      	bhi.n	8009362 <USBD_StdDevReq+0xce>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00f      	beq.n	80092d6 <USBD_StdDevReq+0x42>
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d153      	bne.n	8009362 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	32ae      	adds	r2, #174	; 0xae
 80092c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]
      break;
 80092d4:	e04a      	b.n	800936c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d83b      	bhi.n	8009356 <USBD_StdDevReq+0xc2>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBD_StdDevReq+0x50>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009339 	.word	0x08009339
 80092e8:	0800934d 	.word	0x0800934d
 80092ec:	08009357 	.word	0x08009357
 80092f0:	08009343 	.word	0x08009343
 80092f4:	08009357 	.word	0x08009357
 80092f8:	08009317 	.word	0x08009317
 80092fc:	0800930d 	.word	0x0800930d
 8009300:	08009357 	.word	0x08009357
 8009304:	0800932f 	.word	0x0800932f
 8009308:	08009321 	.word	0x08009321
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa3c 	bl	800978c <USBD_GetDescriptor>
          break;
 8009314:	e024      	b.n	8009360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fba1 	bl	8009a60 <USBD_SetAddress>
          break;
 800931e:	e01f      	b.n	8009360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fbe0 	bl	8009ae8 <USBD_SetConfig>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
          break;
 800932c:	e018      	b.n	8009360 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fc83 	bl	8009c3c <USBD_GetConfig>
          break;
 8009336:	e013      	b.n	8009360 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fcb4 	bl	8009ca8 <USBD_GetStatus>
          break;
 8009340:	e00e      	b.n	8009360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fce3 	bl	8009d10 <USBD_SetFeature>
          break;
 800934a:	e009      	b.n	8009360 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fd07 	bl	8009d62 <USBD_ClrFeature>
          break;
 8009354:	e004      	b.n	8009360 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fd5e 	bl	8009e1a <USBD_CtlError>
          break;
 800935e:	bf00      	nop
      }
      break;
 8009360:	e004      	b.n	800936c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fd58 	bl	8009e1a <USBD_CtlError>
      break;
 800936a:	bf00      	nop
  }

  return ret;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop

08009378 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800938e:	2b40      	cmp	r3, #64	; 0x40
 8009390:	d005      	beq.n	800939e <USBD_StdItfReq+0x26>
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d852      	bhi.n	800943c <USBD_StdItfReq+0xc4>
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <USBD_StdItfReq+0x26>
 800939a:	2b20      	cmp	r3, #32
 800939c:	d14e      	bne.n	800943c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d840      	bhi.n	800942e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	889b      	ldrh	r3, [r3, #4]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d836      	bhi.n	8009424 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	889b      	ldrh	r3, [r3, #4]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff fedc 	bl	800917c <USBD_CoreFindIF>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2bff      	cmp	r3, #255	; 0xff
 80093cc:	d01d      	beq.n	800940a <USBD_StdItfReq+0x92>
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d11a      	bne.n	800940a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80093d4:	7bba      	ldrb	r2, [r7, #14]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	32ae      	adds	r2, #174	; 0xae
 80093da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00f      	beq.n	8009404 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80093e4:	7bba      	ldrb	r2, [r7, #14]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093ec:	7bba      	ldrb	r2, [r7, #14]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	32ae      	adds	r2, #174	; 0xae
 80093f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	4798      	blx	r3
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009402:	e004      	b.n	800940e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009404:	2303      	movs	r3, #3
 8009406:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009408:	e001      	b.n	800940e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800940a:	2303      	movs	r3, #3
 800940c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	88db      	ldrh	r3, [r3, #6]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d110      	bne.n	8009438 <USBD_StdItfReq+0xc0>
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10d      	bne.n	8009438 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fdc6 	bl	8009fae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009422:	e009      	b.n	8009438 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fcf7 	bl	8009e1a <USBD_CtlError>
          break;
 800942c:	e004      	b.n	8009438 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fcf2 	bl	8009e1a <USBD_CtlError>
          break;
 8009436:	e000      	b.n	800943a <USBD_StdItfReq+0xc2>
          break;
 8009438:	bf00      	nop
      }
      break;
 800943a:	e004      	b.n	8009446 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fceb 	bl	8009e1a <USBD_CtlError>
      break;
 8009444:	bf00      	nop
  }

  return ret;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	889b      	ldrh	r3, [r3, #4]
 8009462:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800946c:	2b40      	cmp	r3, #64	; 0x40
 800946e:	d007      	beq.n	8009480 <USBD_StdEPReq+0x30>
 8009470:	2b40      	cmp	r3, #64	; 0x40
 8009472:	f200 817f 	bhi.w	8009774 <USBD_StdEPReq+0x324>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d02a      	beq.n	80094d0 <USBD_StdEPReq+0x80>
 800947a:	2b20      	cmp	r3, #32
 800947c:	f040 817a 	bne.w	8009774 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff fe85 	bl	8009194 <USBD_CoreFindEP>
 800948a:	4603      	mov	r3, r0
 800948c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800948e:	7b7b      	ldrb	r3, [r7, #13]
 8009490:	2bff      	cmp	r3, #255	; 0xff
 8009492:	f000 8174 	beq.w	800977e <USBD_StdEPReq+0x32e>
 8009496:	7b7b      	ldrb	r3, [r7, #13]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f040 8170 	bne.w	800977e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800949e:	7b7a      	ldrb	r2, [r7, #13]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80094a6:	7b7a      	ldrb	r2, [r7, #13]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	32ae      	adds	r2, #174	; 0xae
 80094ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 8163 	beq.w	800977e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80094b8:	7b7a      	ldrb	r2, [r7, #13]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	32ae      	adds	r2, #174	; 0xae
 80094be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094ce:	e156      	b.n	800977e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d008      	beq.n	80094ea <USBD_StdEPReq+0x9a>
 80094d8:	2b03      	cmp	r3, #3
 80094da:	f300 8145 	bgt.w	8009768 <USBD_StdEPReq+0x318>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 809b 	beq.w	800961a <USBD_StdEPReq+0x1ca>
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d03c      	beq.n	8009562 <USBD_StdEPReq+0x112>
 80094e8:	e13e      	b.n	8009768 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d002      	beq.n	80094fc <USBD_StdEPReq+0xac>
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d016      	beq.n	8009528 <USBD_StdEPReq+0xd8>
 80094fa:	e02c      	b.n	8009556 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <USBD_StdEPReq+0xce>
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b80      	cmp	r3, #128	; 0x80
 8009506:	d00a      	beq.n	800951e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fa75 	bl	800a9fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009512:	2180      	movs	r1, #128	; 0x80
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 fa71 	bl	800a9fc <USBD_LL_StallEP>
 800951a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800951c:	e020      	b.n	8009560 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc7a 	bl	8009e1a <USBD_CtlError>
              break;
 8009526:	e01b      	b.n	8009560 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	885b      	ldrh	r3, [r3, #2]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10e      	bne.n	800954e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <USBD_StdEPReq+0xfe>
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b80      	cmp	r3, #128	; 0x80
 800953a:	d008      	beq.n	800954e <USBD_StdEPReq+0xfe>
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	88db      	ldrh	r3, [r3, #6]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fa57 	bl	800a9fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fd2d 	bl	8009fae <USBD_CtlSendStatus>

              break;
 8009554:	e004      	b.n	8009560 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fc5e 	bl	8009e1a <USBD_CtlError>
              break;
 800955e:	bf00      	nop
          }
          break;
 8009560:	e107      	b.n	8009772 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d002      	beq.n	8009574 <USBD_StdEPReq+0x124>
 800956e:	2b03      	cmp	r3, #3
 8009570:	d016      	beq.n	80095a0 <USBD_StdEPReq+0x150>
 8009572:	e04b      	b.n	800960c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00d      	beq.n	8009596 <USBD_StdEPReq+0x146>
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b80      	cmp	r3, #128	; 0x80
 800957e:	d00a      	beq.n	8009596 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 fa39 	bl	800a9fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800958a:	2180      	movs	r1, #128	; 0x80
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 fa35 	bl	800a9fc <USBD_LL_StallEP>
 8009592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009594:	e040      	b.n	8009618 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fc3e 	bl	8009e1a <USBD_CtlError>
              break;
 800959e:	e03b      	b.n	8009618 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	885b      	ldrh	r3, [r3, #2]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d136      	bne.n	8009616 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 fa3f 	bl	800aa3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fcf6 	bl	8009fae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fde4 	bl	8009194 <USBD_CoreFindEP>
 80095cc:	4603      	mov	r3, r0
 80095ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095d0:	7b7b      	ldrb	r3, [r7, #13]
 80095d2:	2bff      	cmp	r3, #255	; 0xff
 80095d4:	d01f      	beq.n	8009616 <USBD_StdEPReq+0x1c6>
 80095d6:	7b7b      	ldrb	r3, [r7, #13]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11c      	bne.n	8009616 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80095dc:	7b7a      	ldrb	r2, [r7, #13]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80095e4:	7b7a      	ldrb	r2, [r7, #13]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	32ae      	adds	r2, #174	; 0xae
 80095ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d010      	beq.n	8009616 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095f4:	7b7a      	ldrb	r2, [r7, #13]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32ae      	adds	r2, #174	; 0xae
 80095fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800960a:	e004      	b.n	8009616 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fc03 	bl	8009e1a <USBD_CtlError>
              break;
 8009614:	e000      	b.n	8009618 <USBD_StdEPReq+0x1c8>
              break;
 8009616:	bf00      	nop
          }
          break;
 8009618:	e0ab      	b.n	8009772 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d002      	beq.n	800962c <USBD_StdEPReq+0x1dc>
 8009626:	2b03      	cmp	r3, #3
 8009628:	d032      	beq.n	8009690 <USBD_StdEPReq+0x240>
 800962a:	e097      	b.n	800975c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d007      	beq.n	8009642 <USBD_StdEPReq+0x1f2>
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d004      	beq.n	8009642 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fbed 	bl	8009e1a <USBD_CtlError>
                break;
 8009640:	e091      	b.n	8009766 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009646:	2b00      	cmp	r3, #0
 8009648:	da0b      	bge.n	8009662 <USBD_StdEPReq+0x212>
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	3310      	adds	r3, #16
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	3304      	adds	r3, #4
 8009660:	e00b      	b.n	800967a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	4413      	add	r3, r2
 8009678:	3304      	adds	r3, #4
 800967a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2202      	movs	r2, #2
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fc36 	bl	8009efa <USBD_CtlSendData>
              break;
 800968e:	e06a      	b.n	8009766 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009694:	2b00      	cmp	r3, #0
 8009696:	da11      	bge.n	80096bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 020f 	and.w	r2, r3, #15
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	3324      	adds	r3, #36	; 0x24
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d117      	bne.n	80096e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fbb0 	bl	8009e1a <USBD_CtlError>
                  break;
 80096ba:	e054      	b.n	8009766 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 020f 	and.w	r2, r3, #15
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d104      	bne.n	80096e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fb9d 	bl	8009e1a <USBD_CtlError>
                  break;
 80096e0:	e041      	b.n	8009766 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da0b      	bge.n	8009702 <USBD_StdEPReq+0x2b2>
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	3310      	adds	r3, #16
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	3304      	adds	r3, #4
 8009700:	e00b      	b.n	800971a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	3304      	adds	r3, #4
 800971a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <USBD_StdEPReq+0x2d8>
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d103      	bne.n	8009730 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2200      	movs	r2, #0
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	e00e      	b.n	800974e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 f99f 	bl	800aa78 <USBD_LL_IsStallEP>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2201      	movs	r2, #1
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	e002      	b.n	800974e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2202      	movs	r2, #2
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fbd0 	bl	8009efa <USBD_CtlSendData>
              break;
 800975a:	e004      	b.n	8009766 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb5b 	bl	8009e1a <USBD_CtlError>
              break;
 8009764:	bf00      	nop
          }
          break;
 8009766:	e004      	b.n	8009772 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb55 	bl	8009e1a <USBD_CtlError>
          break;
 8009770:	bf00      	nop
      }
      break;
 8009772:	e005      	b.n	8009780 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fb4f 	bl	8009e1a <USBD_CtlError>
      break;
 800977c:	e000      	b.n	8009780 <USBD_StdEPReq+0x330>
      break;
 800977e:	bf00      	nop
  }

  return ret;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b06      	cmp	r3, #6
 80097ae:	f200 8128 	bhi.w	8009a02 <USBD_GetDescriptor+0x276>
 80097b2:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <USBD_GetDescriptor+0x2c>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	080097d5 	.word	0x080097d5
 80097bc:	080097ed 	.word	0x080097ed
 80097c0:	0800982d 	.word	0x0800982d
 80097c4:	08009a03 	.word	0x08009a03
 80097c8:	08009a03 	.word	0x08009a03
 80097cc:	080099a3 	.word	0x080099a3
 80097d0:	080099cf 	.word	0x080099cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	7c12      	ldrb	r2, [r2, #16]
 80097e0:	f107 0108 	add.w	r1, r7, #8
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	60f8      	str	r0, [r7, #12]
      break;
 80097ea:	e112      	b.n	8009a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7c1b      	ldrb	r3, [r3, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10d      	bne.n	8009810 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	f107 0208 	add.w	r2, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3301      	adds	r3, #1
 800980a:	2202      	movs	r2, #2
 800980c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800980e:	e100      	b.n	8009a12 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	f107 0208 	add.w	r2, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3301      	adds	r3, #1
 8009826:	2202      	movs	r2, #2
 8009828:	701a      	strb	r2, [r3, #0]
      break;
 800982a:	e0f2      	b.n	8009a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	885b      	ldrh	r3, [r3, #2]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b05      	cmp	r3, #5
 8009834:	f200 80ac 	bhi.w	8009990 <USBD_GetDescriptor+0x204>
 8009838:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <USBD_GetDescriptor+0xb4>)
 800983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009859 	.word	0x08009859
 8009844:	0800988d 	.word	0x0800988d
 8009848:	080098c1 	.word	0x080098c1
 800984c:	080098f5 	.word	0x080098f5
 8009850:	08009929 	.word	0x08009929
 8009854:	0800995d 	.word	0x0800995d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	7c12      	ldrb	r2, [r2, #16]
 8009870:	f107 0108 	add.w	r1, r7, #8
 8009874:	4610      	mov	r0, r2
 8009876:	4798      	blx	r3
 8009878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800987a:	e091      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 facb 	bl	8009e1a <USBD_CtlError>
            err++;
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	3301      	adds	r3, #1
 8009888:	72fb      	strb	r3, [r7, #11]
          break;
 800988a:	e089      	b.n	80099a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	7c12      	ldrb	r2, [r2, #16]
 80098a4:	f107 0108 	add.w	r1, r7, #8
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ae:	e077      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fab1 	bl	8009e1a <USBD_CtlError>
            err++;
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	3301      	adds	r3, #1
 80098bc:	72fb      	strb	r3, [r7, #11]
          break;
 80098be:	e06f      	b.n	80099a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7c12      	ldrb	r2, [r2, #16]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
 80098e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e2:	e05d      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa97 	bl	8009e1a <USBD_CtlError>
            err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
          break;
 80098f2:	e055      	b.n	80099a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00b      	beq.n	8009918 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	7c12      	ldrb	r2, [r2, #16]
 800990c:	f107 0108 	add.w	r1, r7, #8
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
 8009914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009916:	e043      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa7d 	bl	8009e1a <USBD_CtlError>
            err++;
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	3301      	adds	r3, #1
 8009924:	72fb      	strb	r3, [r7, #11]
          break;
 8009926:	e03b      	b.n	80099a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	7c12      	ldrb	r2, [r2, #16]
 8009940:	f107 0108 	add.w	r1, r7, #8
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
 8009948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994a:	e029      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa63 	bl	8009e1a <USBD_CtlError>
            err++;
 8009954:	7afb      	ldrb	r3, [r7, #11]
 8009956:	3301      	adds	r3, #1
 8009958:	72fb      	strb	r3, [r7, #11]
          break;
 800995a:	e021      	b.n	80099a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7c12      	ldrb	r2, [r2, #16]
 8009974:	f107 0108 	add.w	r1, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800997e:	e00f      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa49 	bl	8009e1a <USBD_CtlError>
            err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
          break;
 800998e:	e007      	b.n	80099a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa41 	bl	8009e1a <USBD_CtlError>
          err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800999e:	bf00      	nop
      }
      break;
 80099a0:	e037      	b.n	8009a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7c1b      	ldrb	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	f107 0208 	add.w	r2, r7, #8
 80099b6:	4610      	mov	r0, r2
 80099b8:	4798      	blx	r3
 80099ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099bc:	e029      	b.n	8009a12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fa2a 	bl	8009e1a <USBD_CtlError>
        err++;
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	3301      	adds	r3, #1
 80099ca:	72fb      	strb	r3, [r7, #11]
      break;
 80099cc:	e021      	b.n	8009a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	7c1b      	ldrb	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10d      	bne.n	80099f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099de:	f107 0208 	add.w	r2, r7, #8
 80099e2:	4610      	mov	r0, r2
 80099e4:	4798      	blx	r3
 80099e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	2207      	movs	r2, #7
 80099ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f0:	e00f      	b.n	8009a12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fa10 	bl	8009e1a <USBD_CtlError>
        err++;
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	3301      	adds	r3, #1
 80099fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009a00:	e007      	b.n	8009a12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fa08 	bl	8009e1a <USBD_CtlError>
      err++;
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a10:	bf00      	nop
  }

  if (err != 0U)
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11e      	bne.n	8009a56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009a20:	893b      	ldrh	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00e      	beq.n	8009a44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	88da      	ldrh	r2, [r3, #6]
 8009a2a:	893b      	ldrh	r3, [r7, #8]
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	bf28      	it	cs
 8009a30:	4613      	movcs	r3, r2
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a36:	893b      	ldrh	r3, [r7, #8]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa5c 	bl	8009efa <USBD_CtlSendData>
 8009a42:	e009      	b.n	8009a58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9e7 	bl	8009e1a <USBD_CtlError>
 8009a4c:	e004      	b.n	8009a58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 faad 	bl	8009fae <USBD_CtlSendStatus>
 8009a54:	e000      	b.n	8009a58 <USBD_GetDescriptor+0x2cc>
    return;
 8009a56:	bf00      	nop
  }
}
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop

08009a60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d131      	bne.n	8009ad6 <USBD_SetAddress+0x76>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	88db      	ldrh	r3, [r3, #6]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d12d      	bne.n	8009ad6 <USBD_SetAddress+0x76>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009a80:	d829      	bhi.n	8009ad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	885b      	ldrh	r3, [r3, #2]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d104      	bne.n	8009aa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f9bc 	bl	8009e1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa2:	e01d      	b.n	8009ae0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7bfa      	ldrb	r2, [r7, #15]
 8009aa8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 f80c 	bl	800aace <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa79 	bl	8009fae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d004      	beq.n	8009acc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aca:	e009      	b.n	8009ae0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad4:	e004      	b.n	8009ae0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f99e 	bl	8009e1a <USBD_CtlError>
  }
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	4b4e      	ldr	r3, [pc, #312]	; (8009c38 <USBD_SetConfig+0x150>)
 8009afe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b00:	4b4d      	ldr	r3, [pc, #308]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d905      	bls.n	8009b14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f985 	bl	8009e1a <USBD_CtlError>
    return USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e08c      	b.n	8009c2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d002      	beq.n	8009b26 <USBD_SetConfig+0x3e>
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d029      	beq.n	8009b78 <USBD_SetConfig+0x90>
 8009b24:	e075      	b.n	8009c12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b26:	4b44      	ldr	r3, [pc, #272]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d020      	beq.n	8009b70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b2e:	4b42      	ldr	r3, [pc, #264]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b38:	4b3f      	ldr	r3, [pc, #252]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7fe ffee 	bl	8008b20 <USBD_SetClassConfig>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f962 	bl	8009e1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b5e:	e065      	b.n	8009c2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa24 	bl	8009fae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2203      	movs	r2, #3
 8009b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b6e:	e05d      	b.n	8009c2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa1c 	bl	8009fae <USBD_CtlSendStatus>
      break;
 8009b76:	e059      	b.n	8009c2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b78:	4b2f      	ldr	r3, [pc, #188]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d112      	bne.n	8009ba6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2202      	movs	r2, #2
 8009b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b88:	4b2b      	ldr	r3, [pc, #172]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b92:	4b29      	ldr	r3, [pc, #164]	; (8009c38 <USBD_SetConfig+0x150>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7fe ffdd 	bl	8008b58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa05 	bl	8009fae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ba4:	e042      	b.n	8009c2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009ba6:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <USBD_SetConfig+0x150>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d02a      	beq.n	8009c0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fe ffcb 	bl	8008b58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bc2:	4b1d      	ldr	r3, [pc, #116]	; (8009c38 <USBD_SetConfig+0x150>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bcc:	4b1a      	ldr	r3, [pc, #104]	; (8009c38 <USBD_SetConfig+0x150>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fe ffa4 	bl	8008b20 <USBD_SetClassConfig>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00f      	beq.n	8009c02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f918 	bl	8009e1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7fe ffb0 	bl	8008b58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c00:	e014      	b.n	8009c2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f9d3 	bl	8009fae <USBD_CtlSendStatus>
      break;
 8009c08:	e010      	b.n	8009c2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f9cf 	bl	8009fae <USBD_CtlSendStatus>
      break;
 8009c10:	e00c      	b.n	8009c2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f900 	bl	8009e1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <USBD_SetConfig+0x150>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7fe ff99 	bl	8008b58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c26:	2303      	movs	r3, #3
 8009c28:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2a:	bf00      	nop
  }

  return ret;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	200006f4 	.word	0x200006f4

08009c3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	88db      	ldrh	r3, [r3, #6]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d004      	beq.n	8009c58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f8e2 	bl	8009e1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c56:	e023      	b.n	8009ca0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	dc02      	bgt.n	8009c6a <USBD_GetConfig+0x2e>
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dc03      	bgt.n	8009c70 <USBD_GetConfig+0x34>
 8009c68:	e015      	b.n	8009c96 <USBD_GetConfig+0x5a>
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d00b      	beq.n	8009c86 <USBD_GetConfig+0x4a>
 8009c6e:	e012      	b.n	8009c96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f93b 	bl	8009efa <USBD_CtlSendData>
        break;
 8009c84:	e00c      	b.n	8009ca0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f933 	bl	8009efa <USBD_CtlSendData>
        break;
 8009c94:	e004      	b.n	8009ca0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f8be 	bl	8009e1a <USBD_CtlError>
        break;
 8009c9e:	bf00      	nop
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d81e      	bhi.n	8009cfe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	88db      	ldrh	r3, [r3, #6]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d004      	beq.n	8009cd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f8a5 	bl	8009e1a <USBD_CtlError>
        break;
 8009cd0:	e01a      	b.n	8009d08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d005      	beq.n	8009cee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f043 0202 	orr.w	r2, r3, #2
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	330c      	adds	r3, #12
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f8ff 	bl	8009efa <USBD_CtlSendData>
      break;
 8009cfc:	e004      	b.n	8009d08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f88a 	bl	8009e1a <USBD_CtlError>
      break;
 8009d06:	bf00      	nop
  }
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d107      	bne.n	8009d32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f93f 	bl	8009fae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009d30:	e013      	b.n	8009d5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	885b      	ldrh	r3, [r3, #2]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d10b      	bne.n	8009d52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	889b      	ldrh	r3, [r3, #4]
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f92f 	bl	8009fae <USBD_CtlSendStatus>
}
 8009d50:	e003      	b.n	8009d5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f860 	bl	8009e1a <USBD_CtlError>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	3b01      	subs	r3, #1
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d80b      	bhi.n	8009d92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	885b      	ldrh	r3, [r3, #2]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d10c      	bne.n	8009d9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f90f 	bl	8009fae <USBD_CtlSendStatus>
      }
      break;
 8009d90:	e004      	b.n	8009d9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f840 	bl	8009e1a <USBD_CtlError>
      break;
 8009d9a:	e000      	b.n	8009d9e <USBD_ClrFeature+0x3c>
      break;
 8009d9c:	bf00      	nop
  }
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	781a      	ldrb	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	781a      	ldrb	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff fa41 	bl	8009258 <SWAPBYTE>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	461a      	mov	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff fa34 	bl	8009258 <SWAPBYTE>
 8009df0:	4603      	mov	r3, r0
 8009df2:	461a      	mov	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fa27 	bl	8009258 <SWAPBYTE>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	80da      	strh	r2, [r3, #6]
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e24:	2180      	movs	r1, #128	; 0x80
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fde8 	bl	800a9fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fde4 	bl	800a9fc <USBD_LL_StallEP>
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d036      	beq.n	8009ec0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e56:	6938      	ldr	r0, [r7, #16]
 8009e58:	f000 f836 	bl	8009ec8 <USBD_GetLen>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	4413      	add	r3, r2
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7812      	ldrb	r2, [r2, #0]
 8009e74:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4413      	add	r3, r2
 8009e82:	2203      	movs	r2, #3
 8009e84:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e8c:	e013      	b.n	8009eb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	4413      	add	r3, r2
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	7812      	ldrb	r2, [r2, #0]
 8009e98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	613b      	str	r3, [r7, #16]
    idx++;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	4413      	add	r3, r2
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]
    idx++;
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e7      	bne.n	8009e8e <USBD_GetString+0x52>
 8009ebe:	e000      	b.n	8009ec2 <USBD_GetString+0x86>
    return;
 8009ec0:	bf00      	nop
  }
}
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ed8:	e005      	b.n	8009ee6 <USBD_GetLen+0x1e>
  {
    len++;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
 8009edc:	3301      	adds	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1f5      	bne.n	8009eda <USBD_GetLen+0x12>
  }

  return len;
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bc80      	pop	{r7}
 8009ef8:	4770      	bx	lr

08009efa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	2100      	movs	r1, #0
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fdf3 	bl	800ab0c <USBD_LL_Transmit>

  return USBD_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fde2 	bl	800ab0c <USBD_LL_Transmit>

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2203      	movs	r2, #3
 8009f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fde6 	bl	800ab4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fdd5 	bl	800ab4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2204      	movs	r2, #4
 8009fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fda1 	bl	800ab0c <USBD_LL_Transmit>

  return USBD_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2205      	movs	r2, #5
 8009fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fdaf 	bl	800ab4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a000:	2200      	movs	r2, #0
 800a002:	4912      	ldr	r1, [pc, #72]	; (800a04c <MX_USB_DEVICE_Init+0x50>)
 800a004:	4812      	ldr	r0, [pc, #72]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a006:	f7fe fd0f 	bl	8008a28 <USBD_Init>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a010:	f7f7 fc1c 	bl	800184c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a014:	490f      	ldr	r1, [pc, #60]	; (800a054 <MX_USB_DEVICE_Init+0x58>)
 800a016:	480e      	ldr	r0, [pc, #56]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a018:	f7fe fd36 	bl	8008a88 <USBD_RegisterClass>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a022:	f7f7 fc13 	bl	800184c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a026:	490c      	ldr	r1, [pc, #48]	; (800a058 <MX_USB_DEVICE_Init+0x5c>)
 800a028:	4809      	ldr	r0, [pc, #36]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a02a:	f7fe fc2b 	bl	8008884 <USBD_CDC_RegisterInterface>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a034:	f7f7 fc0a 	bl	800184c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a038:	4805      	ldr	r0, [pc, #20]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a03a:	f7fe fd5b 	bl	8008af4 <USBD_Start>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a044:	f7f7 fc02 	bl	800184c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a048:	bf00      	nop
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000118 	.word	0x20000118
 800a050:	200006f8 	.word	0x200006f8
 800a054:	20000078 	.word	0x20000078
 800a058:	20000104 	.word	0x20000104

0800a05c <cdcAvailable>:

/**
 *  @ usb 수신 버퍼에 들어있는 데이터 갯수 확인
 */
uint32_t cdcAvailable(void)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (ptr_in - ptr_out) % rx_len;
 800a062:	4b09      	ldr	r3, [pc, #36]	; (800a088 <cdcAvailable+0x2c>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <cdcAvailable+0x30>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	4a08      	ldr	r2, [pc, #32]	; (800a090 <cdcAvailable+0x34>)
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	fbb3 f1f2 	udiv	r1, r3, r2
 800a074:	fb01 f202 	mul.w	r2, r1, r2
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	607b      	str	r3, [r7, #4]

  return ret;
 800a07c:	687b      	ldr	r3, [r7, #4]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	bc80      	pop	{r7}
 800a086:	4770      	bx	lr
 800a088:	200009d4 	.word	0x200009d4
 800a08c:	200009d8 	.word	0x200009d8
 800a090:	20000100 	.word	0x20000100

0800a094 <cdcRead>:
/*
 * @ 수신버퍼에서 데이터를 읽는다.
 * 데이터 읽은 후 출력 인덱스 1 증가시킨다.
 * */
uint8_t cdcRead(void)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[ptr_out];
 800a09a:	4b0e      	ldr	r3, [pc, #56]	; (800a0d4 <cdcRead+0x40>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a0e      	ldr	r2, [pc, #56]	; (800a0d8 <cdcRead+0x44>)
 800a0a0:	5cd3      	ldrb	r3, [r2, r3]
 800a0a2:	71fb      	strb	r3, [r7, #7]

  if(ptr_out != ptr_in)
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	; (800a0d4 <cdcRead+0x40>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <cdcRead+0x48>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d00b      	beq.n	800a0c8 <cdcRead+0x34>
  {
    ptr_out = (ptr_out + 1) % rx_len;
 800a0b0:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <cdcRead+0x40>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <cdcRead+0x4c>)
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0be:	fb01 f202 	mul.w	r2, r1, r2
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	4a03      	ldr	r2, [pc, #12]	; (800a0d4 <cdcRead+0x40>)
 800a0c6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bc80      	pop	{r7}
 800a0d2:	4770      	bx	lr
 800a0d4:	200009d8 	.word	0x200009d8
 800a0d8:	200009dc 	.word	0x200009dc
 800a0dc:	200009d4 	.word	0x200009d4
 800a0e0:	20000100 	.word	0x20000100

0800a0e4 <cdcDataIn>:
/*
 * @ 수신버퍼에 데이터를 write한다.
 * 데이터 write 후에 입력 인덱스 1 증가시킨다.
 * */
void cdcDataIn(uint8_t rx_data)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	71fb      	strb	r3, [r7, #7]
  uint32_t next_ptr_in;

  rx_buf[ptr_in] = rx_data;   //수신데이터 수신버퍼에 입력
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <cdcDataIn+0x44>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	490e      	ldr	r1, [pc, #56]	; (800a12c <cdcDataIn+0x48>)
 800a0f4:	79fa      	ldrb	r2, [r7, #7]
 800a0f6:	54ca      	strb	r2, [r1, r3]

  //next_ptr_in은 현재 입력 인덱스의 다음 인덱스를 의미함
  next_ptr_in = (ptr_in + 1) % rx_len;
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <cdcDataIn+0x44>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	4a0c      	ldr	r2, [pc, #48]	; (800a130 <cdcDataIn+0x4c>)
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	fbb3 f1f2 	udiv	r1, r3, r2
 800a106:	fb01 f202 	mul.w	r2, r1, r2
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]

  //현재의 다음 입력 인덱스가 출력 인덱스와 다르면
  //(같으면 버퍼 full 상태임)
  if(next_ptr_in != ptr_out)
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <cdcDataIn+0x50>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	429a      	cmp	r2, r3
 800a116:	d002      	beq.n	800a11e <cdcDataIn+0x3a>
  {
    //입력인덱스를 1 증가시킨다.
    ptr_in = next_ptr_in;
 800a118:	4a03      	ldr	r2, [pc, #12]	; (800a128 <cdcDataIn+0x44>)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6013      	str	r3, [r2, #0]
  }
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	bc80      	pop	{r7}
 800a126:	4770      	bx	lr
 800a128:	200009d4 	.word	0x200009d4
 800a12c:	200009dc 	.word	0x200009dc
 800a130:	20000100 	.word	0x20000100
 800a134:	200009d8 	.word	0x200009d8

0800a138 <cdcWrite>:

/*
 * @ 입력된 데이터를 길이만큼 usb로 전송한다.
 * */
uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;  //타임아웃 처리용 변수
  uint8_t state;

  //현재 타이머 카운터 값을 저장
  pre_time = millis();
 800a142:	f7f6 fb22 	bl	800078a <millis>
 800a146:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    //usb로 데이터 전송 후 결과를 변수에 저장
    state =CDC_Transmit_FS(p_data, length);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f91e 	bl	800a390 <CDC_Transmit_FS>
 800a154:	4603      	mov	r3, r0
 800a156:	72fb      	strb	r3, [r7, #11]

    if(state == USBD_OK)
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <cdcWrite+0x2a>
    {
      //전송 성공 시 길이 리턴
      return length;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	e00e      	b.n	800a180 <cdcWrite+0x48>
    }
    else if(state == USBD_FAIL)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d101      	bne.n	800a16c <cdcWrite+0x34>
    {
      //전송실패 시 리턴
      return 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	e009      	b.n	800a180 <cdcWrite+0x48>
    }
    if(millis() - pre_time >= 100)
 800a16c:	f7f6 fb0d 	bl	800078a <millis>
 800a170:	4602      	mov	r2, r0
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b63      	cmp	r3, #99	; 0x63
 800a178:	d800      	bhi.n	800a17c <cdcWrite+0x44>
    state =CDC_Transmit_FS(p_data, length);
 800a17a:	e7e5      	b.n	800a148 <cdcWrite+0x10>
    {
      //타임아웃 발생 시 루프탈출
      break;
 800a17c:	bf00      	nop
    }
  }

  return 0;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <cdcGetBaud>:

/**
 * @ 현재 baudrate를 확인하는 함수
 */
uint32_t cdcGetBaud(void)
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 800a18c:	4b02      	ldr	r3, [pc, #8]	; (800a198 <cdcGetBaud+0x10>)
 800a18e:	681b      	ldr	r3, [r3, #0]
}
 800a190:	4618      	mov	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	bc80      	pop	{r7}
 800a196:	4770      	bx	lr
 800a198:	200000f8 	.word	0x200000f8

0800a19c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4905      	ldr	r1, [pc, #20]	; (800a1b8 <CDC_Init_FS+0x1c>)
 800a1a4:	4805      	ldr	r0, [pc, #20]	; (800a1bc <CDC_Init_FS+0x20>)
 800a1a6:	f7fe fb86 	bl	80088b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1aa:	4905      	ldr	r1, [pc, #20]	; (800a1c0 <CDC_Init_FS+0x24>)
 800a1ac:	4803      	ldr	r0, [pc, #12]	; (800a1bc <CDC_Init_FS+0x20>)
 800a1ae:	f7fe fba3 	bl	80088f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	200013dc 	.word	0x200013dc
 800a1bc:	200006f8 	.word	0x200006f8
 800a1c0:	20000bdc 	.word	0x20000bdc

0800a1c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr
	...

0800a1d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	6039      	str	r1, [r7, #0]
 800a1de:	71fb      	strb	r3, [r7, #7]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	2b23      	cmp	r3, #35	; 0x23
 800a1e8:	f200 80a3 	bhi.w	800a332 <CDC_Control_FS+0x15e>
 800a1ec:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <CDC_Control_FS+0x20>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a333 	.word	0x0800a333
 800a1f8:	0800a333 	.word	0x0800a333
 800a1fc:	0800a333 	.word	0x0800a333
 800a200:	0800a333 	.word	0x0800a333
 800a204:	0800a333 	.word	0x0800a333
 800a208:	0800a333 	.word	0x0800a333
 800a20c:	0800a333 	.word	0x0800a333
 800a210:	0800a333 	.word	0x0800a333
 800a214:	0800a333 	.word	0x0800a333
 800a218:	0800a333 	.word	0x0800a333
 800a21c:	0800a333 	.word	0x0800a333
 800a220:	0800a333 	.word	0x0800a333
 800a224:	0800a333 	.word	0x0800a333
 800a228:	0800a333 	.word	0x0800a333
 800a22c:	0800a333 	.word	0x0800a333
 800a230:	0800a333 	.word	0x0800a333
 800a234:	0800a333 	.word	0x0800a333
 800a238:	0800a333 	.word	0x0800a333
 800a23c:	0800a333 	.word	0x0800a333
 800a240:	0800a333 	.word	0x0800a333
 800a244:	0800a333 	.word	0x0800a333
 800a248:	0800a333 	.word	0x0800a333
 800a24c:	0800a333 	.word	0x0800a333
 800a250:	0800a333 	.word	0x0800a333
 800a254:	0800a333 	.word	0x0800a333
 800a258:	0800a333 	.word	0x0800a333
 800a25c:	0800a333 	.word	0x0800a333
 800a260:	0800a333 	.word	0x0800a333
 800a264:	0800a333 	.word	0x0800a333
 800a268:	0800a333 	.word	0x0800a333
 800a26c:	0800a333 	.word	0x0800a333
 800a270:	0800a333 	.word	0x0800a333
 800a274:	0800a285 	.word	0x0800a285
 800a278:	0800a2df 	.word	0x0800a2df
 800a27c:	0800a333 	.word	0x0800a333
 800a280:	0800a333 	.word	0x0800a333
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      //외부에서 설정한 통신 파라미터를 구조체 변수에 저장한다.
      LineCoding.bitrate     = (uint32_t)(pbuf[0] << 0);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	4b2d      	ldr	r3, [pc, #180]	; (800a340 <CDC_Control_FS+0x16c>)
 800a28c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate    |= (uint32_t)(pbuf[1] << 8);
 800a28e:	4b2c      	ldr	r3, [pc, #176]	; (800a340 <CDC_Control_FS+0x16c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	3201      	adds	r2, #1
 800a296:	7812      	ldrb	r2, [r2, #0]
 800a298:	0212      	lsls	r2, r2, #8
 800a29a:	4313      	orrs	r3, r2
 800a29c:	4a28      	ldr	r2, [pc, #160]	; (800a340 <CDC_Control_FS+0x16c>)
 800a29e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate    |= (uint32_t)(pbuf[2] << 16);
 800a2a0:	4b27      	ldr	r3, [pc, #156]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	3202      	adds	r2, #2
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	0412      	lsls	r2, r2, #16
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	4a24      	ldr	r2, [pc, #144]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2b0:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate    |= (uint32_t)(pbuf[3] << 24);
 800a2b2:	4b23      	ldr	r3, [pc, #140]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	3203      	adds	r2, #3
 800a2ba:	7812      	ldrb	r2, [r2, #0]
 800a2bc:	0612      	lsls	r2, r2, #24
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2c2:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	791a      	ldrb	r2, [r3, #4]
 800a2c8:	4b1d      	ldr	r3, [pc, #116]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2ca:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	795a      	ldrb	r2, [r3, #5]
 800a2d0:	4b1b      	ldr	r3, [pc, #108]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2d2:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	799a      	ldrb	r2, [r3, #6]
 800a2d8:	4b19      	ldr	r3, [pc, #100]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2da:	719a      	strb	r2, [r3, #6]

    break;
 800a2dc:	e02a      	b.n	800a334 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      //LineCoding 구조체 변수에 현재 저장된 통신파라미터값을 불러온다.
      //-------> baudrate
      pbuf[0] = (uint8_t)(LineCoding.bitrate >> 0 & 0x000000FF);
 800a2de:	4b18      	ldr	r3, [pc, #96]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8 & 0x000000FF);
 800a2e8:	4b15      	ldr	r3, [pc, #84]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	0a1a      	lsrs	r2, r3, #8
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16 & 0x000000FF);
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <CDC_Control_FS+0x16c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	0c1a      	lsrs	r2, r3, #16
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	3302      	adds	r3, #2
 800a300:	b2d2      	uxtb	r2, r2
 800a302:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24 & 0x000000FF);
 800a304:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <CDC_Control_FS+0x16c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	0e1a      	lsrs	r2, r3, #24
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	3303      	adds	r3, #3
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	701a      	strb	r2, [r3, #0]
      //-------> Stop bits
      pbuf[4] = (uint8_t)(LineCoding.format & 0xFF);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	3304      	adds	r3, #4
 800a316:	4a0a      	ldr	r2, [pc, #40]	; (800a340 <CDC_Control_FS+0x16c>)
 800a318:	7912      	ldrb	r2, [r2, #4]
 800a31a:	701a      	strb	r2, [r3, #0]
      //-------> Parity
      pbuf[5] = (uint8_t)(LineCoding.paritytype & 0xFF);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	3305      	adds	r3, #5
 800a320:	4a07      	ldr	r2, [pc, #28]	; (800a340 <CDC_Control_FS+0x16c>)
 800a322:	7952      	ldrb	r2, [r2, #5]
 800a324:	701a      	strb	r2, [r3, #0]
      //-------> Number Data bits
      pbuf[6] = (uint8_t)(LineCoding.datatype & 0xFF);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	3306      	adds	r3, #6
 800a32a:	4a05      	ldr	r2, [pc, #20]	; (800a340 <CDC_Control_FS+0x16c>)
 800a32c:	7992      	ldrb	r2, [r2, #6]
 800a32e:	701a      	strb	r2, [r3, #0]

    break;
 800a330:	e000      	b.n	800a334 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a332:	bf00      	nop
  }

  return (USBD_OK);
 800a334:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	200000f8 	.word	0x200000f8

0800a344 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	480e      	ldr	r0, [pc, #56]	; (800a38c <CDC_Receive_FS+0x48>)
 800a352:	f7fe fad1 	bl	80088f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a356:	480d      	ldr	r0, [pc, #52]	; (800a38c <CDC_Receive_FS+0x48>)
 800a358:	f7fe fb30 	bl	80089bc <USBD_CDC_ReceivePacket>

  //usb 수신 데이터 수신 데이터 길이만큼 수신버퍼에 저장
  for(int i=0;i<*Len;i++)
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e009      	b.n	800a376 <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	4413      	add	r3, r2
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff feba 	bl	800a0e4 <cdcDataIn>
  for(int i=0;i<*Len;i++)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	3301      	adds	r3, #1
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d8f0      	bhi.n	800a362 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800a380:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200006f8 	.word	0x200006f8

0800a390 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <CDC_Transmit_FS+0x48>)
 800a3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e00b      	b.n	800a3ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3b6:	887b      	ldrh	r3, [r7, #2]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	4806      	ldr	r0, [pc, #24]	; (800a3d8 <CDC_Transmit_FS+0x48>)
 800a3be:	f7fe fa7a 	bl	80088b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3c2:	4805      	ldr	r0, [pc, #20]	; (800a3d8 <CDC_Transmit_FS+0x48>)
 800a3c4:	f7fe fab4 	bl	8008930 <USBD_CDC_TransmitPacket>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	200006f8 	.word	0x200006f8

0800a3dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bc80      	pop	{r7}
 800a3fa:	4770      	bx	lr

0800a3fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2212      	movs	r2, #18
 800a40c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a40e:	4b03      	ldr	r3, [pc, #12]	; (800a41c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20000134 	.word	0x20000134

0800a420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2204      	movs	r2, #4
 800a430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a432:	4b03      	ldr	r3, [pc, #12]	; (800a440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20000148 	.word	0x20000148

0800a444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4907      	ldr	r1, [pc, #28]	; (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
 800a45a:	4808      	ldr	r0, [pc, #32]	; (800a47c <USBD_FS_ProductStrDescriptor+0x38>)
 800a45c:	f7ff fcee 	bl	8009e3c <USBD_GetString>
 800a460:	e004      	b.n	800a46c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4904      	ldr	r1, [pc, #16]	; (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <USBD_FS_ProductStrDescriptor+0x38>)
 800a468:	f7ff fce8 	bl	8009e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20001bdc 	.word	0x20001bdc
 800a47c:	0800b64c 	.word	0x0800b64c

0800a480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	6039      	str	r1, [r7, #0]
 800a48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	4904      	ldr	r1, [pc, #16]	; (800a4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a490:	4804      	ldr	r0, [pc, #16]	; (800a4a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a492:	f7ff fcd3 	bl	8009e3c <USBD_GetString>
  return USBD_StrDesc;
 800a496:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20001bdc 	.word	0x20001bdc
 800a4a4:	0800b664 	.word	0x0800b664

0800a4a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	221a      	movs	r2, #26
 800a4b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4ba:	f000 f843 	bl	800a544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4be:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	2000014c 	.word	0x2000014c

0800a4cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d105      	bne.n	800a4ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4907      	ldr	r1, [pc, #28]	; (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4e2:	4808      	ldr	r0, [pc, #32]	; (800a504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4e4:	f7ff fcaa 	bl	8009e3c <USBD_GetString>
 800a4e8:	e004      	b.n	800a4f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4904      	ldr	r1, [pc, #16]	; (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ee:	4805      	ldr	r0, [pc, #20]	; (800a504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4f0:	f7ff fca4 	bl	8009e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20001bdc 	.word	0x20001bdc
 800a504:	0800b678 	.word	0x0800b678

0800a508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	6039      	str	r1, [r7, #0]
 800a512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4907      	ldr	r1, [pc, #28]	; (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a51e:	4808      	ldr	r0, [pc, #32]	; (800a540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a520:	f7ff fc8c 	bl	8009e3c <USBD_GetString>
 800a524:	e004      	b.n	800a530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	4904      	ldr	r1, [pc, #16]	; (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a52a:	4805      	ldr	r0, [pc, #20]	; (800a540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a52c:	f7ff fc86 	bl	8009e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a530:	4b02      	ldr	r3, [pc, #8]	; (800a53c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20001bdc 	.word	0x20001bdc
 800a540:	0800b684 	.word	0x0800b684

0800a544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a54a:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <Get_SerialNum+0x44>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a550:	4b0e      	ldr	r3, [pc, #56]	; (800a58c <Get_SerialNum+0x48>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a556:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <Get_SerialNum+0x4c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4413      	add	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d009      	beq.n	800a57e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a56a:	2208      	movs	r2, #8
 800a56c:	4909      	ldr	r1, [pc, #36]	; (800a594 <Get_SerialNum+0x50>)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f814 	bl	800a59c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a574:	2204      	movs	r2, #4
 800a576:	4908      	ldr	r1, [pc, #32]	; (800a598 <Get_SerialNum+0x54>)
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	f000 f80f 	bl	800a59c <IntToUnicode>
  }
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	1fff7a10 	.word	0x1fff7a10
 800a58c:	1fff7a14 	.word	0x1fff7a14
 800a590:	1fff7a18 	.word	0x1fff7a18
 800a594:	2000014e 	.word	0x2000014e
 800a598:	2000015e 	.word	0x2000015e

0800a59c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]
 800a5b2:	e027      	b.n	800a604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	2b09      	cmp	r3, #9
 800a5ba:	d80b      	bhi.n	800a5d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0f1b      	lsrs	r3, r3, #28
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	440b      	add	r3, r1
 800a5cc:	3230      	adds	r2, #48	; 0x30
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	e00a      	b.n	800a5ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	0f1b      	lsrs	r3, r3, #28
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	4619      	mov	r1, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	440b      	add	r3, r1
 800a5e4:	3237      	adds	r2, #55	; 0x37
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	3301      	adds	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
 800a604:	7dfa      	ldrb	r2, [r7, #23]
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d3d3      	bcc.n	800a5b4 <IntToUnicode+0x18>
  }
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr

0800a618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08a      	sub	sp, #40	; 0x28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a620:	f107 0314 	add.w	r3, r7, #20
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	605a      	str	r2, [r3, #4]
 800a62a:	609a      	str	r2, [r3, #8]
 800a62c:	60da      	str	r2, [r3, #12]
 800a62e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a638:	d13a      	bne.n	800a6b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a63a:	2300      	movs	r3, #0
 800a63c:	613b      	str	r3, [r7, #16]
 800a63e:	4b1e      	ldr	r3, [pc, #120]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	4a1d      	ldr	r2, [pc, #116]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a644:	f043 0301 	orr.w	r3, r3, #1
 800a648:	6313      	str	r3, [r2, #48]	; 0x30
 800a64a:	4b1b      	ldr	r3, [pc, #108]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a656:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a65a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a65c:	2302      	movs	r3, #2
 800a65e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a660:	2300      	movs	r3, #0
 800a662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a664:	2303      	movs	r3, #3
 800a666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a668:	230a      	movs	r3, #10
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a66c:	f107 0314 	add.w	r3, r7, #20
 800a670:	4619      	mov	r1, r3
 800a672:	4812      	ldr	r0, [pc, #72]	; (800a6bc <HAL_PCD_MspInit+0xa4>)
 800a674:	f7f7 ff2e 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a678:	4b0f      	ldr	r3, [pc, #60]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	4a0e      	ldr	r2, [pc, #56]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	6353      	str	r3, [r2, #52]	; 0x34
 800a684:	2300      	movs	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	4b0b      	ldr	r3, [pc, #44]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68c:	4a0a      	ldr	r2, [pc, #40]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a68e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a692:	6453      	str	r3, [r2, #68]	; 0x44
 800a694:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <HAL_PCD_MspInit+0xa0>)
 800a696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	2043      	movs	r0, #67	; 0x43
 800a6a6:	f7f7 fa74 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6aa:	2043      	movs	r0, #67	; 0x43
 800a6ac:	f7f7 fa8d 	bl	8001bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6b0:	bf00      	nop
 800a6b2:	3728      	adds	r7, #40	; 0x28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	40023800 	.word	0x40023800
 800a6bc:	40020000 	.word	0x40020000

0800a6c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fe fa58 	bl	8008b8c <USBD_LL_SetupStage>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	4619      	mov	r1, r3
 800a70e:	f7fe fa92 	bl	8008c36 <USBD_LL_DataOutStage>
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	334c      	adds	r3, #76	; 0x4c
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	4619      	mov	r1, r3
 800a742:	f7fe fb2b 	bl	8008d9c <USBD_LL_DataInStage>
}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fc5c 	bl	800901a <USBD_LL_SOF>
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a772:	2301      	movs	r3, #1
 800a774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]
 800a782:	e008      	b.n	800a796 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d102      	bne.n	800a792 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a78c:	2301      	movs	r3, #1
 800a78e:	73fb      	strb	r3, [r7, #15]
 800a790:	e001      	b.n	800a796 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a792:	f7f7 f85b 	bl	800184c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a79c:	7bfa      	ldrb	r2, [r7, #15]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fe fbff 	bl	8008fa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe fba7 	bl	8008f00 <USBD_LL_Reset>
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fbf9 	bl	8008fc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6812      	ldr	r2, [r2, #0]
 800a7de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7e2:	f043 0301 	orr.w	r3, r3, #1
 800a7e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a1b      	ldr	r3, [r3, #32]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <HAL_PCD_SuspendCallback+0x48>)
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4a03      	ldr	r2, [pc, #12]	; (800a804 <HAL_PCD_SuspendCallback+0x48>)
 800a7f6:	f043 0306 	orr.w	r3, r3, #6
 800a7fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	e000ed00 	.word	0xe000ed00

0800a808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fbe8 	bl	8008fec <USBD_LL_Resume>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fc3f 	bl	80090be <USBD_LL_IsoOUTIncomplete>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a85a:	78fa      	ldrb	r2, [r7, #3]
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fbfb 	bl	800905a <USBD_LL_IsoINIncomplete>
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe fc51 	bl	8009122 <USBD_LL_DevConnected>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fc4d 	bl	8009136 <USBD_LL_DevDisconnected>
}
 800a89c:	bf00      	nop
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d13c      	bne.n	800a92e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a8b4:	4a20      	ldr	r2, [pc, #128]	; (800a938 <USBD_LL_Init+0x94>)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a1e      	ldr	r2, [pc, #120]	; (800a938 <USBD_LL_Init+0x94>)
 800a8c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8c4:	4b1c      	ldr	r3, [pc, #112]	; (800a938 <USBD_LL_Init+0x94>)
 800a8c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a8cc:	4b1a      	ldr	r3, [pc, #104]	; (800a938 <USBD_LL_Init+0x94>)
 800a8ce:	2204      	movs	r2, #4
 800a8d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8d2:	4b19      	ldr	r3, [pc, #100]	; (800a938 <USBD_LL_Init+0x94>)
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8d8:	4b17      	ldr	r3, [pc, #92]	; (800a938 <USBD_LL_Init+0x94>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8de:	4b16      	ldr	r3, [pc, #88]	; (800a938 <USBD_LL_Init+0x94>)
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a8e4:	4b14      	ldr	r3, [pc, #80]	; (800a938 <USBD_LL_Init+0x94>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8ea:	4b13      	ldr	r3, [pc, #76]	; (800a938 <USBD_LL_Init+0x94>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8f0:	4b11      	ldr	r3, [pc, #68]	; (800a938 <USBD_LL_Init+0x94>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8f6:	4b10      	ldr	r3, [pc, #64]	; (800a938 <USBD_LL_Init+0x94>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8fc:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <USBD_LL_Init+0x94>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a902:	480d      	ldr	r0, [pc, #52]	; (800a938 <USBD_LL_Init+0x94>)
 800a904:	f7f8 f8ab 	bl	8002a5e <HAL_PCD_Init>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a90e:	f7f6 ff9d 	bl	800184c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a912:	2180      	movs	r1, #128	; 0x80
 800a914:	4808      	ldr	r0, [pc, #32]	; (800a938 <USBD_LL_Init+0x94>)
 800a916:	f7f9 fb01 	bl	8003f1c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a91a:	2240      	movs	r2, #64	; 0x40
 800a91c:	2100      	movs	r1, #0
 800a91e:	4806      	ldr	r0, [pc, #24]	; (800a938 <USBD_LL_Init+0x94>)
 800a920:	f7f9 fab6 	bl	8003e90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a924:	2280      	movs	r2, #128	; 0x80
 800a926:	2101      	movs	r1, #1
 800a928:	4803      	ldr	r0, [pc, #12]	; (800a938 <USBD_LL_Init+0x94>)
 800a92a:	f7f9 fab1 	bl	8003e90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20001ddc 	.word	0x20001ddc

0800a93c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a952:	4618      	mov	r0, r3
 800a954:	f7f8 f9a0 	bl	8002c98 <HAL_PCD_Start>
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f940 	bl	800abe4 <USBD_Get_USB_Status>
 800a964:	4603      	mov	r3, r0
 800a966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a968:	7bbb      	ldrb	r3, [r7, #14]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	4608      	mov	r0, r1
 800a97c:	4611      	mov	r1, r2
 800a97e:	461a      	mov	r2, r3
 800a980:	4603      	mov	r3, r0
 800a982:	70fb      	strb	r3, [r7, #3]
 800a984:	460b      	mov	r3, r1
 800a986:	70bb      	strb	r3, [r7, #2]
 800a988:	4613      	mov	r3, r2
 800a98a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a99a:	78bb      	ldrb	r3, [r7, #2]
 800a99c:	883a      	ldrh	r2, [r7, #0]
 800a99e:	78f9      	ldrb	r1, [r7, #3]
 800a9a0:	f7f8 fe71 	bl	8003686 <HAL_PCD_EP_Open>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f91a 	bl	800abe4 <USBD_Get_USB_Status>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9d8:	78fa      	ldrb	r2, [r7, #3]
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7f8 feba 	bl	8003756 <HAL_PCD_EP_Close>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f8fb 	bl	800abe4 <USBD_Get_USB_Status>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa16:	78fa      	ldrb	r2, [r7, #3]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f8 ff91 	bl	8003942 <HAL_PCD_EP_SetStall>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 f8dc 	bl	800abe4 <USBD_Get_USB_Status>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa54:	78fa      	ldrb	r2, [r7, #3]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f8 ffd6 	bl	8003a0a <HAL_PCD_EP_ClrStall>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 f8bd 	bl	800abe4 <USBD_Get_USB_Status>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da0b      	bge.n	800aaac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	333e      	adds	r3, #62	; 0x3e
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	e00b      	b.n	800aac4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aab2:	68f9      	ldr	r1, [r7, #12]
 800aab4:	4613      	mov	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc80      	pop	{r7}
 800aacc:	4770      	bx	lr

0800aace <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f8 fda5 	bl	800363c <HAL_PCD_SetAddress>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f873 	bl	800abe4 <USBD_Get_USB_Status>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab2a:	7af9      	ldrb	r1, [r7, #11]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	f7f8 febd 	bl	80038ae <HAL_PCD_EP_Transmit>
 800ab34:	4603      	mov	r3, r0
 800ab36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f852 	bl	800abe4 <USBD_Get_USB_Status>
 800ab40:	4603      	mov	r3, r0
 800ab42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab44:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b086      	sub	sp, #24
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab6c:	7af9      	ldrb	r1, [r7, #11]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	f7f8 fe3a 	bl	80037ea <HAL_PCD_EP_Receive>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 f831 	bl	800abe4 <USBD_Get_USB_Status>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab86:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aba2:	78fa      	ldrb	r2, [r7, #3]
 800aba4:	4611      	mov	r1, r2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f8 fe6a 	bl	8003880 <HAL_PCD_EP_GetRxCount>
 800abac:	4603      	mov	r3, r0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <USBD_static_malloc+0x14>)
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bc80      	pop	{r7}
 800abca:	4770      	bx	lr
 800abcc:	200022e8 	.word	0x200022e8

0800abd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]

}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	bc80      	pop	{r7}
 800abe0:	4770      	bx	lr
	...

0800abe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	4603      	mov	r3, r0
 800abec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d817      	bhi.n	800ac28 <USBD_Get_USB_Status+0x44>
 800abf8:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <USBD_Get_USB_Status+0x1c>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac11 	.word	0x0800ac11
 800ac04:	0800ac17 	.word	0x0800ac17
 800ac08:	0800ac1d 	.word	0x0800ac1d
 800ac0c:	0800ac23 	.word	0x0800ac23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
    break;
 800ac14:	e00b      	b.n	800ac2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac16:	2303      	movs	r3, #3
 800ac18:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1a:	e008      	b.n	800ac2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac20:	e005      	b.n	800ac2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac22:	2303      	movs	r3, #3
 800ac24:	73fb      	strb	r3, [r7, #15]
    break;
 800ac26:	e002      	b.n	800ac2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2c:	bf00      	nop
  }
  return usb_status;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bc80      	pop	{r7}
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop

0800ac3c <main>:




int main(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
  int ret = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]


  hwInit();
 800ac46:	f7f6 fe06 	bl	8001856 <hwInit>
  apInit();
 800ac4a:	f7f5 fc9f 	bl	800058c <apInit>

  apMain();
 800ac4e:	f7f5 fcd7 	bl	8000600 <apMain>


  return ret;
 800ac52:	687b      	ldr	r3, [r7, #4]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <__errno>:
 800ac5c:	4b01      	ldr	r3, [pc, #4]	; (800ac64 <__errno+0x8>)
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20000168 	.word	0x20000168

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4d0d      	ldr	r5, [pc, #52]	; (800aca0 <__libc_init_array+0x38>)
 800ac6c:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac6e:	1b64      	subs	r4, r4, r5
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	2600      	movs	r6, #0
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	4d0b      	ldr	r5, [pc, #44]	; (800aca8 <__libc_init_array+0x40>)
 800ac7a:	4c0c      	ldr	r4, [pc, #48]	; (800acac <__libc_init_array+0x44>)
 800ac7c:	f000 fca6 	bl	800b5cc <_init>
 800ac80:	1b64      	subs	r4, r4, r5
 800ac82:	10a4      	asrs	r4, r4, #2
 800ac84:	2600      	movs	r6, #0
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800b6f0 	.word	0x0800b6f0
 800aca4:	0800b6f0 	.word	0x0800b6f0
 800aca8:	0800b6f0 	.word	0x0800b6f0
 800acac:	0800b6f4 	.word	0x0800b6f4

0800acb0 <memset>:
 800acb0:	4402      	add	r2, r0
 800acb2:	4603      	mov	r3, r0
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d100      	bne.n	800acba <memset+0xa>
 800acb8:	4770      	bx	lr
 800acba:	f803 1b01 	strb.w	r1, [r3], #1
 800acbe:	e7f9      	b.n	800acb4 <memset+0x4>

0800acc0 <_vsniprintf_r>:
 800acc0:	b530      	push	{r4, r5, lr}
 800acc2:	4614      	mov	r4, r2
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	b09b      	sub	sp, #108	; 0x6c
 800acc8:	4605      	mov	r5, r0
 800acca:	461a      	mov	r2, r3
 800accc:	da05      	bge.n	800acda <_vsniprintf_r+0x1a>
 800acce:	238b      	movs	r3, #139	; 0x8b
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	f04f 30ff 	mov.w	r0, #4294967295
 800acd6:	b01b      	add	sp, #108	; 0x6c
 800acd8:	bd30      	pop	{r4, r5, pc}
 800acda:	f44f 7302 	mov.w	r3, #520	; 0x208
 800acde:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ace2:	bf14      	ite	ne
 800ace4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ace8:	4623      	moveq	r3, r4
 800acea:	9302      	str	r3, [sp, #8]
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf2:	9100      	str	r1, [sp, #0]
 800acf4:	9104      	str	r1, [sp, #16]
 800acf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800acfa:	4669      	mov	r1, sp
 800acfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800acfe:	f000 f875 	bl	800adec <_svfiprintf_r>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	bfbc      	itt	lt
 800ad06:	238b      	movlt	r3, #139	; 0x8b
 800ad08:	602b      	strlt	r3, [r5, #0]
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d0e3      	beq.n	800acd6 <_vsniprintf_r+0x16>
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	e7df      	b.n	800acd6 <_vsniprintf_r+0x16>
	...

0800ad18 <vsniprintf>:
 800ad18:	b507      	push	{r0, r1, r2, lr}
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	460a      	mov	r2, r1
 800ad20:	4601      	mov	r1, r0
 800ad22:	4803      	ldr	r0, [pc, #12]	; (800ad30 <vsniprintf+0x18>)
 800ad24:	6800      	ldr	r0, [r0, #0]
 800ad26:	f7ff ffcb 	bl	800acc0 <_vsniprintf_r>
 800ad2a:	b003      	add	sp, #12
 800ad2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad30:	20000168 	.word	0x20000168

0800ad34 <__ssputs_r>:
 800ad34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	688e      	ldr	r6, [r1, #8]
 800ad3a:	429e      	cmp	r6, r3
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	4690      	mov	r8, r2
 800ad42:	461f      	mov	r7, r3
 800ad44:	d838      	bhi.n	800adb8 <__ssputs_r+0x84>
 800ad46:	898a      	ldrh	r2, [r1, #12]
 800ad48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad4c:	d032      	beq.n	800adb4 <__ssputs_r+0x80>
 800ad4e:	6825      	ldr	r5, [r4, #0]
 800ad50:	6909      	ldr	r1, [r1, #16]
 800ad52:	eba5 0901 	sub.w	r9, r5, r1
 800ad56:	6965      	ldr	r5, [r4, #20]
 800ad58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad60:	3301      	adds	r3, #1
 800ad62:	444b      	add	r3, r9
 800ad64:	106d      	asrs	r5, r5, #1
 800ad66:	429d      	cmp	r5, r3
 800ad68:	bf38      	it	cc
 800ad6a:	461d      	movcc	r5, r3
 800ad6c:	0553      	lsls	r3, r2, #21
 800ad6e:	d531      	bpl.n	800add4 <__ssputs_r+0xa0>
 800ad70:	4629      	mov	r1, r5
 800ad72:	f000 fb61 	bl	800b438 <_malloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	b950      	cbnz	r0, 800ad90 <__ssputs_r+0x5c>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	f8ca 3000 	str.w	r3, [sl]
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad90:	6921      	ldr	r1, [r4, #16]
 800ad92:	464a      	mov	r2, r9
 800ad94:	f000 fabe 	bl	800b314 <memcpy>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	6126      	str	r6, [r4, #16]
 800ada6:	6165      	str	r5, [r4, #20]
 800ada8:	444e      	add	r6, r9
 800adaa:	eba5 0509 	sub.w	r5, r5, r9
 800adae:	6026      	str	r6, [r4, #0]
 800adb0:	60a5      	str	r5, [r4, #8]
 800adb2:	463e      	mov	r6, r7
 800adb4:	42be      	cmp	r6, r7
 800adb6:	d900      	bls.n	800adba <__ssputs_r+0x86>
 800adb8:	463e      	mov	r6, r7
 800adba:	6820      	ldr	r0, [r4, #0]
 800adbc:	4632      	mov	r2, r6
 800adbe:	4641      	mov	r1, r8
 800adc0:	f000 fab6 	bl	800b330 <memmove>
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	1b9b      	subs	r3, r3, r6
 800adc8:	60a3      	str	r3, [r4, #8]
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	4433      	add	r3, r6
 800adce:	6023      	str	r3, [r4, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e7db      	b.n	800ad8c <__ssputs_r+0x58>
 800add4:	462a      	mov	r2, r5
 800add6:	f000 fba3 	bl	800b520 <_realloc_r>
 800adda:	4606      	mov	r6, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	d1e1      	bne.n	800ada4 <__ssputs_r+0x70>
 800ade0:	6921      	ldr	r1, [r4, #16]
 800ade2:	4650      	mov	r0, sl
 800ade4:	f000 fabe 	bl	800b364 <_free_r>
 800ade8:	e7c7      	b.n	800ad7a <__ssputs_r+0x46>
	...

0800adec <_svfiprintf_r>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	4698      	mov	r8, r3
 800adf2:	898b      	ldrh	r3, [r1, #12]
 800adf4:	061b      	lsls	r3, r3, #24
 800adf6:	b09d      	sub	sp, #116	; 0x74
 800adf8:	4607      	mov	r7, r0
 800adfa:	460d      	mov	r5, r1
 800adfc:	4614      	mov	r4, r2
 800adfe:	d50e      	bpl.n	800ae1e <_svfiprintf_r+0x32>
 800ae00:	690b      	ldr	r3, [r1, #16]
 800ae02:	b963      	cbnz	r3, 800ae1e <_svfiprintf_r+0x32>
 800ae04:	2140      	movs	r1, #64	; 0x40
 800ae06:	f000 fb17 	bl	800b438 <_malloc_r>
 800ae0a:	6028      	str	r0, [r5, #0]
 800ae0c:	6128      	str	r0, [r5, #16]
 800ae0e:	b920      	cbnz	r0, 800ae1a <_svfiprintf_r+0x2e>
 800ae10:	230c      	movs	r3, #12
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	e0d1      	b.n	800afbe <_svfiprintf_r+0x1d2>
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	616b      	str	r3, [r5, #20]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9309      	str	r3, [sp, #36]	; 0x24
 800ae22:	2320      	movs	r3, #32
 800ae24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2c:	2330      	movs	r3, #48	; 0x30
 800ae2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afd8 <_svfiprintf_r+0x1ec>
 800ae32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae36:	f04f 0901 	mov.w	r9, #1
 800ae3a:	4623      	mov	r3, r4
 800ae3c:	469a      	mov	sl, r3
 800ae3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae42:	b10a      	cbz	r2, 800ae48 <_svfiprintf_r+0x5c>
 800ae44:	2a25      	cmp	r2, #37	; 0x25
 800ae46:	d1f9      	bne.n	800ae3c <_svfiprintf_r+0x50>
 800ae48:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4c:	d00b      	beq.n	800ae66 <_svfiprintf_r+0x7a>
 800ae4e:	465b      	mov	r3, fp
 800ae50:	4622      	mov	r2, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	4638      	mov	r0, r7
 800ae56:	f7ff ff6d 	bl	800ad34 <__ssputs_r>
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	f000 80aa 	beq.w	800afb4 <_svfiprintf_r+0x1c8>
 800ae60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae62:	445a      	add	r2, fp
 800ae64:	9209      	str	r2, [sp, #36]	; 0x24
 800ae66:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80a2 	beq.w	800afb4 <_svfiprintf_r+0x1c8>
 800ae70:	2300      	movs	r3, #0
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295
 800ae76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae7a:	f10a 0a01 	add.w	sl, sl, #1
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	9307      	str	r3, [sp, #28]
 800ae82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae86:	931a      	str	r3, [sp, #104]	; 0x68
 800ae88:	4654      	mov	r4, sl
 800ae8a:	2205      	movs	r2, #5
 800ae8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae90:	4851      	ldr	r0, [pc, #324]	; (800afd8 <_svfiprintf_r+0x1ec>)
 800ae92:	f7f5 f99d 	bl	80001d0 <memchr>
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	b9d8      	cbnz	r0, 800aed2 <_svfiprintf_r+0xe6>
 800ae9a:	06d0      	lsls	r0, r2, #27
 800ae9c:	bf44      	itt	mi
 800ae9e:	2320      	movmi	r3, #32
 800aea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea4:	0711      	lsls	r1, r2, #28
 800aea6:	bf44      	itt	mi
 800aea8:	232b      	movmi	r3, #43	; 0x2b
 800aeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeae:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb2:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb4:	d015      	beq.n	800aee2 <_svfiprintf_r+0xf6>
 800aeb6:	9a07      	ldr	r2, [sp, #28]
 800aeb8:	4654      	mov	r4, sl
 800aeba:	2000      	movs	r0, #0
 800aebc:	f04f 0c0a 	mov.w	ip, #10
 800aec0:	4621      	mov	r1, r4
 800aec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec6:	3b30      	subs	r3, #48	; 0x30
 800aec8:	2b09      	cmp	r3, #9
 800aeca:	d94e      	bls.n	800af6a <_svfiprintf_r+0x17e>
 800aecc:	b1b0      	cbz	r0, 800aefc <_svfiprintf_r+0x110>
 800aece:	9207      	str	r2, [sp, #28]
 800aed0:	e014      	b.n	800aefc <_svfiprintf_r+0x110>
 800aed2:	eba0 0308 	sub.w	r3, r0, r8
 800aed6:	fa09 f303 	lsl.w	r3, r9, r3
 800aeda:	4313      	orrs	r3, r2
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	46a2      	mov	sl, r4
 800aee0:	e7d2      	b.n	800ae88 <_svfiprintf_r+0x9c>
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	1d19      	adds	r1, r3, #4
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	9103      	str	r1, [sp, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bfbb      	ittet	lt
 800aeee:	425b      	neglt	r3, r3
 800aef0:	f042 0202 	orrlt.w	r2, r2, #2
 800aef4:	9307      	strge	r3, [sp, #28]
 800aef6:	9307      	strlt	r3, [sp, #28]
 800aef8:	bfb8      	it	lt
 800aefa:	9204      	strlt	r2, [sp, #16]
 800aefc:	7823      	ldrb	r3, [r4, #0]
 800aefe:	2b2e      	cmp	r3, #46	; 0x2e
 800af00:	d10c      	bne.n	800af1c <_svfiprintf_r+0x130>
 800af02:	7863      	ldrb	r3, [r4, #1]
 800af04:	2b2a      	cmp	r3, #42	; 0x2a
 800af06:	d135      	bne.n	800af74 <_svfiprintf_r+0x188>
 800af08:	9b03      	ldr	r3, [sp, #12]
 800af0a:	1d1a      	adds	r2, r3, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	9203      	str	r2, [sp, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfb8      	it	lt
 800af14:	f04f 33ff 	movlt.w	r3, #4294967295
 800af18:	3402      	adds	r4, #2
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800afdc <_svfiprintf_r+0x1f0>
 800af20:	7821      	ldrb	r1, [r4, #0]
 800af22:	2203      	movs	r2, #3
 800af24:	4650      	mov	r0, sl
 800af26:	f7f5 f953 	bl	80001d0 <memchr>
 800af2a:	b140      	cbz	r0, 800af3e <_svfiprintf_r+0x152>
 800af2c:	2340      	movs	r3, #64	; 0x40
 800af2e:	eba0 000a 	sub.w	r0, r0, sl
 800af32:	fa03 f000 	lsl.w	r0, r3, r0
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	4303      	orrs	r3, r0
 800af3a:	3401      	adds	r4, #1
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af42:	4827      	ldr	r0, [pc, #156]	; (800afe0 <_svfiprintf_r+0x1f4>)
 800af44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af48:	2206      	movs	r2, #6
 800af4a:	f7f5 f941 	bl	80001d0 <memchr>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d038      	beq.n	800afc4 <_svfiprintf_r+0x1d8>
 800af52:	4b24      	ldr	r3, [pc, #144]	; (800afe4 <_svfiprintf_r+0x1f8>)
 800af54:	bb1b      	cbnz	r3, 800af9e <_svfiprintf_r+0x1b2>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	3307      	adds	r3, #7
 800af5a:	f023 0307 	bic.w	r3, r3, #7
 800af5e:	3308      	adds	r3, #8
 800af60:	9303      	str	r3, [sp, #12]
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	4433      	add	r3, r6
 800af66:	9309      	str	r3, [sp, #36]	; 0x24
 800af68:	e767      	b.n	800ae3a <_svfiprintf_r+0x4e>
 800af6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6e:	460c      	mov	r4, r1
 800af70:	2001      	movs	r0, #1
 800af72:	e7a5      	b.n	800aec0 <_svfiprintf_r+0xd4>
 800af74:	2300      	movs	r3, #0
 800af76:	3401      	adds	r4, #1
 800af78:	9305      	str	r3, [sp, #20]
 800af7a:	4619      	mov	r1, r3
 800af7c:	f04f 0c0a 	mov.w	ip, #10
 800af80:	4620      	mov	r0, r4
 800af82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af86:	3a30      	subs	r2, #48	; 0x30
 800af88:	2a09      	cmp	r2, #9
 800af8a:	d903      	bls.n	800af94 <_svfiprintf_r+0x1a8>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0c5      	beq.n	800af1c <_svfiprintf_r+0x130>
 800af90:	9105      	str	r1, [sp, #20]
 800af92:	e7c3      	b.n	800af1c <_svfiprintf_r+0x130>
 800af94:	fb0c 2101 	mla	r1, ip, r1, r2
 800af98:	4604      	mov	r4, r0
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7f0      	b.n	800af80 <_svfiprintf_r+0x194>
 800af9e:	ab03      	add	r3, sp, #12
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	462a      	mov	r2, r5
 800afa4:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <_svfiprintf_r+0x1fc>)
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	4638      	mov	r0, r7
 800afaa:	f3af 8000 	nop.w
 800afae:	1c42      	adds	r2, r0, #1
 800afb0:	4606      	mov	r6, r0
 800afb2:	d1d6      	bne.n	800af62 <_svfiprintf_r+0x176>
 800afb4:	89ab      	ldrh	r3, [r5, #12]
 800afb6:	065b      	lsls	r3, r3, #25
 800afb8:	f53f af2c 	bmi.w	800ae14 <_svfiprintf_r+0x28>
 800afbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afbe:	b01d      	add	sp, #116	; 0x74
 800afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	ab03      	add	r3, sp, #12
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	462a      	mov	r2, r5
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <_svfiprintf_r+0x1fc>)
 800afcc:	a904      	add	r1, sp, #16
 800afce:	4638      	mov	r0, r7
 800afd0:	f000 f87a 	bl	800b0c8 <_printf_i>
 800afd4:	e7eb      	b.n	800afae <_svfiprintf_r+0x1c2>
 800afd6:	bf00      	nop
 800afd8:	0800b6b4 	.word	0x0800b6b4
 800afdc:	0800b6ba 	.word	0x0800b6ba
 800afe0:	0800b6be 	.word	0x0800b6be
 800afe4:	00000000 	.word	0x00000000
 800afe8:	0800ad35 	.word	0x0800ad35

0800afec <_printf_common>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	4616      	mov	r6, r2
 800aff2:	4699      	mov	r9, r3
 800aff4:	688a      	ldr	r2, [r1, #8]
 800aff6:	690b      	ldr	r3, [r1, #16]
 800aff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800affc:	4293      	cmp	r3, r2
 800affe:	bfb8      	it	lt
 800b000:	4613      	movlt	r3, r2
 800b002:	6033      	str	r3, [r6, #0]
 800b004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b008:	4607      	mov	r7, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b10a      	cbz	r2, 800b012 <_printf_common+0x26>
 800b00e:	3301      	adds	r3, #1
 800b010:	6033      	str	r3, [r6, #0]
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	0699      	lsls	r1, r3, #26
 800b016:	bf42      	ittt	mi
 800b018:	6833      	ldrmi	r3, [r6, #0]
 800b01a:	3302      	addmi	r3, #2
 800b01c:	6033      	strmi	r3, [r6, #0]
 800b01e:	6825      	ldr	r5, [r4, #0]
 800b020:	f015 0506 	ands.w	r5, r5, #6
 800b024:	d106      	bne.n	800b034 <_printf_common+0x48>
 800b026:	f104 0a19 	add.w	sl, r4, #25
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	6832      	ldr	r2, [r6, #0]
 800b02e:	1a9b      	subs	r3, r3, r2
 800b030:	42ab      	cmp	r3, r5
 800b032:	dc26      	bgt.n	800b082 <_printf_common+0x96>
 800b034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b038:	1e13      	subs	r3, r2, #0
 800b03a:	6822      	ldr	r2, [r4, #0]
 800b03c:	bf18      	it	ne
 800b03e:	2301      	movne	r3, #1
 800b040:	0692      	lsls	r2, r2, #26
 800b042:	d42b      	bmi.n	800b09c <_printf_common+0xb0>
 800b044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b048:	4649      	mov	r1, r9
 800b04a:	4638      	mov	r0, r7
 800b04c:	47c0      	blx	r8
 800b04e:	3001      	adds	r0, #1
 800b050:	d01e      	beq.n	800b090 <_printf_common+0xa4>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	68e5      	ldr	r5, [r4, #12]
 800b056:	6832      	ldr	r2, [r6, #0]
 800b058:	f003 0306 	and.w	r3, r3, #6
 800b05c:	2b04      	cmp	r3, #4
 800b05e:	bf08      	it	eq
 800b060:	1aad      	subeq	r5, r5, r2
 800b062:	68a3      	ldr	r3, [r4, #8]
 800b064:	6922      	ldr	r2, [r4, #16]
 800b066:	bf0c      	ite	eq
 800b068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b06c:	2500      	movne	r5, #0
 800b06e:	4293      	cmp	r3, r2
 800b070:	bfc4      	itt	gt
 800b072:	1a9b      	subgt	r3, r3, r2
 800b074:	18ed      	addgt	r5, r5, r3
 800b076:	2600      	movs	r6, #0
 800b078:	341a      	adds	r4, #26
 800b07a:	42b5      	cmp	r5, r6
 800b07c:	d11a      	bne.n	800b0b4 <_printf_common+0xc8>
 800b07e:	2000      	movs	r0, #0
 800b080:	e008      	b.n	800b094 <_printf_common+0xa8>
 800b082:	2301      	movs	r3, #1
 800b084:	4652      	mov	r2, sl
 800b086:	4649      	mov	r1, r9
 800b088:	4638      	mov	r0, r7
 800b08a:	47c0      	blx	r8
 800b08c:	3001      	adds	r0, #1
 800b08e:	d103      	bne.n	800b098 <_printf_common+0xac>
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b098:	3501      	adds	r5, #1
 800b09a:	e7c6      	b.n	800b02a <_printf_common+0x3e>
 800b09c:	18e1      	adds	r1, r4, r3
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	2030      	movs	r0, #48	; 0x30
 800b0a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0a6:	4422      	add	r2, r4
 800b0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0b0:	3302      	adds	r3, #2
 800b0b2:	e7c7      	b.n	800b044 <_printf_common+0x58>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	47c0      	blx	r8
 800b0be:	3001      	adds	r0, #1
 800b0c0:	d0e6      	beq.n	800b090 <_printf_common+0xa4>
 800b0c2:	3601      	adds	r6, #1
 800b0c4:	e7d9      	b.n	800b07a <_printf_common+0x8e>
	...

0800b0c8 <_printf_i>:
 800b0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0cc:	7e0f      	ldrb	r7, [r1, #24]
 800b0ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0d0:	2f78      	cmp	r7, #120	; 0x78
 800b0d2:	4691      	mov	r9, r2
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	469a      	mov	sl, r3
 800b0da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0de:	d807      	bhi.n	800b0f0 <_printf_i+0x28>
 800b0e0:	2f62      	cmp	r7, #98	; 0x62
 800b0e2:	d80a      	bhi.n	800b0fa <_printf_i+0x32>
 800b0e4:	2f00      	cmp	r7, #0
 800b0e6:	f000 80d8 	beq.w	800b29a <_printf_i+0x1d2>
 800b0ea:	2f58      	cmp	r7, #88	; 0x58
 800b0ec:	f000 80a3 	beq.w	800b236 <_printf_i+0x16e>
 800b0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0f8:	e03a      	b.n	800b170 <_printf_i+0xa8>
 800b0fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0fe:	2b15      	cmp	r3, #21
 800b100:	d8f6      	bhi.n	800b0f0 <_printf_i+0x28>
 800b102:	a101      	add	r1, pc, #4	; (adr r1, 800b108 <_printf_i+0x40>)
 800b104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b108:	0800b161 	.word	0x0800b161
 800b10c:	0800b175 	.word	0x0800b175
 800b110:	0800b0f1 	.word	0x0800b0f1
 800b114:	0800b0f1 	.word	0x0800b0f1
 800b118:	0800b0f1 	.word	0x0800b0f1
 800b11c:	0800b0f1 	.word	0x0800b0f1
 800b120:	0800b175 	.word	0x0800b175
 800b124:	0800b0f1 	.word	0x0800b0f1
 800b128:	0800b0f1 	.word	0x0800b0f1
 800b12c:	0800b0f1 	.word	0x0800b0f1
 800b130:	0800b0f1 	.word	0x0800b0f1
 800b134:	0800b281 	.word	0x0800b281
 800b138:	0800b1a5 	.word	0x0800b1a5
 800b13c:	0800b263 	.word	0x0800b263
 800b140:	0800b0f1 	.word	0x0800b0f1
 800b144:	0800b0f1 	.word	0x0800b0f1
 800b148:	0800b2a3 	.word	0x0800b2a3
 800b14c:	0800b0f1 	.word	0x0800b0f1
 800b150:	0800b1a5 	.word	0x0800b1a5
 800b154:	0800b0f1 	.word	0x0800b0f1
 800b158:	0800b0f1 	.word	0x0800b0f1
 800b15c:	0800b26b 	.word	0x0800b26b
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	1d1a      	adds	r2, r3, #4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	602a      	str	r2, [r5, #0]
 800b168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b16c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b170:	2301      	movs	r3, #1
 800b172:	e0a3      	b.n	800b2bc <_printf_i+0x1f4>
 800b174:	6820      	ldr	r0, [r4, #0]
 800b176:	6829      	ldr	r1, [r5, #0]
 800b178:	0606      	lsls	r6, r0, #24
 800b17a:	f101 0304 	add.w	r3, r1, #4
 800b17e:	d50a      	bpl.n	800b196 <_printf_i+0xce>
 800b180:	680e      	ldr	r6, [r1, #0]
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	2e00      	cmp	r6, #0
 800b186:	da03      	bge.n	800b190 <_printf_i+0xc8>
 800b188:	232d      	movs	r3, #45	; 0x2d
 800b18a:	4276      	negs	r6, r6
 800b18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b190:	485e      	ldr	r0, [pc, #376]	; (800b30c <_printf_i+0x244>)
 800b192:	230a      	movs	r3, #10
 800b194:	e019      	b.n	800b1ca <_printf_i+0x102>
 800b196:	680e      	ldr	r6, [r1, #0]
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b19e:	bf18      	it	ne
 800b1a0:	b236      	sxthne	r6, r6
 800b1a2:	e7ef      	b.n	800b184 <_printf_i+0xbc>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	1d19      	adds	r1, r3, #4
 800b1aa:	6029      	str	r1, [r5, #0]
 800b1ac:	0601      	lsls	r1, r0, #24
 800b1ae:	d501      	bpl.n	800b1b4 <_printf_i+0xec>
 800b1b0:	681e      	ldr	r6, [r3, #0]
 800b1b2:	e002      	b.n	800b1ba <_printf_i+0xf2>
 800b1b4:	0646      	lsls	r6, r0, #25
 800b1b6:	d5fb      	bpl.n	800b1b0 <_printf_i+0xe8>
 800b1b8:	881e      	ldrh	r6, [r3, #0]
 800b1ba:	4854      	ldr	r0, [pc, #336]	; (800b30c <_printf_i+0x244>)
 800b1bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b1be:	bf0c      	ite	eq
 800b1c0:	2308      	moveq	r3, #8
 800b1c2:	230a      	movne	r3, #10
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1ca:	6865      	ldr	r5, [r4, #4]
 800b1cc:	60a5      	str	r5, [r4, #8]
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	bfa2      	ittt	ge
 800b1d2:	6821      	ldrge	r1, [r4, #0]
 800b1d4:	f021 0104 	bicge.w	r1, r1, #4
 800b1d8:	6021      	strge	r1, [r4, #0]
 800b1da:	b90e      	cbnz	r6, 800b1e0 <_printf_i+0x118>
 800b1dc:	2d00      	cmp	r5, #0
 800b1de:	d04d      	beq.n	800b27c <_printf_i+0x1b4>
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b1ea:	5dc7      	ldrb	r7, [r0, r7]
 800b1ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1f0:	4637      	mov	r7, r6
 800b1f2:	42bb      	cmp	r3, r7
 800b1f4:	460e      	mov	r6, r1
 800b1f6:	d9f4      	bls.n	800b1e2 <_printf_i+0x11a>
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d10b      	bne.n	800b214 <_printf_i+0x14c>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	07de      	lsls	r6, r3, #31
 800b200:	d508      	bpl.n	800b214 <_printf_i+0x14c>
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	6861      	ldr	r1, [r4, #4]
 800b206:	4299      	cmp	r1, r3
 800b208:	bfde      	ittt	le
 800b20a:	2330      	movle	r3, #48	; 0x30
 800b20c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b210:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b214:	1b52      	subs	r2, r2, r5
 800b216:	6122      	str	r2, [r4, #16]
 800b218:	f8cd a000 	str.w	sl, [sp]
 800b21c:	464b      	mov	r3, r9
 800b21e:	aa03      	add	r2, sp, #12
 800b220:	4621      	mov	r1, r4
 800b222:	4640      	mov	r0, r8
 800b224:	f7ff fee2 	bl	800afec <_printf_common>
 800b228:	3001      	adds	r0, #1
 800b22a:	d14c      	bne.n	800b2c6 <_printf_i+0x1fe>
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	b004      	add	sp, #16
 800b232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b236:	4835      	ldr	r0, [pc, #212]	; (800b30c <_printf_i+0x244>)
 800b238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b23c:	6829      	ldr	r1, [r5, #0]
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	f851 6b04 	ldr.w	r6, [r1], #4
 800b244:	6029      	str	r1, [r5, #0]
 800b246:	061d      	lsls	r5, r3, #24
 800b248:	d514      	bpl.n	800b274 <_printf_i+0x1ac>
 800b24a:	07df      	lsls	r7, r3, #31
 800b24c:	bf44      	itt	mi
 800b24e:	f043 0320 	orrmi.w	r3, r3, #32
 800b252:	6023      	strmi	r3, [r4, #0]
 800b254:	b91e      	cbnz	r6, 800b25e <_printf_i+0x196>
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	f023 0320 	bic.w	r3, r3, #32
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	2310      	movs	r3, #16
 800b260:	e7b0      	b.n	800b1c4 <_printf_i+0xfc>
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	f043 0320 	orr.w	r3, r3, #32
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	2378      	movs	r3, #120	; 0x78
 800b26c:	4828      	ldr	r0, [pc, #160]	; (800b310 <_printf_i+0x248>)
 800b26e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b272:	e7e3      	b.n	800b23c <_printf_i+0x174>
 800b274:	0659      	lsls	r1, r3, #25
 800b276:	bf48      	it	mi
 800b278:	b2b6      	uxthmi	r6, r6
 800b27a:	e7e6      	b.n	800b24a <_printf_i+0x182>
 800b27c:	4615      	mov	r5, r2
 800b27e:	e7bb      	b.n	800b1f8 <_printf_i+0x130>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	6826      	ldr	r6, [r4, #0]
 800b284:	6961      	ldr	r1, [r4, #20]
 800b286:	1d18      	adds	r0, r3, #4
 800b288:	6028      	str	r0, [r5, #0]
 800b28a:	0635      	lsls	r5, r6, #24
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	d501      	bpl.n	800b294 <_printf_i+0x1cc>
 800b290:	6019      	str	r1, [r3, #0]
 800b292:	e002      	b.n	800b29a <_printf_i+0x1d2>
 800b294:	0670      	lsls	r0, r6, #25
 800b296:	d5fb      	bpl.n	800b290 <_printf_i+0x1c8>
 800b298:	8019      	strh	r1, [r3, #0]
 800b29a:	2300      	movs	r3, #0
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	4615      	mov	r5, r2
 800b2a0:	e7ba      	b.n	800b218 <_printf_i+0x150>
 800b2a2:	682b      	ldr	r3, [r5, #0]
 800b2a4:	1d1a      	adds	r2, r3, #4
 800b2a6:	602a      	str	r2, [r5, #0]
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	6862      	ldr	r2, [r4, #4]
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f7f4 ff8e 	bl	80001d0 <memchr>
 800b2b4:	b108      	cbz	r0, 800b2ba <_printf_i+0x1f2>
 800b2b6:	1b40      	subs	r0, r0, r5
 800b2b8:	6060      	str	r0, [r4, #4]
 800b2ba:	6863      	ldr	r3, [r4, #4]
 800b2bc:	6123      	str	r3, [r4, #16]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2c4:	e7a8      	b.n	800b218 <_printf_i+0x150>
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	462a      	mov	r2, r5
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	47d0      	blx	sl
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d0ab      	beq.n	800b22c <_printf_i+0x164>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	079b      	lsls	r3, r3, #30
 800b2d8:	d413      	bmi.n	800b302 <_printf_i+0x23a>
 800b2da:	68e0      	ldr	r0, [r4, #12]
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	4298      	cmp	r0, r3
 800b2e0:	bfb8      	it	lt
 800b2e2:	4618      	movlt	r0, r3
 800b2e4:	e7a4      	b.n	800b230 <_printf_i+0x168>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	47d0      	blx	sl
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d09b      	beq.n	800b22c <_printf_i+0x164>
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	68e3      	ldr	r3, [r4, #12]
 800b2f8:	9903      	ldr	r1, [sp, #12]
 800b2fa:	1a5b      	subs	r3, r3, r1
 800b2fc:	42ab      	cmp	r3, r5
 800b2fe:	dcf2      	bgt.n	800b2e6 <_printf_i+0x21e>
 800b300:	e7eb      	b.n	800b2da <_printf_i+0x212>
 800b302:	2500      	movs	r5, #0
 800b304:	f104 0619 	add.w	r6, r4, #25
 800b308:	e7f5      	b.n	800b2f6 <_printf_i+0x22e>
 800b30a:	bf00      	nop
 800b30c:	0800b6c5 	.word	0x0800b6c5
 800b310:	0800b6d6 	.word	0x0800b6d6

0800b314 <memcpy>:
 800b314:	440a      	add	r2, r1
 800b316:	4291      	cmp	r1, r2
 800b318:	f100 33ff 	add.w	r3, r0, #4294967295
 800b31c:	d100      	bne.n	800b320 <memcpy+0xc>
 800b31e:	4770      	bx	lr
 800b320:	b510      	push	{r4, lr}
 800b322:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b32a:	4291      	cmp	r1, r2
 800b32c:	d1f9      	bne.n	800b322 <memcpy+0xe>
 800b32e:	bd10      	pop	{r4, pc}

0800b330 <memmove>:
 800b330:	4288      	cmp	r0, r1
 800b332:	b510      	push	{r4, lr}
 800b334:	eb01 0402 	add.w	r4, r1, r2
 800b338:	d902      	bls.n	800b340 <memmove+0x10>
 800b33a:	4284      	cmp	r4, r0
 800b33c:	4623      	mov	r3, r4
 800b33e:	d807      	bhi.n	800b350 <memmove+0x20>
 800b340:	1e43      	subs	r3, r0, #1
 800b342:	42a1      	cmp	r1, r4
 800b344:	d008      	beq.n	800b358 <memmove+0x28>
 800b346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b34a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b34e:	e7f8      	b.n	800b342 <memmove+0x12>
 800b350:	4402      	add	r2, r0
 800b352:	4601      	mov	r1, r0
 800b354:	428a      	cmp	r2, r1
 800b356:	d100      	bne.n	800b35a <memmove+0x2a>
 800b358:	bd10      	pop	{r4, pc}
 800b35a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b35e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b362:	e7f7      	b.n	800b354 <memmove+0x24>

0800b364 <_free_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4605      	mov	r5, r0
 800b368:	2900      	cmp	r1, #0
 800b36a:	d041      	beq.n	800b3f0 <_free_r+0x8c>
 800b36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b370:	1f0c      	subs	r4, r1, #4
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfb8      	it	lt
 800b376:	18e4      	addlt	r4, r4, r3
 800b378:	f000 f912 	bl	800b5a0 <__malloc_lock>
 800b37c:	4a1d      	ldr	r2, [pc, #116]	; (800b3f4 <_free_r+0x90>)
 800b37e:	6813      	ldr	r3, [r2, #0]
 800b380:	b933      	cbnz	r3, 800b390 <_free_r+0x2c>
 800b382:	6063      	str	r3, [r4, #4]
 800b384:	6014      	str	r4, [r2, #0]
 800b386:	4628      	mov	r0, r5
 800b388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b38c:	f000 b90e 	b.w	800b5ac <__malloc_unlock>
 800b390:	42a3      	cmp	r3, r4
 800b392:	d908      	bls.n	800b3a6 <_free_r+0x42>
 800b394:	6820      	ldr	r0, [r4, #0]
 800b396:	1821      	adds	r1, r4, r0
 800b398:	428b      	cmp	r3, r1
 800b39a:	bf01      	itttt	eq
 800b39c:	6819      	ldreq	r1, [r3, #0]
 800b39e:	685b      	ldreq	r3, [r3, #4]
 800b3a0:	1809      	addeq	r1, r1, r0
 800b3a2:	6021      	streq	r1, [r4, #0]
 800b3a4:	e7ed      	b.n	800b382 <_free_r+0x1e>
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	b10b      	cbz	r3, 800b3b0 <_free_r+0x4c>
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d9fa      	bls.n	800b3a6 <_free_r+0x42>
 800b3b0:	6811      	ldr	r1, [r2, #0]
 800b3b2:	1850      	adds	r0, r2, r1
 800b3b4:	42a0      	cmp	r0, r4
 800b3b6:	d10b      	bne.n	800b3d0 <_free_r+0x6c>
 800b3b8:	6820      	ldr	r0, [r4, #0]
 800b3ba:	4401      	add	r1, r0
 800b3bc:	1850      	adds	r0, r2, r1
 800b3be:	4283      	cmp	r3, r0
 800b3c0:	6011      	str	r1, [r2, #0]
 800b3c2:	d1e0      	bne.n	800b386 <_free_r+0x22>
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	6053      	str	r3, [r2, #4]
 800b3ca:	4401      	add	r1, r0
 800b3cc:	6011      	str	r1, [r2, #0]
 800b3ce:	e7da      	b.n	800b386 <_free_r+0x22>
 800b3d0:	d902      	bls.n	800b3d8 <_free_r+0x74>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	602b      	str	r3, [r5, #0]
 800b3d6:	e7d6      	b.n	800b386 <_free_r+0x22>
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	1821      	adds	r1, r4, r0
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	bf04      	itt	eq
 800b3e0:	6819      	ldreq	r1, [r3, #0]
 800b3e2:	685b      	ldreq	r3, [r3, #4]
 800b3e4:	6063      	str	r3, [r4, #4]
 800b3e6:	bf04      	itt	eq
 800b3e8:	1809      	addeq	r1, r1, r0
 800b3ea:	6021      	streq	r1, [r4, #0]
 800b3ec:	6054      	str	r4, [r2, #4]
 800b3ee:	e7ca      	b.n	800b386 <_free_r+0x22>
 800b3f0:	bd38      	pop	{r3, r4, r5, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20002508 	.word	0x20002508

0800b3f8 <sbrk_aligned>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4e0e      	ldr	r6, [pc, #56]	; (800b434 <sbrk_aligned+0x3c>)
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	6831      	ldr	r1, [r6, #0]
 800b400:	4605      	mov	r5, r0
 800b402:	b911      	cbnz	r1, 800b40a <sbrk_aligned+0x12>
 800b404:	f000 f8bc 	bl	800b580 <_sbrk_r>
 800b408:	6030      	str	r0, [r6, #0]
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 f8b7 	bl	800b580 <_sbrk_r>
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	d00a      	beq.n	800b42c <sbrk_aligned+0x34>
 800b416:	1cc4      	adds	r4, r0, #3
 800b418:	f024 0403 	bic.w	r4, r4, #3
 800b41c:	42a0      	cmp	r0, r4
 800b41e:	d007      	beq.n	800b430 <sbrk_aligned+0x38>
 800b420:	1a21      	subs	r1, r4, r0
 800b422:	4628      	mov	r0, r5
 800b424:	f000 f8ac 	bl	800b580 <_sbrk_r>
 800b428:	3001      	adds	r0, #1
 800b42a:	d101      	bne.n	800b430 <sbrk_aligned+0x38>
 800b42c:	f04f 34ff 	mov.w	r4, #4294967295
 800b430:	4620      	mov	r0, r4
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	2000250c 	.word	0x2000250c

0800b438 <_malloc_r>:
 800b438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43c:	1ccd      	adds	r5, r1, #3
 800b43e:	f025 0503 	bic.w	r5, r5, #3
 800b442:	3508      	adds	r5, #8
 800b444:	2d0c      	cmp	r5, #12
 800b446:	bf38      	it	cc
 800b448:	250c      	movcc	r5, #12
 800b44a:	2d00      	cmp	r5, #0
 800b44c:	4607      	mov	r7, r0
 800b44e:	db01      	blt.n	800b454 <_malloc_r+0x1c>
 800b450:	42a9      	cmp	r1, r5
 800b452:	d905      	bls.n	800b460 <_malloc_r+0x28>
 800b454:	230c      	movs	r3, #12
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	2600      	movs	r6, #0
 800b45a:	4630      	mov	r0, r6
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b460:	4e2e      	ldr	r6, [pc, #184]	; (800b51c <_malloc_r+0xe4>)
 800b462:	f000 f89d 	bl	800b5a0 <__malloc_lock>
 800b466:	6833      	ldr	r3, [r6, #0]
 800b468:	461c      	mov	r4, r3
 800b46a:	bb34      	cbnz	r4, 800b4ba <_malloc_r+0x82>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4638      	mov	r0, r7
 800b470:	f7ff ffc2 	bl	800b3f8 <sbrk_aligned>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	4604      	mov	r4, r0
 800b478:	d14d      	bne.n	800b516 <_malloc_r+0xde>
 800b47a:	6834      	ldr	r4, [r6, #0]
 800b47c:	4626      	mov	r6, r4
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d140      	bne.n	800b504 <_malloc_r+0xcc>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	4631      	mov	r1, r6
 800b486:	4638      	mov	r0, r7
 800b488:	eb04 0803 	add.w	r8, r4, r3
 800b48c:	f000 f878 	bl	800b580 <_sbrk_r>
 800b490:	4580      	cmp	r8, r0
 800b492:	d13a      	bne.n	800b50a <_malloc_r+0xd2>
 800b494:	6821      	ldr	r1, [r4, #0]
 800b496:	3503      	adds	r5, #3
 800b498:	1a6d      	subs	r5, r5, r1
 800b49a:	f025 0503 	bic.w	r5, r5, #3
 800b49e:	3508      	adds	r5, #8
 800b4a0:	2d0c      	cmp	r5, #12
 800b4a2:	bf38      	it	cc
 800b4a4:	250c      	movcc	r5, #12
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ffa5 	bl	800b3f8 <sbrk_aligned>
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d02b      	beq.n	800b50a <_malloc_r+0xd2>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	442b      	add	r3, r5
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	e00e      	b.n	800b4d8 <_malloc_r+0xa0>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	1b52      	subs	r2, r2, r5
 800b4be:	d41e      	bmi.n	800b4fe <_malloc_r+0xc6>
 800b4c0:	2a0b      	cmp	r2, #11
 800b4c2:	d916      	bls.n	800b4f2 <_malloc_r+0xba>
 800b4c4:	1961      	adds	r1, r4, r5
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6025      	str	r5, [r4, #0]
 800b4ca:	bf18      	it	ne
 800b4cc:	6059      	strne	r1, [r3, #4]
 800b4ce:	6863      	ldr	r3, [r4, #4]
 800b4d0:	bf08      	it	eq
 800b4d2:	6031      	streq	r1, [r6, #0]
 800b4d4:	5162      	str	r2, [r4, r5]
 800b4d6:	604b      	str	r3, [r1, #4]
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f104 060b 	add.w	r6, r4, #11
 800b4de:	f000 f865 	bl	800b5ac <__malloc_unlock>
 800b4e2:	f026 0607 	bic.w	r6, r6, #7
 800b4e6:	1d23      	adds	r3, r4, #4
 800b4e8:	1af2      	subs	r2, r6, r3
 800b4ea:	d0b6      	beq.n	800b45a <_malloc_r+0x22>
 800b4ec:	1b9b      	subs	r3, r3, r6
 800b4ee:	50a3      	str	r3, [r4, r2]
 800b4f0:	e7b3      	b.n	800b45a <_malloc_r+0x22>
 800b4f2:	6862      	ldr	r2, [r4, #4]
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	bf0c      	ite	eq
 800b4f8:	6032      	streq	r2, [r6, #0]
 800b4fa:	605a      	strne	r2, [r3, #4]
 800b4fc:	e7ec      	b.n	800b4d8 <_malloc_r+0xa0>
 800b4fe:	4623      	mov	r3, r4
 800b500:	6864      	ldr	r4, [r4, #4]
 800b502:	e7b2      	b.n	800b46a <_malloc_r+0x32>
 800b504:	4634      	mov	r4, r6
 800b506:	6876      	ldr	r6, [r6, #4]
 800b508:	e7b9      	b.n	800b47e <_malloc_r+0x46>
 800b50a:	230c      	movs	r3, #12
 800b50c:	603b      	str	r3, [r7, #0]
 800b50e:	4638      	mov	r0, r7
 800b510:	f000 f84c 	bl	800b5ac <__malloc_unlock>
 800b514:	e7a1      	b.n	800b45a <_malloc_r+0x22>
 800b516:	6025      	str	r5, [r4, #0]
 800b518:	e7de      	b.n	800b4d8 <_malloc_r+0xa0>
 800b51a:	bf00      	nop
 800b51c:	20002508 	.word	0x20002508

0800b520 <_realloc_r>:
 800b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b524:	4680      	mov	r8, r0
 800b526:	4614      	mov	r4, r2
 800b528:	460e      	mov	r6, r1
 800b52a:	b921      	cbnz	r1, 800b536 <_realloc_r+0x16>
 800b52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b530:	4611      	mov	r1, r2
 800b532:	f7ff bf81 	b.w	800b438 <_malloc_r>
 800b536:	b92a      	cbnz	r2, 800b544 <_realloc_r+0x24>
 800b538:	f7ff ff14 	bl	800b364 <_free_r>
 800b53c:	4625      	mov	r5, r4
 800b53e:	4628      	mov	r0, r5
 800b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b544:	f000 f838 	bl	800b5b8 <_malloc_usable_size_r>
 800b548:	4284      	cmp	r4, r0
 800b54a:	4607      	mov	r7, r0
 800b54c:	d802      	bhi.n	800b554 <_realloc_r+0x34>
 800b54e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b552:	d812      	bhi.n	800b57a <_realloc_r+0x5a>
 800b554:	4621      	mov	r1, r4
 800b556:	4640      	mov	r0, r8
 800b558:	f7ff ff6e 	bl	800b438 <_malloc_r>
 800b55c:	4605      	mov	r5, r0
 800b55e:	2800      	cmp	r0, #0
 800b560:	d0ed      	beq.n	800b53e <_realloc_r+0x1e>
 800b562:	42bc      	cmp	r4, r7
 800b564:	4622      	mov	r2, r4
 800b566:	4631      	mov	r1, r6
 800b568:	bf28      	it	cs
 800b56a:	463a      	movcs	r2, r7
 800b56c:	f7ff fed2 	bl	800b314 <memcpy>
 800b570:	4631      	mov	r1, r6
 800b572:	4640      	mov	r0, r8
 800b574:	f7ff fef6 	bl	800b364 <_free_r>
 800b578:	e7e1      	b.n	800b53e <_realloc_r+0x1e>
 800b57a:	4635      	mov	r5, r6
 800b57c:	e7df      	b.n	800b53e <_realloc_r+0x1e>
	...

0800b580 <_sbrk_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d06      	ldr	r5, [pc, #24]	; (800b59c <_sbrk_r+0x1c>)
 800b584:	2300      	movs	r3, #0
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	602b      	str	r3, [r5, #0]
 800b58c:	f7f5 f9de 	bl	800094c <_sbrk>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_sbrk_r+0x1a>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_sbrk_r+0x1a>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20002510 	.word	0x20002510

0800b5a0 <__malloc_lock>:
 800b5a0:	4801      	ldr	r0, [pc, #4]	; (800b5a8 <__malloc_lock+0x8>)
 800b5a2:	f000 b811 	b.w	800b5c8 <__retarget_lock_acquire_recursive>
 800b5a6:	bf00      	nop
 800b5a8:	20002514 	.word	0x20002514

0800b5ac <__malloc_unlock>:
 800b5ac:	4801      	ldr	r0, [pc, #4]	; (800b5b4 <__malloc_unlock+0x8>)
 800b5ae:	f000 b80c 	b.w	800b5ca <__retarget_lock_release_recursive>
 800b5b2:	bf00      	nop
 800b5b4:	20002514 	.word	0x20002514

0800b5b8 <_malloc_usable_size_r>:
 800b5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5bc:	1f18      	subs	r0, r3, #4
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfbc      	itt	lt
 800b5c2:	580b      	ldrlt	r3, [r1, r0]
 800b5c4:	18c0      	addlt	r0, r0, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <__retarget_lock_acquire_recursive>:
 800b5c8:	4770      	bx	lr

0800b5ca <__retarget_lock_release_recursive>:
 800b5ca:	4770      	bx	lr

0800b5cc <_init>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	bf00      	nop
 800b5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d2:	bc08      	pop	{r3}
 800b5d4:	469e      	mov	lr, r3
 800b5d6:	4770      	bx	lr

0800b5d8 <_fini>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	bf00      	nop
 800b5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5de:	bc08      	pop	{r3}
 800b5e0:	469e      	mov	lr, r3
 800b5e2:	4770      	bx	lr

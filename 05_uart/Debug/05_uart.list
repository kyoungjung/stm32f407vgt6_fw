
05_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  20000000  08004844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
  8 .bss          00000404  200000d0  200000d0  000200d0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004d4  200004d4  000200d0  2**0
                  ALLOC
 10 .ARM.attributes 0000002a  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e57d  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023dc  00000000  00000000  0002e677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e18  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000d00  00000000  00000000  00031870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002b014  00000000  00000000  00032570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001900f  00000000  00000000  0005d584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fcf8b  00000000  00000000  00076593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0017351e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d50  00000000  00000000  00173570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047b8 	.word	0x080047b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	080047b8 	.word	0x080047b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14d      	bne.n	800034c <__udivmoddi4+0xac>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d968      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b152      	cbz	r2, 80002d2 <__udivmoddi4+0x32>
 80002bc:	fa01 f302 	lsl.w	r3, r1, r2
 80002c0:	f1c2 0120 	rsb	r1, r2, #32
 80002c4:	fa20 f101 	lsr.w	r1, r0, r1
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	ea41 0803 	orr.w	r8, r1, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fbb8 fef5 	udiv	lr, r8, r5
 80002dc:	fa1f f78c 	uxth.w	r7, ip
 80002e0:	fb05 831e 	mls	r3, r5, lr, r8
 80002e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e8:	fb0e f107 	mul.w	r1, lr, r7
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d90b      	bls.n	8000308 <__udivmoddi4+0x68>
 80002f0:	eb1c 0303 	adds.w	r3, ip, r3
 80002f4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002f8:	f080 811e 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fc:	4299      	cmp	r1, r3
 80002fe:	f240 811b 	bls.w	8000538 <__udivmoddi4+0x298>
 8000302:	f1ae 0e02 	sub.w	lr, lr, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000310:	fb05 3310 	mls	r3, r5, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x96>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 8108 	bcs.w	800053c <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8105 	bls.w	800053c <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800033c:	2100      	movs	r1, #0
 800033e:	b11e      	cbz	r6, 8000348 <__udivmoddi4+0xa8>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c6 4300 	strd	r4, r3, [r6]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0xc2>
 8000350:	2e00      	cmp	r6, #0
 8000352:	f000 80ee 	beq.w	8000532 <__udivmoddi4+0x292>
 8000356:	2100      	movs	r1, #0
 8000358:	e9c6 0500 	strd	r0, r5, [r6]
 800035c:	4608      	mov	r0, r1
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0303 	sbc.w	r3, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e2      	beq.n	8000348 <__udivmoddi4+0xa8>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7df      	b.n	8000348 <__udivmoddi4+0xa8>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8091 	bne.w	80004b8 <__udivmoddi4+0x218>
 8000396:	eba1 050c 	sub.w	r5, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2101      	movs	r1, #1
 80003a4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003a8:	fb07 5013 	mls	r0, r7, r3, r5
 80003ac:	0c25      	lsrs	r5, r4, #16
 80003ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0505 	adds.w	r5, ip, r5
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	42a8      	cmp	r0, r5
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a2d      	subs	r5, r5, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003d4:	fb07 5510 	mls	r5, r7, r0, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4628      	mov	r0, r5
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79e      	b.n	800033e <__udivmoddi4+0x9e>
 8000400:	f1c1 0720 	rsb	r7, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa05 f301 	lsl.w	r3, r5, r1
 8000416:	431c      	orrs	r4, r3
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f301 	lsl.w	r3, r0, r1
 8000422:	fbb5 f8f9 	udiv	r8, r5, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 5518 	mls	r5, r9, r8, r5
 8000430:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	42a8      	cmp	r0, r5
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0505 	adds.w	r5, ip, r5
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	42a8      	cmp	r0, r5
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4465      	add	r5, ip
 8000458:	1a2d      	subs	r5, r5, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000460:	fb09 5510 	mls	r5, r9, r0, r5
 8000464:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	45ae      	cmp	lr, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	45ae      	cmp	lr, r5
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba5 050e 	sub.w	r5, r5, lr
 800048e:	42a5      	cmp	r5, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15e      	cbz	r6, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb65 050e 	sbc.w	r5, r5, lr
 80004a2:	fa05 f707 	lsl.w	r7, r5, r7
 80004a6:	fa22 f301 	lsr.w	r3, r2, r1
 80004aa:	40cd      	lsrs	r5, r1
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c6 7500 	strd	r7, r5, [r6]
 80004b2:	2100      	movs	r1, #0
 80004b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa25 f303 	lsr.w	r3, r5, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	430d      	orrs	r5, r1
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004d8:	fb07 3011 	mls	r0, r7, r1, r3
 80004dc:	0c2b      	lsrs	r3, r5, #16
 80004de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004e2:	fb01 f00e 	mul.w	r0, r1, lr
 80004e6:	4298      	cmp	r0, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	4298      	cmp	r0, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3902      	subs	r1, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a1b      	subs	r3, r3, r0
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3310 	mls	r3, r7, r0, r3
 800050c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000510:	fb00 f30e 	mul.w	r3, r0, lr
 8000514:	42ab      	cmp	r3, r5
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0505 	adds.w	r5, ip, r5
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3802      	subs	r0, #2
 8000528:	4465      	add	r5, ip
 800052a:	1aed      	subs	r5, r5, r3
 800052c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	4631      	mov	r1, r6
 8000534:	4630      	mov	r0, r6
 8000536:	e707      	b.n	8000348 <__udivmoddi4+0xa8>
 8000538:	4686      	mov	lr, r0
 800053a:	e6e5      	b.n	8000308 <__udivmoddi4+0x68>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fa      	b.n	8000336 <__udivmoddi4+0x96>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4640      	mov	r0, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4641      	mov	r1, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4465      	add	r5, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4608      	mov	r0, r1
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ledISR>:

#include "ap.h"


void ledISR(void *arg)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  ledToggle(_DEF_LED3);     //led3 토글한다
 800057c:	2002      	movs	r0, #2
 800057e:	f000 f9ef 	bl	8000960 <ledToggle>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <apInit>:

void apInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af02      	add	r7, sp, #8
  swtimer_handle_t          h_led_timer;    //동작할 타이머 인덱스 변수

  //하드웨어 타이머 인터럽트 발생 주기가 1000us(1ms) 되도록 아래와 같이 설정한다.
  timerSetPeriod(_DEF_TIMER1, 1000);
 8000592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fb88 	bl	8000cac <timerSetPeriod>
  //timerAttachInterrupt(_DEF_TIMER1, func);
  timerStart(_DEF_TIMER1);                      //start timer...
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fbbb 	bl	8000d18 <timerStart>

  h_led_timer = swtimerGetHandle();             //타이머 인덱스값을 받아서 변수에 저장
 80005a2:	f000 fb2f 	bl	8000c04 <swtimerGetHandle>
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  swtimerSet(h_led_timer, 500, LOOP_TIME, ledISR, NULL);  //500ms 주기로 ledISR함수가 동작하도록 swtimer 설정
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <apInit+0x60>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ba:	f000 fab7 	bl	8000b2c <swtimerSet>
  swtimerStart(h_led_timer);    //swtimer 시작
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 faf4 	bl	8000bb0 <swtimerStart>

  uartOpen(_DEF_UART1, 115200);
 80005c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fcb3 	bl	8000f38 <uartOpen>

  uartPutch(_DEF_UART1, 'A');
 80005d2:	2141      	movs	r1, #65	; 0x41
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fd5f 	bl	8001098 <uartPutch>

  uartPrintf(_DEF_UART1, "UART 1 OPEN \r\n");
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <apInit+0x64>)
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fd9b 	bl	8001118 <uartPrintf>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08000575 	.word	0x08000575
 80005f0:	080047d0 	.word	0x080047d0

080005f4 <apMain>:

void apMain(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 80005fa:	f000 f815 	bl	8000628 <millis>
 80005fe:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if(millis() - pre_time >= 500)
 8000600:	f000 f812 	bl	8000628 <millis>
 8000604:	4602      	mov	r2, r0
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800060e:	d3f7      	bcc.n	8000600 <apMain+0xc>
    {
      pre_time = millis();
 8000610:	f000 f80a 	bl	8000628 <millis>
 8000614:	6078      	str	r0, [r7, #4]
    if(millis() - pre_time >= 500)
 8000616:	e7f3      	b.n	8000600 <apMain+0xc>

08000618 <bspInit>:
static void SystemClock_Config(void);
static void Error_Handler(void);


void bspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  HAL_Init();
 800061c:	f000 fe58 	bl	80012d0 <HAL_Init>

  SystemClock_Config();
 8000620:	f000 f80a 	bl	8000638 <SystemClock_Config>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800062c:	f000 feba 	bl	80013a4 <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <SystemClock_Config+0xc8>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	4a2e      	ldr	r2, [pc, #184]	; (8000700 <SystemClock_Config+0xc8>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xc8>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xcc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xcc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000684:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
 800068a:	2319      	movs	r3, #25
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fb51 	bl	8001d48 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80006ac:	f000 f82e 	bl	800070c <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006b0:	230f      	movs	r3, #15
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fdb2 	bl	8002238 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa6>
  {
    /* Initialization Error */
    Error_Handler();
 80006da:	f000 f817 	bl	800070c <Error_Handler>
  }

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 80006de:	f000 fe6b 	bl	80013b8 <HAL_GetREVID>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f241 0201 	movw	r2, #4097	; 0x1001
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d105      	bne.n	80006f8 <SystemClock_Config+0xc0>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemClock_Config+0xd0>)
 80006f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f6:	6013      	str	r3, [r2, #0]
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000
 8000708:	40023c00 	.word	0x40023c00

0800070c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x4>

08000712 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800075e:	f000 fe0f 	bl	8001380 <HAL_IncTick>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800077a:	490e      	ldr	r1, [pc, #56]	; (80007b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800077c:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000790:	4c0b      	ldr	r4, [pc, #44]	; (80007c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079e:	f7ff ffe2 	bl	8000766 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a2:	f003 fb51 	bl	8003e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a6:	f003 fb3f 	bl	8003e28 <main>
  bx  lr    
 80007aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80007b8:	08004844 	.word	0x08004844
  ldr r2, =_sbss
 80007bc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80007c0:	200004d4 	.word	0x200004d4

080007c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC_IRQHandler>

080007c6 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b087      	sub	sp, #28
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80007d2:	2301      	movs	r3, #1
 80007d4:	75fb      	strb	r3, [r7, #23]

  //q buffer 입/출력 인덱스 초기화
  p_node->ptr_in    = 0;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
  p_node->ptr_out   = 0;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  p_node->p_buf     = p_buf;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  p_node->length    = length;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]

  if(p_node->p_buf == NULL)   //생성할 버퍼가 null이면 비정상 리턴
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d104      	bne.n	8000800 <qbufferCreate+0x3a>
  {
    p_node->length = 0;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    ret = false;
 80007fc:	2300      	movs	r3, #0
 80007fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8000800:	7dfb      	ldrb	r3, [r7, #23]
}
 8000802:	4618      	mov	r0, r3
 8000804:	371c      	adds	r7, #28
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <buttonInit>:
        {GPIOC, GPIO_PIN_0, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOC, GPIO_PIN_1, GPIO_PIN_RESET, GPIO_PIN_SET}
    };

void buttonInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <buttonInit+0x64>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <buttonInit+0x64>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <buttonInit+0x64>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <buttonInit+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]

  for(i=0; i<HW_BUTTON_MAX_CH; i++)
 8000838:	2300      	movs	r3, #0
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	e010      	b.n	8000860 <buttonInit+0x54>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <buttonInit+0x6c>)
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	4413      	add	r3, r2
 8000846:	889b      	ldrh	r3, [r3, #4]
 8000848:	461a      	mov	r2, r3
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <buttonInit+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(button_tbl[HW_BUTTON_MAX_CH].port, &GPIO_InitStruct);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <buttonInit+0x6c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <buttonInit+0x68>)
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f8ab 	bl	80019b0 <HAL_GPIO_Init>
  for(i=0; i<HW_BUTTON_MAX_CH; i++)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d9eb      	bls.n	800083e <buttonInit+0x32>
  }
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	200000ec 	.word	0x200000ec
 8000878:	20000004 	.word	0x20000004

0800087c <ledInit>:
        {GPIOE, GPIO_PIN_5, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOB, GPIO_PIN_9, GPIO_PIN_SET  , GPIO_PIN_RESET}
    };

void ledInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <ledInit+0x98>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a21      	ldr	r2, [pc, #132]	; (8000914 <ledInit+0x98>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <ledInit+0x98>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <ledInit+0x98>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <ledInit+0x98>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <ledInit+0x98>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <ledInit+0x9c>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <ledInit+0x9c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <ledInit+0x9c>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	60da      	str	r2, [r3, #12]

  for(i=0;i<MAX_HW_LED_CH;i++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e016      	b.n	8000904 <ledInit+0x88>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	4a10      	ldr	r2, [pc, #64]	; (800091c <ledInit+0xa0>)
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <ledInit+0x9c>)
 80008e4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <ledInit+0xa0>)
 80008ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80008ee:	490a      	ldr	r1, [pc, #40]	; (8000918 <ledInit+0x9c>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 f85d 	bl	80019b0 <HAL_GPIO_Init>

    ledOff(i);
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f811 	bl	8000920 <ledOff>
  for(i=0;i<MAX_HW_LED_CH;i++)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	3301      	adds	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	2b04      	cmp	r3, #4
 8000908:	d9e5      	bls.n	80008d6 <ledInit+0x5a>
  }


}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	20000100 	.word	0x20000100
 800091c:	2000001c 	.word	0x2000001c

08000920 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  if(ch > MAX_HW_LED_CH)    return;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d811      	bhi.n	8000954 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <ledOff+0x3c>)
 8000934:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <ledOff+0x3c>)
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	8899      	ldrh	r1, [r3, #4]
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <ledOff+0x3c>)
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	4413      	add	r3, r2
 800094a:	79db      	ldrb	r3, [r3, #7]
 800094c:	461a      	mov	r2, r3
 800094e:	f001 f9c9 	bl	8001ce4 <HAL_GPIO_WritePin>
 8000952:	e000      	b.n	8000956 <ledOff+0x36>
  if(ch > MAX_HW_LED_CH)    return;
 8000954:	bf00      	nop
}
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000001c 	.word	0x2000001c

08000960 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if(ch > MAX_HW_LED_CH)    return;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b05      	cmp	r3, #5
 800096e:	d80d      	bhi.n	800098c <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <ledToggle+0x34>)
 8000974:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4906      	ldr	r1, [pc, #24]	; (8000994 <ledToggle+0x34>)
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	889b      	ldrh	r3, [r3, #4]
 8000982:	4619      	mov	r1, r3
 8000984:	4610      	mov	r0, r2
 8000986:	f001 f9c5 	bl	8001d14 <HAL_GPIO_TogglePin>
 800098a:	e000      	b.n	800098e <ledToggle+0x2e>
  if(ch > MAX_HW_LED_CH)    return;
 800098c:	bf00      	nop
}
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000001c 	.word	0x2000001c

08000998 <swtimerInit>:
static volatile uint32_t sw_timer_counter         = 0;
static volatile uint16_t sw_timer_handle_index    = 0;
static swtimer_t    swtimer_tbl[SW_TIMER_MAX];            //타이머 배열 선언

bool swtimerInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;

  if(excute == 1)
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <swtimerInit+0x84>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <swtimerInit+0x12>
  {
    return false;           //이미 한번 실행했다면 정지
 80009a6:	2300      	movs	r3, #0
 80009a8:	e033      	b.n	8000a12 <swtimerInit+0x7a>
  }

  //구조체 초기화
  for(i=0;i<SW_TIMER_MAX;i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	e029      	b.n	8000a04 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_Cnt      = 0;          //현재 타이머값 0으로 초기화
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	491b      	ldr	r1, [pc, #108]	; (8000a20 <swtimerInit+0x88>)
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	3304      	adds	r3, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_En       = OFF;        //타이머는 초기에 비활성화
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	4916      	ldr	r1, [pc, #88]	; (8000a20 <swtimerInit+0x88>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init     = 0;          //타이머 초기화될때 타이머값 변수 초기화
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	4911      	ldr	r1, [pc, #68]	; (8000a20 <swtimerInit+0x88>)
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	3308      	adds	r3, #8
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFunt        = NULL;       //타이머 만료시 실행할 함수는 Null로 초기화
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <swtimerInit+0x88>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	440b      	add	r3, r1
 80009f8:	330c      	adds	r3, #12
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
  for(i=0;i<SW_TIMER_MAX;i++)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	3301      	adds	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b07      	cmp	r3, #7
 8000a08:	d9d2      	bls.n	80009b0 <swtimerInit+0x18>
  }

  //한번 실행됬으므로 변수 1로 설정
  excute = 1;
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <swtimerInit+0x84>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]

  return true;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	200001bc 	.word	0x200001bc
 8000a20:	2000011c 	.word	0x2000011c

08000a24 <swtimerISR>:

/*
 * @ 타이머 인터럽트 발생시 ㅅ실행되는 인럽텁트 서비스 루틴
 */
void swtimerISR(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  uint8_t i;

  //설정된 주기마다 이 함수가 실행되므로 카운터 변수가 설정된 주기마다 1씩 증가한다.
  //여기서는 주기가 1ms이므로 1ms 주기로 카운터 변수가 1씩 증가한다.
  sw_timer_counter++;
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <swtimerISR+0xfc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a3b      	ldr	r2, [pc, #236]	; (8000b20 <swtimerISR+0xfc>)
 8000a32:	6013      	str	r3, [r2, #0]

  for(i=0;i<SW_TIMER_MAX && i<sw_timer_handle_index; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e063      	b.n	8000b02 <swtimerISR+0xde>
  {
    if(swtimer_tbl[i].Timer_En == ON)                             //해당 타이머가 활성화 됬는지??
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	4939      	ldr	r1, [pc, #228]	; (8000b24 <swtimerISR+0x100>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d156      	bne.n	8000afc <swtimerISR+0xd8>
    {
      swtimer_tbl[i].Timer_Cnt--;                                 //타이머 1씩 감소
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	4934      	ldr	r1, [pc, #208]	; (8000b24 <swtimerISR+0x100>)
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	1e59      	subs	r1, r3, #1
 8000a62:	4830      	ldr	r0, [pc, #192]	; (8000b24 <swtimerISR+0x100>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3304      	adds	r3, #4
 8000a70:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Cnt == 0)                           //해당 활성화된 타이머가 계속감소하여 0이 됬다면
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	492b      	ldr	r1, [pc, #172]	; (8000b24 <swtimerISR+0x100>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	3304      	adds	r3, #4
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d139      	bne.n	8000afc <swtimerISR+0xd8>
      {
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)                 //타이머를 한번만 실행하는 모드라면
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	4926      	ldr	r1, [pc, #152]	; (8000b24 <swtimerISR+0x100>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	3301      	adds	r3, #1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d108      	bne.n	8000ab0 <swtimerISR+0x8c>
        {
          swtimer_tbl[i].Timer_En = OFF;                          //타이머를 비활성화 시킨다.
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	4920      	ldr	r1, [pc, #128]	; (8000b24 <swtimerISR+0x100>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
        }

        swtimer_tbl[i].Timer_Cnt = swtimer_tbl[i].Timer_Init;     //현재 타이머 값을 초기화 한다.
 8000ab0:	79f9      	ldrb	r1, [r7, #7]
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	481b      	ldr	r0, [pc, #108]	; (8000b24 <swtimerISR+0x100>)
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4403      	add	r3, r0
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <swtimerISR+0x100>)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4403      	add	r3, r0
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	6019      	str	r1, [r3, #0]

        (*swtimer_tbl[i].TmrFunt)(swtimer_tbl[i].TmrFuntArg);     //함수를 실행한다.
 8000ad4:	79fa      	ldrb	r2, [r7, #7]
 8000ad6:	4913      	ldr	r1, [pc, #76]	; (8000b24 <swtimerISR+0x100>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	480e      	ldr	r0, [pc, #56]	; (8000b24 <swtimerISR+0x100>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4403      	add	r3, r0
 8000af4:	3310      	adds	r3, #16
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	4788      	blx	r1
  for(i=0;i<SW_TIMER_MAX && i<sw_timer_handle_index; i++)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	3301      	adds	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b07      	cmp	r3, #7
 8000b06:	d806      	bhi.n	8000b16 <swtimerISR+0xf2>
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <swtimerISR+0x104>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d391      	bcc.n	8000a3a <swtimerISR+0x16>
      }
    }
  }
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000114 	.word	0x20000114
 8000b24:	2000011c 	.word	0x2000011c
 8000b28:	20000118 	.word	0x20000118

08000b2c <swtimerSet>:

/*
 * @ 타이머 번호별로 모드, 실행할 함수설정
 * */
void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Func)(void*), void *arg)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode    = TmrMode;      //해당 타이머 번호의 동작 모드
 8000b3e:	7bfa      	ldrb	r2, [r7, #15]
 8000b40:	491a      	ldr	r1, [pc, #104]	; (8000bac <swtimerSet+0x80>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	7bba      	ldrb	r2, [r7, #14]
 8000b50:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFunt       = Func;          //해당 타이머 번호 타이머 만료 시 실행할 함수
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	4915      	ldr	r1, [pc, #84]	; (8000bac <swtimerSet+0x80>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	330c      	adds	r3, #12
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFuntArg    = arg;          //해당 타이머 번호 타이머 만료 시 실행할 함수의 입력 매개변수
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	4910      	ldr	r1, [pc, #64]	; (8000bac <swtimerSet+0x80>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	3310      	adds	r3, #16
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Cnt     = TmrData;      //해당 타이머의 현재 카운터 값
 8000b7a:	7bfa      	ldrb	r2, [r7, #15]
 8000b7c:	490b      	ldr	r1, [pc, #44]	; (8000bac <swtimerSet+0x80>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	3304      	adds	r3, #4
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init    = TmrData;      //해당 타이머의 초기화 시 카운터 값
 8000b8e:	7bfa      	ldrb	r2, [r7, #15]
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <swtimerSet+0x80>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	2000011c 	.word	0x2000011c

08000bb0 <swtimerStart>:


void swtimerStart(uint8_t TmrNum)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if(TmrNum  < SW_TIMER_MAX)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	d81a      	bhi.n	8000bf6 <swtimerStart+0x46>
  {
    swtimer_tbl[TmrNum].Timer_Cnt = swtimer_tbl[TmrNum].Timer_Init;     //타이머 시작전에 카운터 변수 초기화
 8000bc0:	79f9      	ldrb	r1, [r7, #7]
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <swtimerStart+0x50>)
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4403      	add	r3, r0
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <swtimerStart+0x50>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4403      	add	r3, r0
 8000be0:	3304      	adds	r3, #4
 8000be2:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En = ON;                                  //해당 타이머 번호가 시작됨을 알리는 변수 ON 설정
 8000be4:	79fa      	ldrb	r2, [r7, #7]
 8000be6:	4906      	ldr	r1, [pc, #24]	; (8000c00 <swtimerStart+0x50>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	2000011c 	.word	0x2000011c

08000c04 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_Cnt = swtimer_tbl[TmrNum].Timer_Init;     //해당 타미머 카운터 변수 초기화
  swtimer_tbl[TmrNum].Timer_En  = OFF;                                //해당 타이머 비활성화
}

swtimer_handle_t swtimerGetHandle(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  swtimer_handle_t  TmrIndex = sw_timer_handle_index;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <swtimerGetHandle+0x2c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	80fb      	strh	r3, [r7, #6]

  sw_timer_handle_index++;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <swtimerGetHandle+0x2c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <swtimerGetHandle+0x2c>)
 8000c1e:	801a      	strh	r2, [r3, #0]

  return TmrIndex;
 8000c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000118 	.word	0x20000118

08000c34 <timerInit>:
    };

static hwtimer_t          timer_tbl[HWTIMER_MAX_CH];

void timerInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  timer_tbl[HWTIMER_TIMER1].freq                        = 1000000;      //인터럽트 발샐시키고자 하는 최소 단위 주파수 => 1MHz ==> 1us
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <timerInit+0x68>)
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <timerInit+0x6c>)
 8000c3c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                                                                        //Period와 곱하면 최종 인터럽트 발생주기(주파수)가 됨
  timer_tbl[HWTIMER_TIMER1].hTIM.Instance               = TIM3;         //TIM3 사용 설정
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <timerInit+0x68>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <timerInit+0x70>)
 8000c44:	601a      	str	r2, [r3, #0]
   *  TIM3 Timer Max Clock : 84Mhz (System Clock / 2)
   *  (TIM3 Timer Max Clock / Prescaler)
   *
   *  84,000,000Hz / 4000Hz = 21,000
   */
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.Prescaler         = ((uint32_t)(SystemCoreClock / 2) / timer_tbl[HWTIMER_TIMER1].freq) - 1;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <timerInit+0x74>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	085a      	lsrs	r2, r3, #1
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <timerInit+0x68>)
 8000c4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	3b01      	subs	r3, #1
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <timerInit+0x68>)
 8000c5a:	6053      	str	r3, [r2, #4]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.ClockDivision     = 0;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <timerInit+0x68>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <timerInit+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <timerInit+0x68>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  timer_tbl[HWTIMER_TIMER1].hTIM.Init.RepetitionCounter = 0;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <timerInit+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]

  timer_tbl[HWTIMER_TIMER1].p_func[0]                   = NULL;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <timerInit+0x68>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  timer_tbl[HWTIMER_TIMER1].p_func[1]                   = NULL;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <timerInit+0x68>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  timer_tbl[HWTIMER_TIMER1].p_func[2]                   = NULL;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <timerInit+0x68>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  timer_tbl[HWTIMER_TIMER1].p_func[3]                   = NULL;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <timerInit+0x68>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	200001c0 	.word	0x200001c0
 8000ca0:	000f4240 	.word	0x000f4240
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	20000000 	.word	0x20000000

08000cac <timerSetPeriod>:
/*
 *  @ 하드웨어 타이머가 가지고 있는 출력 비교 채널중 사용자가 설정하고자 하는 채널이
 *  인터럽트를 발생할 주기를 설정하는 함수임
 */
void timerSetPeriod(uint8_t ch, uint32_t us)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  hwtimer_t         *p_timer;   //타이머 핸들러 구조체 포인터 변수 선언

  uint32_t period;
  uint32_t time_div;

  if(ch > TIMER_MAX_CH)        return;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d820      	bhi.n	8000d00 <timerSetPeriod+0x54>

  p_timer = &timer_tbl[hwtimer_index[ch].number];   //해당 채널의 구조체 변수 주소값 포인터 변수에 저장
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <timerSetPeriod+0x60>)
 8000cc2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	23cc      	movs	r3, #204	; 0xcc
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <timerSetPeriod+0x64>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]

  time_div = 1000000 / p_timer->freq;     //1000000 / 4000 = 250
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <timerSetPeriod+0x68>)
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	60fb      	str	r3, [r7, #12]

  period = us / time_div;   // ex) 만약 us 가 1000*1000 이라면 period는 1000000 / 250 = 4000 이다.
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]

  if(period == 0)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <timerSetPeriod+0x4a>
  {
    period = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  //최종 타이머 인터럽트 발생 주기는 Timer Max Clock / Prescaler 을 시간으로 환산한 다음
  //아래 Period 값을 곱해준다.
  //Timer Max Clock / Prescaler 은 4000 이고 시간으로 환산하면 0.00025 sec 이다.
  //0.00025 sec 를 period 4000 곱하면 1 sec가 되어
  //1초 주기로 타이머 인터럽트가 발생하도록 설정되게 된다.
  p_timer->hTIM.Init.Period = period - 1;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	e000      	b.n	8000d02 <timerSetPeriod+0x56>
  if(ch > TIMER_MAX_CH)        return;
 8000d00:	bf00      	nop
}
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000044 	.word	0x20000044
 8000d10:	200001c0 	.word	0x200001c0
 8000d14:	000f4240 	.word	0x000f4240

08000d18 <timerStart>:
  //구조파 함수 포인터 변수를 null 처리한다.
  p_timer->p_func[hwtimer_index[ch].index] = NULL;
}

void timerStart(uint8_t ch)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  //함수내에서 구조체 변수에 접근하기 위해 구조체 포인터 변수 선언한다.
  hwtimer_t         *p_timer;
  uint32_t timer_sub_ch = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]

  if(ch > TIMER_MAX_CH)         return;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d845      	bhi.n	8000db8 <timerStart+0xa0>

  p_timer = &timer_tbl[hwtimer_index[ch].number];
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <timerStart+0xa8>)
 8000d30:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000d34:	461a      	mov	r2, r3
 8000d36:	23cc      	movs	r3, #204	; 0xcc
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <timerStart+0xac>)
 8000d3e:	4413      	add	r3, r2
 8000d40:	60bb      	str	r3, [r7, #8]

  switch(hwtimer_index[ch].index)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <timerStart+0xa8>)
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d817      	bhi.n	8000d80 <timerStart+0x68>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <timerStart+0x40>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d6f 	.word	0x08000d6f
 8000d60:	08000d75 	.word	0x08000d75
 8000d64:	08000d7b 	.word	0x08000d7b
  {
    case HWTIMER_CH1:
      timer_sub_ch = TIM_CHANNEL_1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
      break;
 8000d6c:	e008      	b.n	8000d80 <timerStart+0x68>

    case HWTIMER_CH2:
      timer_sub_ch = TIM_CHANNEL_2;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
     break;
 8000d72:	e005      	b.n	8000d80 <timerStart+0x68>

    case HWTIMER_CH3:
      timer_sub_ch = TIM_CHANNEL_3;
 8000d74:	2308      	movs	r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
     break;
 8000d78:	e002      	b.n	8000d80 <timerStart+0x68>

    case HWTIMER_CH4:
      timer_sub_ch = TIM_CHANNEL_4;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	60fb      	str	r3, [r7, #12]
     break;
 8000d7e:	bf00      	nop
  }
  //TIM3의 Output Compare 기능을 사용하므로 해당 초기화 함수를 이용하여 초기화 한다.
  HAL_TIM_OC_Init(&p_timer->hTIM);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fc36 	bl	80025f4 <HAL_TIM_OC_Init>
  //TIM3 Output Compare 파라미터를 설정한다.
  HAL_TIM_OC_ConfigChannel(&p_timer->hTIM, &p_timer->sConfig[hwtimer_index[ch].index], timer_sub_ch);
 8000d88:	68b8      	ldr	r0, [r7, #8]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <timerStart+0xa8>)
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	785b      	ldrb	r3, [r3, #1]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	3348      	adds	r3, #72	; 0x48
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	4413      	add	r3, r2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4619      	mov	r1, r3
 8000da8:	f001 fe92 	bl	8002ad0 <HAL_TIM_OC_ConfigChannel>
  //TIM3 Output Compare 인터럽트 동작을 시작한다.
  HAL_TIM_OC_Start_IT(&p_timer->hTIM, timer_sub_ch);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fc6f 	bl	8002694 <HAL_TIM_OC_Start_IT>
 8000db6:	e000      	b.n	8000dba <timerStart+0xa2>
  if(ch > TIMER_MAX_CH)         return;
 8000db8:	bf00      	nop
}
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000044 	.word	0x20000044
 8000dc4:	200001c0 	.word	0x200001c0

08000dc8 <timerCallBack>:

void timerCallBack(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t index;
  hwtimer_t         *p_timer;

  for(i=0;i<TIMER_MAX_CH;i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	75fb      	strb	r3, [r7, #23]
 8000dd4:	e02c      	b.n	8000e30 <timerCallBack+0x68>
  {
    p_timer = &timer_tbl[hwtimer_index[i].number];
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <timerCallBack+0x78>)
 8000dda:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000dde:	461a      	mov	r2, r3
 8000de0:	23cc      	movs	r3, #204	; 0xcc
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <timerCallBack+0x7c>)
 8000de8:	4413      	add	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    index   = hwtimer_index[i].index;
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <timerCallBack+0x78>)
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4413      	add	r3, r2
 8000df4:	785b      	ldrb	r3, [r3, #1]
 8000df6:	60fb      	str	r3, [r7, #12]

    //사용할 Output Compare 채널이 맞다면
    if(htim->Channel == hwtimer_index[i].active_channel)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7f1b      	ldrb	r3, [r3, #28]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <timerCallBack+0x78>)
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d10e      	bne.n	8000e2a <timerCallBack+0x62>
    {
      //등록된 함수가 존재한다면
      if(p_timer->p_func[index] != NULL)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	332e      	adds	r3, #46	; 0x2e
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <timerCallBack+0x62>
      {
        //등록된 함수를 불려온다.
        (*p_timer->p_func[index])();
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	332e      	adds	r3, #46	; 0x2e
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	4798      	blx	r3
  for(i=0;i<TIMER_MAX_CH;i++)
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	75fb      	strb	r3, [r7, #23]
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d9cf      	bls.n	8000dd6 <timerCallBack+0xe>
      }
    }
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000044 	.word	0x20000044
 8000e44:	200001c0 	.word	0x200001c0

08000e48 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&timer_tbl[HWTIMER_CH1].hTIM);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM3_IRQHandler+0x10>)
 8000e4e:	f001 fd37 	bl	80028c0 <HAL_TIM_IRQHandler>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001c0 	.word	0x200001c0

08000e5c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  timerCallBack(htim);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ffaf 	bl	8000dc8 <timerCallBack>
  swtimerISR();
 8000e6a:	f7ff fddb 	bl	8000a24 <swtimerISR>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_TIM_OC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  }
}

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == timer_tbl[HWTIMER_CH1].hTIM.Instance)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_TIM_OC_MspInit+0x48>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d115      	bne.n	8000eb8 <HAL_TIM_OC_MspInit+0x40>
  {
    //TIM3 클릭을 활성화 한다.
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_TIM_OC_MspInit+0x4c>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <HAL_TIM_OC_MspInit+0x4c>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_OC_MspInit+0x4c>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]

    //인터럽트 우선순위를 설정하고, 활성화 한다.
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	210f      	movs	r1, #15
 8000eac:	201d      	movs	r0, #29
 8000eae:	f000 fb66 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eb2:	201d      	movs	r0, #29
 8000eb4:	f000 fb7f 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001c0 	.word	0x200001c0
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <uartInit>:

void uartStartRx(uint8_t ch);         //uart 수신시작 설정 함수
void uartRxHandler(uint8_t ch);       //uart 수신 핸들러 함수

void uartInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i=0;i<UART_MAX_CH;i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	e025      	b.n	8000f20 <uartInit+0x58>
  {
    uart_tbl[i].is_open   = false;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <uartInit+0x6c>)
 8000ed8:	21d0      	movs	r1, #208	; 0xd0
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].vcp_mode  = false;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <uartInit+0x6c>)
 8000ee8:	21d0      	movs	r1, #208	; 0xd0
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode   = UART_MODE_POLLING;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <uartInit+0x6c>)
 8000efa:	21d0      	movs	r1, #208	; 0xd0
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	330a      	adds	r3, #10
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode   = UART_MODE_POLLING;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <uartInit+0x6c>)
 8000f0c:	21d0      	movs	r1, #208	; 0xd0
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	3309      	adds	r3, #9
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
  for(i=0;i<UART_MAX_CH;i++)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0d6      	beq.n	8000ed4 <uartInit+0xc>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200002ec 	.word	0x200002ec

08000f38 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  uart_t  *p_uart;        //uart 핸들용 구조체 포인터 변수 선언

  p_uart = &uart_tbl[ch];
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	22d0      	movs	r2, #208	; 0xd0
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <uartOpen+0xd0>)
 8000f52:	4413      	add	r3, r2
 8000f54:	60bb      	str	r3, [r7, #8]

  if(ch > UART_MAX_CH)    return false;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d901      	bls.n	8000f60 <uartOpen+0x28>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e04e      	b.n	8000ffe <uartOpen+0xc6>

  switch(ch)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d14a      	bne.n	8000ffc <uartOpen+0xc4>
  {
    case _DEF_UART1:

      p_uart->baud = baud;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
      p_uart->vcp_mode  = false;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2200      	movs	r2, #0
 8000f76:	721a      	strb	r2, [r3, #8]
      p_uart->rx_mode   = UART_MODE_DMA;
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	729a      	strb	r2, [r3, #10]
      p_uart->tx_mode   = UART_MODE_DMA;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2202      	movs	r2, #2
 8000f82:	725a      	strb	r2, [r3, #9]

      p_uart->handle.Instance           = USART1;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <uartOpen+0xd4>)
 8000f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      p_uart->handle.Init.BaudRate      = baud;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      p_uart->handle.Init.WordLength    = UART_WORDLENGTH_8B;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      p_uart->handle.Init.StopBits      = UART_STOPBITS_1;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      p_uart->handle.Init.Parity        = UART_PARITY_NONE;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      p_uart->handle.Init.Mode          = UART_MODE_TX_RX;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	220c      	movs	r2, #12
 8000fb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      p_uart->handle.Init.HwFlowCtl     = UART_HWCONTROL_NONE;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      p_uart->handle.Init.OverSampling  = UART_OVERSAMPLING_16;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[ch], UART_RX_QBUF_LENGTH);    //큐 버퍼 생성
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f103 001c 	add.w	r0, r3, #28
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <uartOpen+0xd8>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fbf5 	bl	80007c6 <qbufferCreate>

      if(HAL_UART_Init(&p_uart->handle) != HAL_OK)                                          //uart 초기화
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	338c      	adds	r3, #140	; 0x8c
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 f875 	bl	80030d0 <HAL_UART_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <uartOpen+0xba>
      {
        ret = false;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
      else
      {
        uartStartRx(ch);
      }

      break;
 8000ff0:	e003      	b.n	8000ffa <uartOpen+0xc2>
        uartStartRx(ch);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f80d 	bl	8001014 <uartStartRx>
      break;
 8000ffa:	bf00      	nop
  }



  return ret;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002ec 	.word	0x200002ec
 800100c:	40011000 	.word	0x40011000
 8001010:	200003bc 	.word	0x200003bc

08001014 <uartStartRx>:

/**
 * @uart 수신시작 설정 함수
 */
void uartStartRx(uint8_t ch)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  uart_t        *p_uart;

  p_uart = &uart_tbl[ch];
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	22d0      	movs	r2, #208	; 0xd0
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <uartStartRx+0x80>)
 8001028:	4413      	add	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d12c      	bne.n	800108c <uartStartRx+0x78>
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	7a9b      	ldrb	r3, [r3, #10]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <uartStartRx+0x38>
      {
        HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	330b      	adds	r3, #11
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	f002 f921 	bl	800328e <HAL_UART_Receive_IT>
      }

      if(p_uart->rx_mode == UART_MODE_DMA)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	7a9b      	ldrb	r3, [r3, #10]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d118      	bne.n	8001086 <uartStartRx+0x72>
      {
        if(HAL_UART_Receive_DMA(&p_uart->handle, p_uart->qbuffer_rx.p_buf, UART_RX_QBUF_LENGTH) != HAL_OK)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001062:	4619      	mov	r1, r3
 8001064:	f002 f943 	bl	80032ee <HAL_UART_Receive_DMA>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10d      	bne.n	800108a <uartStartRx+0x76>
        {
          return;
        }

        p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.ptr_in - p_uart->hdma.Instance->NDTR;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	69da      	ldr	r2, [r3, #28]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	61da      	str	r2, [r3, #28]
        p_uart->qbuffer_rx.ptr_out = p_uart->qbuffer_rx.ptr_in;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	69da      	ldr	r2, [r3, #28]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	621a      	str	r2, [r3, #32]
      }
      break;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <uartStartRx+0x78>
          return;
 800108a:	bf00      	nop
  }
}
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002ec 	.word	0x200002ec

08001098 <uartPutch>:
    p_uart->qbuffer_rx.ptr_out = p_uart->qbuffer_rx.ptr_in;
  }
}

void uartPutch(uint8_t ch, uint8_t c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
  uartWrite(ch, &ch, 1);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	1df9      	adds	r1, r7, #7
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f804 	bl	80010bc <uartWrite>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <uartWrite>:

  return ret;
}

int32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]

  uart_t    *p_uart;
  p_uart = &uart_tbl[ch];
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	22d0      	movs	r2, #208	; 0xd0
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <uartWrite+0x58>)
 80010d8:	4413      	add	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

  switch(ch)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d112      	bne.n	8001108 <uartWrite+0x4c>
  {
    case _DEF_UART1:
      if(p_uart->rx_mode == UART_MODE_DMA)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	7a9b      	ldrb	r3, [r3, #10]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d10d      	bne.n	8001106 <uartWrite+0x4a>
      {
        if(HAL_UART_Transmit(&p_uart->handle, p_data, length, 100) == HAL_OK)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	f002 f837 	bl	800316a <HAL_UART_Transmit>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <uartWrite+0x4a>
        {
          ret = length;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	617b      	str	r3, [r7, #20]
        }
      }
      break;
 8001106:	bf00      	nop
  }

  return ret;
 8001108:	697b      	ldr	r3, [r7, #20]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002ec 	.word	0x200002ec

08001118 <uartPrintf>:

  return ret;
}

int32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8001118:	b40e      	push	{r1, r2, r3}
 800111a:	b580      	push	{r7, lr}
 800111c:	b0c7      	sub	sp, #284	; 0x11c
 800111e:	af00      	add	r7, sp, #0
 8001120:	4602      	mov	r2, r0
 8001122:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001126:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800112a:	701a      	strb	r2, [r3, #0]
  int32_t ret = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list   arg;
  va_start(arg, fmt);
 8001132:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001136:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int32_t len;

  char print_buffer[256];

  len = vsnprintf(print_buffer, 255, fmt, arg);
 800113a:	f107 000c 	add.w	r0, r7, #12
 800113e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001142:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	f002 fece 	bl	8003ee8 <vsniprintf>
 800114c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  ret = uartWrite(ch, (uint8_t*)print_buffer, len);
 8001150:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001154:	f107 010c 	add.w	r1, r7, #12
 8001158:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800115c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffaa 	bl	80010bc <uartWrite>
 8001168:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  va_end(arg);

  return ret;
 800116c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8001170:	4618      	mov	r0, r3
 8001172:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800117c:	b003      	add	sp, #12
 800117e:	4770      	bx	lr

08001180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_UART_MspInit+0x114>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a40      	ldr	r2, [pc, #256]	; (8001294 <HAL_UART_MspInit+0x114>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <HAL_UART_MspInit+0x114>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <HAL_UART_MspInit+0x114>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a39      	ldr	r2, [pc, #228]	; (8001294 <HAL_UART_MspInit+0x114>)
 80011ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_UART_MspInit+0x114>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80011ce:	2302      	movs	r3, #2
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d2:	2307      	movs	r3, #7
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	482e      	ldr	r0, [pc, #184]	; (8001298 <HAL_UART_MspInit+0x118>)
 80011de:	f000 fbe7 	bl	80019b0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e8:	2307      	movs	r3, #7
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4829      	ldr	r0, [pc, #164]	; (8001298 <HAL_UART_MspInit+0x118>)
 80011f4:	f000 fbdc 	bl	80019b0 <HAL_GPIO_Init>

  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = DMA2_Stream5;
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <HAL_UART_MspInit+0x11c>)
 80011fa:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <HAL_UART_MspInit+0x120>)
 80011fc:	601a      	str	r2, [r3, #0]

  hdma_rx.Init.Channel             = DMA_CHANNEL_4;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001200:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001204:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001208:	2240      	movs	r2, #64	; 0x40
 800120a:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_UART_MspInit+0x11c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001218:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_UART_MspInit+0x11c>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122c:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_LOW;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_UART_MspInit+0x11c>)
 800123c:	2203      	movs	r2, #3
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001242:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_UART_MspInit+0x11c>)
 800124a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800124e:	631a      	str	r2, [r3, #48]	; 0x30

  if(HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8001250:	4812      	ldr	r0, [pc, #72]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001252:	f000 f9cb 	bl	80015ec <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0xe0>
  {
    Error_Handler();
 800125c:	f000 f822 	bl	80012a4 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_UART_MspInit+0x11c>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2044      	movs	r0, #68	; 0x44
 8001272:	f000 f984 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001276:	2044      	movs	r0, #68	; 0x44
 8001278:	f000 f99d 	bl	80015b6 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART TC interrupt */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2025      	movs	r0, #37	; 0x25
 8001282:	f000 f97c 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001286:	2025      	movs	r0, #37	; 0x25
 8001288:	f000 f995 	bl	80015b6 <HAL_NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	2000028c 	.word	0x2000028c
 80012a0:	40026488 	.word	0x40026488

080012a4 <Error_Handler>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(DMA2_Stream5_IRQn);
}

void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>

080012ae <hwInit>:




void hwInit(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  bspInit();
 80012b2:	f7ff f9b1 	bl	8000618 <bspInit>
  ledInit();
 80012b6:	f7ff fae1 	bl	800087c <ledInit>
  buttonInit();
 80012ba:	f7ff faa7 	bl	800080c <buttonInit>
  timerInit();
 80012be:	f7ff fcb9 	bl	8000c34 <timerInit>
  swtimerInit();
 80012c2:	f7ff fb69 	bl	8000998 <swtimerInit>
  uartInit();
 80012c6:	f7ff fdff 	bl	8000ec8 <uartInit>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f935 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f80e 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f000 f806 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f947 	bl	80015d2 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f90f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000068 	.word	0x20000068
 800137c:	20000064 	.word	0x20000064

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x20>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_IncTick+0x20>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000068 	.word	0x20000068
 80013a0:	200004bc 	.word	0x200004bc

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_GetTick+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	200004bc 	.word	0x200004bc

080013b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetREVID+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0c1b      	lsrs	r3, r3, #16
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e0042000 	.word	0xe0042000

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4906      	ldr	r1, [pc, #24]	; (8001468 <__NVIC_EnableIRQ+0x34>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff90 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff2d 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff42 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5f 	bl	800146c <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff35 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fed4 	bl	80013a4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e099      	b.n	800173c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e00f      	b.n	800164a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff febb 	bl	80013a4 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d908      	bls.n	800164a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e078      	b.n	800173c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e8      	bne.n	800162a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_DMA_Init+0x158>)
 8001664:	4013      	ands	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4313      	orrs	r3, r2
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d117      	bne.n	800170e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8e3 	bl	80018bc <DMA_CheckFifoParam>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800170a:	2301      	movs	r3, #1
 800170c:	e016      	b.n	800173c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f89c 	bl	8001854 <DMA_CalcBaseAndBitshift>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	223f      	movs	r2, #63	; 0x3f
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f010803f 	.word	0xf010803f

08001748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_DMA_Start_IT+0x26>
 800176a:	2302      	movs	r3, #2
 800176c:	e040      	b.n	80017f0 <HAL_DMA_Start_IT+0xa8>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12f      	bne.n	80017e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f82e 	bl	80017f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	223f      	movs	r2, #63	; 0x3f
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0216 	orr.w	r2, r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0208 	orr.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e005      	b.n	80017ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
 80017ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d108      	bne.n	8001838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001836:	e007      	b.n	8001848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
	...

08001854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b10      	subs	r3, #16
 8001864:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <DMA_CalcBaseAndBitshift+0x60>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d909      	bls.n	8001896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
 8001894:	e007      	b.n	80018a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	aaaaaaab 	.word	0xaaaaaaab
 80018b8:	080047f8 	.word	0x080047f8

080018bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d856      	bhi.n	800198a <DMA_CheckFifoParam+0xce>
 80018dc:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <DMA_CheckFifoParam+0x28>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	08001907 	.word	0x08001907
 80018ec:	080018f5 	.word	0x080018f5
 80018f0:	0800198b 	.word	0x0800198b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d046      	beq.n	800198e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001904:	e043      	b.n	800198e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800190e:	d140      	bne.n	8001992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e03d      	b.n	8001992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	d121      	bne.n	8001964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d837      	bhi.n	8001996 <DMA_CheckFifoParam+0xda>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <DMA_CheckFifoParam+0x70>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001943 	.word	0x08001943
 8001934:	0800193d 	.word	0x0800193d
 8001938:	08001955 	.word	0x08001955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      break;
 8001940:	e030      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d025      	beq.n	800199a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001952:	e022      	b.n	800199a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800195c:	d11f      	bne.n	800199e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001962:	e01c      	b.n	800199e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d903      	bls.n	8001972 <DMA_CheckFifoParam+0xb6>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d003      	beq.n	8001978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001970:	e018      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      break;
 8001976:	e015      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      break;
 8001988:	e00b      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 800198a:	bf00      	nop
 800198c:	e00a      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 800198e:	bf00      	nop
 8001990:	e008      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001992:	bf00      	nop
 8001994:	e006      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e004      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e002      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
    }
  } 
  
  return status; 
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e16b      	b.n	8001ca4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 815a 	bne.w	8001c9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80b4 	beq.w	8001c9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	; (8001cb8 <HAL_GPIO_Init+0x308>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a5e      	ldr	r2, [pc, #376]	; (8001cb8 <HAL_GPIO_Init+0x308>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <HAL_GPIO_Init+0x308>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a5a      	ldr	r2, [pc, #360]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_GPIO_Init+0x226>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x314>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x222>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x318>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x21e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4e      	ldr	r2, [pc, #312]	; (8001ccc <HAL_GPIO_Init+0x31c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x21a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x320>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x216>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x212>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_GPIO_Init+0x328>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_GPIO_Init+0x32c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x20a>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e00e      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bba:	2308      	movs	r3, #8
 8001bbc:	e00c      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f002 0203 	and.w	r2, r2, #3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be8:	4934      	ldr	r1, [pc, #208]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1a:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c44:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	f67f ae90 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021400 	.word	0x40021400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40021c00 	.word	0x40021c00
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf4:	787b      	ldrb	r3, [r7, #1]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d00:	e003      	b.n	8001d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	041a      	lsls	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	619a      	str	r2, [r3, #24]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43d9      	mvns	r1, r3
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	400b      	ands	r3, r1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e267      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d075      	beq.n	8001e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d66:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d00c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d112      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d7e:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8a:	d10b      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d05b      	beq.n	8001e50 <HAL_RCC_OscConfig+0x108>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d157      	bne.n	8001e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e242      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x74>
 8001dae:	4b76      	ldr	r3, [pc, #472]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a75      	ldr	r2, [pc, #468]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e01d      	b.n	8001df8 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6c      	ldr	r2, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0xb0>
 8001de0:	4b69      	ldr	r3, [pc, #420]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fad0 	bl	80013a4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff facc 	bl	80013a4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e207      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0xc0>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fabc 	bl	80013a4 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fab8 	bl	80013a4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1f3      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0xe8>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x152>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1c7      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x244>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fa71 	bl	80013a4 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fa6d 	bl	80013a4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1a8      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4925      	ldr	r1, [pc, #148]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x244>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fa50 	bl	80013a4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fa4c 	bl	80013a4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e187      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d036      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x248>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff fa30 	bl	80013a4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff fa2c 	bl	80013a4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e167      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x200>
 8001f66:	e01b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x248>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fa19 	bl	80013a4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	e00e      	b.n	8001f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f76:	f7ff fa15 	bl	80013a4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d907      	bls.n	8001f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e150      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470000 	.word	0x42470000
 8001f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ea      	bne.n	8001f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8097 	beq.w	80020dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a7c      	ldr	r2, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b77      	ldr	r3, [pc, #476]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b74      	ldr	r3, [pc, #464]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a73      	ldr	r2, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f9d5 	bl	80013a4 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f9d1 	bl	80013a4 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e10c      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x2ea>
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	e01c      	b.n	800206c <HAL_RCC_OscConfig+0x324>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x30c>
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6713      	str	r3, [r2, #112]	; 0x70
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x324>
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a57      	ldr	r2, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f996 	bl	80013a4 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f992 	bl	80013a4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0cb      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ee      	beq.n	800207c <HAL_RCC_OscConfig+0x334>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff f980 	bl	80013a4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7ff f97c 	bl	80013a4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0b5      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a38      	ldr	r2, [pc, #224]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a1 	beq.w	8002228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e6:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d05c      	beq.n	80021ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d141      	bne.n	800217e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_OscConfig+0x478>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff f950 	bl	80013a4 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f94c 	bl	80013a4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e087      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	491b      	ldr	r1, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x478>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff f925 	bl	80013a4 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff f921 	bl	80013a4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e05c      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x416>
 800217c:	e054      	b.n	8002228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff f90e 	bl	80013a4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f90a 	bl	80013a4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e045      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
 80021aa:	e03d      	b.n	8002228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e038      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000
 80021c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4ec>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d028      	beq.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d121      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d11a      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0cc      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d90c      	bls.n	8002274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b8      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	494d      	ldr	r1, [pc, #308]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d044      	beq.n	8002358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d119      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e067      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4934      	ldr	r1, [pc, #208]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7ff f83c 	bl	80013a4 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff f838 	bl	80013a4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e04f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d20c      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e032      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4916      	ldr	r1, [pc, #88]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023be:	f000 f821 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490a      	ldr	r1, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe ff9e 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	080047e0 	.word	0x080047e0
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000064 	.word	0x20000064

08002404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b090      	sub	sp, #64	; 0x40
 800240a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002414:	2300      	movs	r3, #0
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_GetSysClockFreq+0x180>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d00d      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x40>
 8002428:	2b08      	cmp	r3, #8
 800242a:	f200 80a2 	bhi.w	8002572 <HAL_RCC_GetSysClockFreq+0x16e>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x34>
 8002432:	2b04      	cmp	r3, #4
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x3a>
 8002436:	e09c      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_GetSysClockFreq+0x184>)
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800243c:	e09c      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800243e:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_GetSysClockFreq+0x188>)
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002442:	e099      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002444:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <HAL_RCC_GetSysClockFreq+0x180>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244e:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_RCC_GetSysClockFreq+0x180>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d027      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_GetSysClockFreq+0x180>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	2200      	movs	r2, #0
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	627a      	str	r2, [r7, #36]	; 0x24
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800246c:	2100      	movs	r1, #0
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_GetSysClockFreq+0x188>)
 8002470:	fb03 f201 	mul.w	r2, r3, r1
 8002474:	2300      	movs	r3, #0
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	4413      	add	r3, r2
 800247c:	4a43      	ldr	r2, [pc, #268]	; (800258c <HAL_RCC_GetSysClockFreq+0x188>)
 800247e:	fba0 2102 	umull	r2, r1, r0, r2
 8002482:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002484:	62ba      	str	r2, [r7, #40]	; 0x28
 8002486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002488:	4413      	add	r3, r2
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	2200      	movs	r2, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	61fa      	str	r2, [r7, #28]
 8002494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002498:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800249c:	f7fd fee8 	bl	8000270 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a8:	e055      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	2200      	movs	r2, #0
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	617a      	str	r2, [r7, #20]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024bc:	f04f 0b00 	mov.w	fp, #0
 80024c0:	4652      	mov	r2, sl
 80024c2:	465b      	mov	r3, fp
 80024c4:	f04f 0000 	mov.w	r0, #0
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	0159      	lsls	r1, r3, #5
 80024ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d2:	0150      	lsls	r0, r2, #5
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	ebb2 080a 	subs.w	r8, r2, sl
 80024dc:	eb63 090b 	sbc.w	r9, r3, fp
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ec:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024f0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024f4:	ebb2 0408 	subs.w	r4, r2, r8
 80024f8:	eb63 0509 	sbc.w	r5, r3, r9
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	00eb      	lsls	r3, r5, #3
 8002506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800250a:	00e2      	lsls	r2, r4, #3
 800250c:	4614      	mov	r4, r2
 800250e:	461d      	mov	r5, r3
 8002510:	eb14 030a 	adds.w	r3, r4, sl
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	eb45 030b 	adc.w	r3, r5, fp
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002528:	4629      	mov	r1, r5
 800252a:	028b      	lsls	r3, r1, #10
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	4604      	mov	r4, r0
 8002532:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002536:	4601      	mov	r1, r0
 8002538:	028a      	lsls	r2, r1, #10
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	2200      	movs	r2, #0
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	60fa      	str	r2, [r7, #12]
 8002546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800254a:	f7fd fe91 	bl	8000270 <__aeabi_uldivmod>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4613      	mov	r3, r2
 8002554:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_GetSysClockFreq+0x180>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0c1b      	lsrs	r3, r3, #16
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	3301      	adds	r3, #1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002570:	e002      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetSysClockFreq+0x184>)
 8002574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002576:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800257a:	4618      	mov	r0, r3
 800257c:	3740      	adds	r7, #64	; 0x40
 800257e:	46bd      	mov	sp, r7
 8002580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	00f42400 	.word	0x00f42400
 800258c:	017d7840 	.word	0x017d7840

08002590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff2 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	080047f0 	.word	0x080047f0

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffde 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0b5b      	lsrs	r3, r3, #13
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	080047f0 	.word	0x080047f0

080025f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e041      	b.n	800268a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fc2c 	bl	8000e78 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f000 facc 	bl	8002bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_TIM_OC_Start_IT+0x28>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e022      	b.n	8002702 <HAL_TIM_OC_Start_IT+0x6e>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d109      	bne.n	80026d6 <HAL_TIM_OC_Start_IT+0x42>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e015      	b.n	8002702 <HAL_TIM_OC_Start_IT+0x6e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d109      	bne.n	80026f0 <HAL_TIM_OC_Start_IT+0x5c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e008      	b.n	8002702 <HAL_TIM_OC_Start_IT+0x6e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0c7      	b.n	800289a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <HAL_TIM_OC_Start_IT+0x86>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002718:	e013      	b.n	8002742 <HAL_TIM_OC_Start_IT+0xae>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d104      	bne.n	800272a <HAL_TIM_OC_Start_IT+0x96>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002728:	e00b      	b.n	8002742 <HAL_TIM_OC_Start_IT+0xae>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d104      	bne.n	800273a <HAL_TIM_OC_Start_IT+0xa6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002738:	e003      	b.n	8002742 <HAL_TIM_OC_Start_IT+0xae>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d841      	bhi.n	80027cc <HAL_TIM_OC_Start_IT+0x138>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <HAL_TIM_OC_Start_IT+0xbc>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002785 	.word	0x08002785
 8002754:	080027cd 	.word	0x080027cd
 8002758:	080027cd 	.word	0x080027cd
 800275c:	080027cd 	.word	0x080027cd
 8002760:	08002797 	.word	0x08002797
 8002764:	080027cd 	.word	0x080027cd
 8002768:	080027cd 	.word	0x080027cd
 800276c:	080027cd 	.word	0x080027cd
 8002770:	080027a9 	.word	0x080027a9
 8002774:	080027cd 	.word	0x080027cd
 8002778:	080027cd 	.word	0x080027cd
 800277c:	080027cd 	.word	0x080027cd
 8002780:	080027bb 	.word	0x080027bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0202 	orr.w	r2, r2, #2
 8002792:	60da      	str	r2, [r3, #12]
      break;
 8002794:	e01d      	b.n	80027d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0204 	orr.w	r2, r2, #4
 80027a4:	60da      	str	r2, [r3, #12]
      break;
 80027a6:	e014      	b.n	80027d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0208 	orr.w	r2, r2, #8
 80027b6:	60da      	str	r2, [r3, #12]
      break;
 80027b8:	e00b      	b.n	80027d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0210 	orr.w	r2, r2, #16
 80027c8:	60da      	str	r2, [r3, #12]
      break;
 80027ca:	e002      	b.n	80027d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      break;
 80027d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d15f      	bne.n	8002898 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2201      	movs	r2, #1
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fc3f 	bl	8003064 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2e      	ldr	r2, [pc, #184]	; (80028a4 <HAL_TIM_OC_Start_IT+0x210>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_TIM_OC_Start_IT+0x166>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <HAL_TIM_OC_Start_IT+0x214>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_OC_Start_IT+0x16a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_TIM_OC_Start_IT+0x16c>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <HAL_TIM_OC_Start_IT+0x210>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d022      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d01d      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <HAL_TIM_OC_Start_IT+0x218>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d018      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_TIM_OC_Start_IT+0x21c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_TIM_OC_Start_IT+0x220>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00e      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <HAL_TIM_OC_Start_IT+0x214>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_TIM_OC_Start_IT+0x224>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_TIM_OC_Start_IT+0x1d0>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_TIM_OC_Start_IT+0x228>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b06      	cmp	r3, #6
 8002874:	d010      	beq.n	8002898 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002886:	e007      	b.n	8002898 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40000c00 	.word	0x40000c00
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40001800 	.word	0x40001800

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0202 	mvn.w	r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f949 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe faa6 	bl	8000e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f94b 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f91f 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fa7c 	bl	8000e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f921 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8f5 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fa52 	bl	8000e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8f7 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8cb 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fa28 	bl	8000e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8cd 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8a2 	bl	8002b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fb27 	bl	80030be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d10e      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d107      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f891 	bl	8002bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d107      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0220 	mvn.w	r2, #32
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 faf2 	bl	80030ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_OC_ConfigChannel+0x1e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e048      	b.n	8002b80 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d839      	bhi.n	8002b70 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b39 	.word	0x08002b39
 8002b08:	08002b71 	.word	0x08002b71
 8002b0c:	08002b71 	.word	0x08002b71
 8002b10:	08002b71 	.word	0x08002b71
 8002b14:	08002b47 	.word	0x08002b47
 8002b18:	08002b71 	.word	0x08002b71
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002b71 	.word	0x08002b71
 8002b24:	08002b55 	.word	0x08002b55
 8002b28:	08002b71 	.word	0x08002b71
 8002b2c:	08002b71 	.word	0x08002b71
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b63 	.word	0x08002b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f8e4 	bl	8002d0c <TIM_OC1_SetConfig>
      break;
 8002b44:	e017      	b.n	8002b76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f94d 	bl	8002dec <TIM_OC2_SetConfig>
      break;
 8002b52:	e010      	b.n	8002b76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f9ba 	bl	8002ed4 <TIM_OC3_SetConfig>
      break;
 8002b60:	e009      	b.n	8002b76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fa27 	bl	8002fbc <TIM_OC4_SetConfig>
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3f      	ldr	r2, [pc, #252]	; (8002ce0 <TIM_Base_SetConfig+0x110>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d00f      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3c      	ldr	r2, [pc, #240]	; (8002ce4 <TIM_Base_SetConfig+0x114>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <TIM_Base_SetConfig+0x118>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <TIM_Base_SetConfig+0x110>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02b      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c30:	d027      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <TIM_Base_SetConfig+0x114>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d023      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <TIM_Base_SetConfig+0x118>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01f      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a29      	ldr	r2, [pc, #164]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01b      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d017      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <TIM_Base_SetConfig+0x124>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <TIM_Base_SetConfig+0x128>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00f      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <TIM_Base_SetConfig+0x12c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <TIM_Base_SetConfig+0x130>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <TIM_Base_SetConfig+0x134>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <TIM_Base_SetConfig+0x138>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <TIM_Base_SetConfig+0x110>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0xf8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d103      	bne.n	8002cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	40001800 	.word	0x40001800
 8002d04:	40001c00 	.word	0x40001c00
 8002d08:	40002000 	.word	0x40002000

08002d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 0302 	bic.w	r3, r3, #2
 8002d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <TIM_OC1_SetConfig+0xd8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_OC1_SetConfig+0x64>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <TIM_OC1_SetConfig+0xdc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10c      	bne.n	8002d8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0308 	bic.w	r3, r3, #8
 8002d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <TIM_OC1_SetConfig+0xd8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_OC1_SetConfig+0x8e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <TIM_OC1_SetConfig+0xdc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d111      	bne.n	8002dbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	621a      	str	r2, [r3, #32]
}
 8002dd8:	bf00      	nop
 8002dda:	371c      	adds	r7, #28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40010400 	.word	0x40010400

08002dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0210 	bic.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f023 0320 	bic.w	r3, r3, #32
 8002e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <TIM_OC2_SetConfig+0xe0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_OC2_SetConfig+0x68>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <TIM_OC2_SetConfig+0xe4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10d      	bne.n	8002e70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <TIM_OC2_SetConfig+0xe0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_OC2_SetConfig+0x94>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <TIM_OC2_SetConfig+0xe4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d113      	bne.n	8002ea8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <TIM_OC3_SetConfig+0xe0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_OC3_SetConfig+0x66>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <TIM_OC3_SetConfig+0xe4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10d      	bne.n	8002f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <TIM_OC3_SetConfig+0xe0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_OC3_SetConfig+0x92>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <TIM_OC3_SetConfig+0xe4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d113      	bne.n	8002f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	621a      	str	r2, [r3, #32]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40010400 	.word	0x40010400

08002fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a11      	ldr	r2, [pc, #68]	; (800305c <TIM_OC4_SetConfig+0xa0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_OC4_SetConfig+0x68>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <TIM_OC4_SetConfig+0xa4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d109      	bne.n	8003038 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40010000 	.word	0x40010000
 8003060:	40010400 	.word	0x40010400

08003064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	43db      	mvns	r3, r3
 8003086:	401a      	ands	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e03f      	b.n	8003162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe f842 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fc0b 	bl	8003930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b08a      	sub	sp, #40	; 0x28
 800316e:	af02      	add	r7, sp, #8
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b20      	cmp	r3, #32
 8003188:	d17c      	bne.n	8003284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_UART_Transmit+0x2c>
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e075      	b.n	8003286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_UART_Transmit+0x3e>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e06e      	b.n	8003286 <HAL_UART_Transmit+0x11c>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031be:	f7fe f8f1 	bl	80013a4 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d108      	bne.n	80031ec <HAL_UART_Transmit+0x82>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e003      	b.n	80031f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031fc:	e02a      	b.n	8003254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9be 	bl	800358a <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e036      	b.n	8003286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3302      	adds	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e007      	b.n	8003246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1cf      	bne.n	80031fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	2140      	movs	r1, #64	; 0x40
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f98e 	bl	800358a <UART_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e006      	b.n	8003286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d11d      	bne.n	80032e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_UART_Receive_IT+0x26>
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e016      	b.n	80032e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Receive_IT+0x38>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e00f      	b.n	80032e6 <HAL_UART_Receive_IT+0x58>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f9c3 	bl	8003666 <UART_Start_Receive_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	e000      	b.n	80032e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b20      	cmp	r3, #32
 8003306:	d11d      	bne.n	8003344 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_UART_Receive_DMA+0x26>
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e016      	b.n	8003346 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_UART_Receive_DMA+0x38>
 8003322:	2302      	movs	r3, #2
 8003324:	e00f      	b.n	8003346 <HAL_UART_Receive_DMA+0x58>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	461a      	mov	r2, r3
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f9d0 	bl	80036e0 <UART_Start_Receive_DMA>
 8003340:	4603      	mov	r3, r0
 8003342:	e000      	b.n	8003346 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b09c      	sub	sp, #112	; 0x70
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d172      	bne.n	800349c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	2200      	movs	r2, #0
 80033ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80033de:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	667b      	str	r3, [r7, #100]	; 0x64
 8003408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3314      	adds	r3, #20
 800340e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003410:	647a      	str	r2, [r7, #68]	; 0x44
 8003412:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800341e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3314      	adds	r3, #20
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	623b      	str	r3, [r7, #32]
   return(result);
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343a:	663b      	str	r3, [r7, #96]	; 0x60
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3314      	adds	r3, #20
 8003442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003444:	633a      	str	r2, [r7, #48]	; 0x30
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	2b01      	cmp	r3, #1
 8003466:	d119      	bne.n	800349c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	60fb      	str	r3, [r7, #12]
   return(result);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0310 	bic.w	r3, r3, #16
 800347e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	617b      	str	r3, [r7, #20]
   return(result);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a8:	4619      	mov	r1, r3
 80034aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034ac:	f7ff ff6a 	bl	8003384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034b0:	e002      	b.n	80034b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80034b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034b4:	f7ff ff4b 	bl	800334e <HAL_UART_RxCpltCallback>
}
 80034b8:	bf00      	nop
 80034ba:	3770      	adds	r7, #112	; 0x70
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d108      	bne.n	80034e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	4619      	mov	r1, r3
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ff4f 	bl	8003384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034e6:	e002      	b.n	80034ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff ff39 	bl	8003360 <HAL_UART_RxHalfCpltCallback>
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b21      	cmp	r3, #33	; 0x21
 8003528:	d108      	bne.n	800353c <UART_DMAError+0x46>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003536:	68b8      	ldr	r0, [r7, #8]
 8003538:	f000 f970 	bl	800381c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b22      	cmp	r3, #34	; 0x22
 800355c:	d108      	bne.n	8003570 <UART_DMAError+0x7a>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f000 f97d 	bl	800386a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0210 	orr.w	r2, r3, #16
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800357c:	68b8      	ldr	r0, [r7, #8]
 800357e:	f7ff fef8 	bl	8003372 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b090      	sub	sp, #64	; 0x40
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359a:	e050      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d04c      	beq.n	800363e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0x30>
 80035aa:	f7fd fefb 	bl	80013a4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d241      	bcs.n	800363e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035da:	637a      	str	r2, [r7, #52]	; 0x34
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e5      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	613b      	str	r3, [r7, #16]
   return(result);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360e:	623a      	str	r2, [r7, #32]
 8003610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	69f9      	ldr	r1, [r7, #28]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	61bb      	str	r3, [r7, #24]
   return(result);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e5      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e00f      	b.n	800365e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d09f      	beq.n	800359c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3740      	adds	r7, #64	; 0x40
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2222      	movs	r2, #34	; 0x22
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b098      	sub	sp, #96	; 0x60
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2222      	movs	r2, #34	; 0x22
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	4a40      	ldr	r2, [pc, #256]	; (8003810 <UART_Start_Receive_DMA+0x130>)
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <UART_Start_Receive_DMA+0x134>)
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	4a3e      	ldr	r2, [pc, #248]	; (8003818 <UART_Start_Receive_DMA+0x138>)
 800371e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003728:	f107 0308 	add.w	r3, r7, #8
 800372c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	f7fe f802 	bl	8001748 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d019      	beq.n	800379e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	65bb      	str	r3, [r7, #88]	; 0x58
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800378a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800378c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e5      	bne.n	800376a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	657b      	str	r3, [r7, #84]	; 0x54
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3314      	adds	r3, #20
 80037bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037be:	63ba      	str	r2, [r7, #56]	; 0x38
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e5      	bne.n	800379e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	617b      	str	r3, [r7, #20]
   return(result);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3314      	adds	r3, #20
 80037f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037f2:	627a      	str	r2, [r7, #36]	; 0x24
 80037f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6a39      	ldr	r1, [r7, #32]
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e5      	bne.n	80037d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3760      	adds	r7, #96	; 0x60
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	0800339b 	.word	0x0800339b
 8003814:	080034c1 	.word	0x080034c1
 8003818:	080034f7 	.word	0x080034f7

0800381c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60bb      	str	r3, [r7, #8]
   return(result);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	61ba      	str	r2, [r7, #24]
 8003846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003860:	bf00      	nop
 8003862:	3724      	adds	r7, #36	; 0x24
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386a:	b480      	push	{r7}
 800386c:	b095      	sub	sp, #84	; 0x54
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003892:	643a      	str	r2, [r7, #64]	; 0x40
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e5      	bne.n	80038a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d119      	bne.n	8003916 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f023 0310 	bic.w	r3, r3, #16
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003902:	61ba      	str	r2, [r7, #24]
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	613b      	str	r3, [r7, #16]
   return(result);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003924:	bf00      	nop
 8003926:	3754      	adds	r7, #84	; 0x54
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003934:	b0c0      	sub	sp, #256	; 0x100
 8003936:	af00      	add	r7, sp, #0
 8003938:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	68d9      	ldr	r1, [r3, #12]
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	ea40 0301 	orr.w	r3, r0, r1
 8003958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	431a      	orrs	r2, r3
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003988:	f021 010c 	bic.w	r1, r1, #12
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003996:	430b      	orrs	r3, r1
 8003998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	6999      	ldr	r1, [r3, #24]
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	ea40 0301 	orr.w	r3, r0, r1
 80039b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <UART_SetConfig+0x2d4>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d005      	beq.n	80039d0 <UART_SetConfig+0xa0>
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b8f      	ldr	r3, [pc, #572]	; (8003c08 <UART_SetConfig+0x2d8>)
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d104      	bne.n	80039da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7fe fdfc 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80039d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039d8:	e003      	b.n	80039e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039da:	f7fe fde3 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 80039de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	f040 8110 	bne.w	8003c10 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	1891      	adds	r1, r2, r2
 8003a08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a0a:	415b      	adcs	r3, r3
 8003a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	4604      	mov	r4, r0
 8003a18:	eb12 0804 	adds.w	r8, r2, r4
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	eb43 0904 	adc.w	r9, r3, r4
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	eb18 0303 	adds.w	r3, r8, r3
 8003a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a44:	460b      	mov	r3, r1
 8003a46:	eb49 0303 	adc.w	r3, r9, r3
 8003a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a62:	460b      	mov	r3, r1
 8003a64:	18db      	adds	r3, r3, r3
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
 8003a68:	4613      	mov	r3, r2
 8003a6a:	eb42 0303 	adc.w	r3, r2, r3
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a78:	f7fc fbfa 	bl	8000270 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <UART_SetConfig+0x2dc>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011c      	lsls	r4, r3, #4
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aac:	4645      	mov	r5, r8
 8003aae:	eb12 0a05 	adds.w	sl, r2, r5
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	460d      	mov	r5, r1
 8003ab8:	eb43 0b05 	adc.w	fp, r3, r5
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	469b      	mov	fp, r3
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8003ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ade:	460b      	mov	r3, r1
 8003ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003afc:	460b      	mov	r3, r1
 8003afe:	18db      	adds	r3, r3, r3
 8003b00:	643b      	str	r3, [r7, #64]	; 0x40
 8003b02:	4613      	mov	r3, r2
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b12:	f7fc fbad 	bl	8000270 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <UART_SetConfig+0x2dc>)
 8003b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1acb      	subs	r3, r1, r3
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <UART_SetConfig+0x2dc>)
 8003b34:	fba3 2302 	umull	r2, r3, r3, r2
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b40:	441c      	add	r4, r3
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6339      	str	r1, [r7, #48]	; 0x30
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4655      	mov	r5, sl
 8003b82:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bb8:	460b      	mov	r3, r1
 8003bba:	18db      	adds	r3, r3, r3
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bce:	f7fc fb4f 	bl	8000270 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <UART_SetConfig+0x2dc>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	; 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	3332      	adds	r3, #50	; 0x32
 8003bea:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <UART_SetConfig+0x2dc>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 0207 	and.w	r2, r3, #7
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4422      	add	r2, r4
 8003bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c00:	e109      	b.n	8003e16 <UART_SetConfig+0x4e6>
 8003c02:	bf00      	nop
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c22:	4642      	mov	r2, r8
 8003c24:	464b      	mov	r3, r9
 8003c26:	1891      	adds	r1, r2, r2
 8003c28:	6239      	str	r1, [r7, #32]
 8003c2a:	415b      	adcs	r3, r3
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c32:	4641      	mov	r1, r8
 8003c34:	1854      	adds	r4, r2, r1
 8003c36:	46cc      	mov	ip, r9
 8003c38:	eb43 050c 	adc.w	r5, r3, ip
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	00eb      	lsls	r3, r5, #3
 8003c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4a:	00e2      	lsls	r2, r4, #3
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	461d      	mov	r5, r3
 8003c50:	4640      	mov	r0, r8
 8003c52:	4649      	mov	r1, r9
 8003c54:	4603      	mov	r3, r0
 8003c56:	18e3      	adds	r3, r4, r3
 8003c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	eb45 0303 	adc.w	r3, r5, r3
 8003c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c82:	4629      	mov	r1, r5
 8003c84:	008b      	lsls	r3, r1, #2
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c90:	4601      	mov	r1, r0
 8003c92:	008a      	lsls	r2, r1, #2
 8003c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c98:	f7fc faea 	bl	8000270 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b60      	ldr	r3, [pc, #384]	; (8003e24 <UART_SetConfig+0x4f4>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011c      	lsls	r4, r3, #4
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	61b9      	str	r1, [r7, #24]
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ccc:	4641      	mov	r1, r8
 8003cce:	1851      	adds	r1, r2, r1
 8003cd0:	6139      	str	r1, [r7, #16]
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	00cb      	lsls	r3, r1, #3
 8003ce8:	4655      	mov	r5, sl
 8003cea:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003cee:	4651      	mov	r1, sl
 8003cf0:	00ca      	lsls	r2, r1, #3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d00:	464b      	mov	r3, r9
 8003d02:	460a      	mov	r2, r1
 8003d04:	eb42 0303 	adc.w	r3, r2, r3
 8003d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d24:	4649      	mov	r1, r9
 8003d26:	008b      	lsls	r3, r1, #2
 8003d28:	4645      	mov	r5, r8
 8003d2a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003d2e:	4641      	mov	r1, r8
 8003d30:	008a      	lsls	r2, r1, #2
 8003d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d36:	f7fc fa9b 	bl	8000270 <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <UART_SetConfig+0x4f4>)
 8003d40:	fba3 1302 	umull	r1, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	2164      	movs	r1, #100	; 0x64
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	3332      	adds	r3, #50	; 0x32
 8003d52:	4a34      	ldr	r2, [pc, #208]	; (8003e24 <UART_SetConfig+0x4f4>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d5e:	441c      	add	r4, r3
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d64:	2200      	movs	r2, #0
 8003d66:	673b      	str	r3, [r7, #112]	; 0x70
 8003d68:	677a      	str	r2, [r7, #116]	; 0x74
 8003d6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d6e:	4642      	mov	r2, r8
 8003d70:	464b      	mov	r3, r9
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	415b      	adcs	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7e:	4641      	mov	r1, r8
 8003d80:	1851      	adds	r1, r2, r1
 8003d82:	6039      	str	r1, [r7, #0]
 8003d84:	4649      	mov	r1, r9
 8003d86:	414b      	adcs	r3, r1
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d96:	4659      	mov	r1, fp
 8003d98:	00cb      	lsls	r3, r1, #3
 8003d9a:	4655      	mov	r5, sl
 8003d9c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003da0:	4651      	mov	r1, sl
 8003da2:	00ca      	lsls	r2, r1, #3
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	4642      	mov	r2, r8
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db0:	464b      	mov	r3, r9
 8003db2:	460a      	mov	r2, r1
 8003db4:	eb42 0303 	adc.w	r3, r2, r3
 8003db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc4:	667a      	str	r2, [r7, #100]	; 0x64
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	008b      	lsls	r3, r1, #2
 8003dd6:	4645      	mov	r5, r8
 8003dd8:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003ddc:	4641      	mov	r1, r8
 8003dde:	008a      	lsls	r2, r1, #2
 8003de0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003de4:	f7fc fa44 	bl	8000270 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <UART_SetConfig+0x4f4>)
 8003dee:	fba3 1302 	umull	r1, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2164      	movs	r1, #100	; 0x64
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	3332      	adds	r3, #50	; 0x32
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <UART_SetConfig+0x4f4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4422      	add	r2, r4
 8003e14:	609a      	str	r2, [r3, #8]
}
 8003e16:	bf00      	nop
 8003e18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e22:	bf00      	nop
 8003e24:	51eb851f 	.word	0x51eb851f

08003e28 <main>:




int main(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
  int ret = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]


  hwInit();
 8003e32:	f7fd fa3c 	bl	80012ae <hwInit>
  apInit();
 8003e36:	f7fc fba9 	bl	800058c <apInit>

  apMain();
 8003e3a:	f7fc fbdb 	bl	80005f4 <apMain>


  return ret;
 8003e3e:	687b      	ldr	r3, [r7, #4]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <__libc_init_array>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4d0d      	ldr	r5, [pc, #52]	; (8003e80 <__libc_init_array+0x38>)
 8003e4c:	4c0d      	ldr	r4, [pc, #52]	; (8003e84 <__libc_init_array+0x3c>)
 8003e4e:	1b64      	subs	r4, r4, r5
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	2600      	movs	r6, #0
 8003e54:	42a6      	cmp	r6, r4
 8003e56:	d109      	bne.n	8003e6c <__libc_init_array+0x24>
 8003e58:	4d0b      	ldr	r5, [pc, #44]	; (8003e88 <__libc_init_array+0x40>)
 8003e5a:	4c0c      	ldr	r4, [pc, #48]	; (8003e8c <__libc_init_array+0x44>)
 8003e5c:	f000 fcac 	bl	80047b8 <_init>
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	2600      	movs	r6, #0
 8003e66:	42a6      	cmp	r6, r4
 8003e68:	d105      	bne.n	8003e76 <__libc_init_array+0x2e>
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e70:	4798      	blx	r3
 8003e72:	3601      	adds	r6, #1
 8003e74:	e7ee      	b.n	8003e54 <__libc_init_array+0xc>
 8003e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7a:	4798      	blx	r3
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	e7f2      	b.n	8003e66 <__libc_init_array+0x1e>
 8003e80:	0800483c 	.word	0x0800483c
 8003e84:	0800483c 	.word	0x0800483c
 8003e88:	0800483c 	.word	0x0800483c
 8003e8c:	08004840 	.word	0x08004840

08003e90 <_vsniprintf_r>:
 8003e90:	b530      	push	{r4, r5, lr}
 8003e92:	4614      	mov	r4, r2
 8003e94:	2c00      	cmp	r4, #0
 8003e96:	b09b      	sub	sp, #108	; 0x6c
 8003e98:	4605      	mov	r5, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	da05      	bge.n	8003eaa <_vsniprintf_r+0x1a>
 8003e9e:	238b      	movs	r3, #139	; 0x8b
 8003ea0:	6003      	str	r3, [r0, #0]
 8003ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea6:	b01b      	add	sp, #108	; 0x6c
 8003ea8:	bd30      	pop	{r4, r5, pc}
 8003eaa:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003eae:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003eb2:	bf14      	ite	ne
 8003eb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003eb8:	4623      	moveq	r3, r4
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ec2:	9100      	str	r1, [sp, #0]
 8003ec4:	9104      	str	r1, [sp, #16]
 8003ec6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003eca:	4669      	mov	r1, sp
 8003ecc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ece:	f000 f875 	bl	8003fbc <_svfiprintf_r>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	bfbc      	itt	lt
 8003ed6:	238b      	movlt	r3, #139	; 0x8b
 8003ed8:	602b      	strlt	r3, [r5, #0]
 8003eda:	2c00      	cmp	r4, #0
 8003edc:	d0e3      	beq.n	8003ea6 <_vsniprintf_r+0x16>
 8003ede:	9b00      	ldr	r3, [sp, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e7df      	b.n	8003ea6 <_vsniprintf_r+0x16>
	...

08003ee8 <vsniprintf>:
 8003ee8:	b507      	push	{r0, r1, r2, lr}
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	460a      	mov	r2, r1
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	4803      	ldr	r0, [pc, #12]	; (8003f00 <vsniprintf+0x18>)
 8003ef4:	6800      	ldr	r0, [r0, #0]
 8003ef6:	f7ff ffcb 	bl	8003e90 <_vsniprintf_r>
 8003efa:	b003      	add	sp, #12
 8003efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f00:	2000006c 	.word	0x2000006c

08003f04 <__ssputs_r>:
 8003f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	688e      	ldr	r6, [r1, #8]
 8003f0a:	429e      	cmp	r6, r3
 8003f0c:	4682      	mov	sl, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	4690      	mov	r8, r2
 8003f12:	461f      	mov	r7, r3
 8003f14:	d838      	bhi.n	8003f88 <__ssputs_r+0x84>
 8003f16:	898a      	ldrh	r2, [r1, #12]
 8003f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f1c:	d032      	beq.n	8003f84 <__ssputs_r+0x80>
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	6909      	ldr	r1, [r1, #16]
 8003f22:	eba5 0901 	sub.w	r9, r5, r1
 8003f26:	6965      	ldr	r5, [r4, #20]
 8003f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f30:	3301      	adds	r3, #1
 8003f32:	444b      	add	r3, r9
 8003f34:	106d      	asrs	r5, r5, #1
 8003f36:	429d      	cmp	r5, r3
 8003f38:	bf38      	it	cc
 8003f3a:	461d      	movcc	r5, r3
 8003f3c:	0553      	lsls	r3, r2, #21
 8003f3e:	d531      	bpl.n	8003fa4 <__ssputs_r+0xa0>
 8003f40:	4629      	mov	r1, r5
 8003f42:	f000 fb61 	bl	8004608 <_malloc_r>
 8003f46:	4606      	mov	r6, r0
 8003f48:	b950      	cbnz	r0, 8003f60 <__ssputs_r+0x5c>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	f8ca 3000 	str.w	r3, [sl]
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f60:	6921      	ldr	r1, [r4, #16]
 8003f62:	464a      	mov	r2, r9
 8003f64:	f000 fabe 	bl	80044e4 <memcpy>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	6126      	str	r6, [r4, #16]
 8003f76:	6165      	str	r5, [r4, #20]
 8003f78:	444e      	add	r6, r9
 8003f7a:	eba5 0509 	sub.w	r5, r5, r9
 8003f7e:	6026      	str	r6, [r4, #0]
 8003f80:	60a5      	str	r5, [r4, #8]
 8003f82:	463e      	mov	r6, r7
 8003f84:	42be      	cmp	r6, r7
 8003f86:	d900      	bls.n	8003f8a <__ssputs_r+0x86>
 8003f88:	463e      	mov	r6, r7
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	4641      	mov	r1, r8
 8003f90:	f000 fab6 	bl	8004500 <memmove>
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	1b9b      	subs	r3, r3, r6
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	4433      	add	r3, r6
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	e7db      	b.n	8003f5c <__ssputs_r+0x58>
 8003fa4:	462a      	mov	r2, r5
 8003fa6:	f000 fba3 	bl	80046f0 <_realloc_r>
 8003faa:	4606      	mov	r6, r0
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d1e1      	bne.n	8003f74 <__ssputs_r+0x70>
 8003fb0:	6921      	ldr	r1, [r4, #16]
 8003fb2:	4650      	mov	r0, sl
 8003fb4:	f000 fabe 	bl	8004534 <_free_r>
 8003fb8:	e7c7      	b.n	8003f4a <__ssputs_r+0x46>
	...

08003fbc <_svfiprintf_r>:
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	4698      	mov	r8, r3
 8003fc2:	898b      	ldrh	r3, [r1, #12]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	b09d      	sub	sp, #116	; 0x74
 8003fc8:	4607      	mov	r7, r0
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	d50e      	bpl.n	8003fee <_svfiprintf_r+0x32>
 8003fd0:	690b      	ldr	r3, [r1, #16]
 8003fd2:	b963      	cbnz	r3, 8003fee <_svfiprintf_r+0x32>
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	f000 fb17 	bl	8004608 <_malloc_r>
 8003fda:	6028      	str	r0, [r5, #0]
 8003fdc:	6128      	str	r0, [r5, #16]
 8003fde:	b920      	cbnz	r0, 8003fea <_svfiprintf_r+0x2e>
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	e0d1      	b.n	800418e <_svfiprintf_r+0x1d2>
 8003fea:	2340      	movs	r3, #64	; 0x40
 8003fec:	616b      	str	r3, [r5, #20]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ffc:	2330      	movs	r3, #48	; 0x30
 8003ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041a8 <_svfiprintf_r+0x1ec>
 8004002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004006:	f04f 0901 	mov.w	r9, #1
 800400a:	4623      	mov	r3, r4
 800400c:	469a      	mov	sl, r3
 800400e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004012:	b10a      	cbz	r2, 8004018 <_svfiprintf_r+0x5c>
 8004014:	2a25      	cmp	r2, #37	; 0x25
 8004016:	d1f9      	bne.n	800400c <_svfiprintf_r+0x50>
 8004018:	ebba 0b04 	subs.w	fp, sl, r4
 800401c:	d00b      	beq.n	8004036 <_svfiprintf_r+0x7a>
 800401e:	465b      	mov	r3, fp
 8004020:	4622      	mov	r2, r4
 8004022:	4629      	mov	r1, r5
 8004024:	4638      	mov	r0, r7
 8004026:	f7ff ff6d 	bl	8003f04 <__ssputs_r>
 800402a:	3001      	adds	r0, #1
 800402c:	f000 80aa 	beq.w	8004184 <_svfiprintf_r+0x1c8>
 8004030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004032:	445a      	add	r2, fp
 8004034:	9209      	str	r2, [sp, #36]	; 0x24
 8004036:	f89a 3000 	ldrb.w	r3, [sl]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80a2 	beq.w	8004184 <_svfiprintf_r+0x1c8>
 8004040:	2300      	movs	r3, #0
 8004042:	f04f 32ff 	mov.w	r2, #4294967295
 8004046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800404a:	f10a 0a01 	add.w	sl, sl, #1
 800404e:	9304      	str	r3, [sp, #16]
 8004050:	9307      	str	r3, [sp, #28]
 8004052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004056:	931a      	str	r3, [sp, #104]	; 0x68
 8004058:	4654      	mov	r4, sl
 800405a:	2205      	movs	r2, #5
 800405c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004060:	4851      	ldr	r0, [pc, #324]	; (80041a8 <_svfiprintf_r+0x1ec>)
 8004062:	f7fc f8b5 	bl	80001d0 <memchr>
 8004066:	9a04      	ldr	r2, [sp, #16]
 8004068:	b9d8      	cbnz	r0, 80040a2 <_svfiprintf_r+0xe6>
 800406a:	06d0      	lsls	r0, r2, #27
 800406c:	bf44      	itt	mi
 800406e:	2320      	movmi	r3, #32
 8004070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004074:	0711      	lsls	r1, r2, #28
 8004076:	bf44      	itt	mi
 8004078:	232b      	movmi	r3, #43	; 0x2b
 800407a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800407e:	f89a 3000 	ldrb.w	r3, [sl]
 8004082:	2b2a      	cmp	r3, #42	; 0x2a
 8004084:	d015      	beq.n	80040b2 <_svfiprintf_r+0xf6>
 8004086:	9a07      	ldr	r2, [sp, #28]
 8004088:	4654      	mov	r4, sl
 800408a:	2000      	movs	r0, #0
 800408c:	f04f 0c0a 	mov.w	ip, #10
 8004090:	4621      	mov	r1, r4
 8004092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004096:	3b30      	subs	r3, #48	; 0x30
 8004098:	2b09      	cmp	r3, #9
 800409a:	d94e      	bls.n	800413a <_svfiprintf_r+0x17e>
 800409c:	b1b0      	cbz	r0, 80040cc <_svfiprintf_r+0x110>
 800409e:	9207      	str	r2, [sp, #28]
 80040a0:	e014      	b.n	80040cc <_svfiprintf_r+0x110>
 80040a2:	eba0 0308 	sub.w	r3, r0, r8
 80040a6:	fa09 f303 	lsl.w	r3, r9, r3
 80040aa:	4313      	orrs	r3, r2
 80040ac:	9304      	str	r3, [sp, #16]
 80040ae:	46a2      	mov	sl, r4
 80040b0:	e7d2      	b.n	8004058 <_svfiprintf_r+0x9c>
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	1d19      	adds	r1, r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	9103      	str	r1, [sp, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfbb      	ittet	lt
 80040be:	425b      	neglt	r3, r3
 80040c0:	f042 0202 	orrlt.w	r2, r2, #2
 80040c4:	9307      	strge	r3, [sp, #28]
 80040c6:	9307      	strlt	r3, [sp, #28]
 80040c8:	bfb8      	it	lt
 80040ca:	9204      	strlt	r2, [sp, #16]
 80040cc:	7823      	ldrb	r3, [r4, #0]
 80040ce:	2b2e      	cmp	r3, #46	; 0x2e
 80040d0:	d10c      	bne.n	80040ec <_svfiprintf_r+0x130>
 80040d2:	7863      	ldrb	r3, [r4, #1]
 80040d4:	2b2a      	cmp	r3, #42	; 0x2a
 80040d6:	d135      	bne.n	8004144 <_svfiprintf_r+0x188>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	9203      	str	r2, [sp, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfb8      	it	lt
 80040e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e8:	3402      	adds	r4, #2
 80040ea:	9305      	str	r3, [sp, #20]
 80040ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80041ac <_svfiprintf_r+0x1f0>
 80040f0:	7821      	ldrb	r1, [r4, #0]
 80040f2:	2203      	movs	r2, #3
 80040f4:	4650      	mov	r0, sl
 80040f6:	f7fc f86b 	bl	80001d0 <memchr>
 80040fa:	b140      	cbz	r0, 800410e <_svfiprintf_r+0x152>
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	eba0 000a 	sub.w	r0, r0, sl
 8004102:	fa03 f000 	lsl.w	r0, r3, r0
 8004106:	9b04      	ldr	r3, [sp, #16]
 8004108:	4303      	orrs	r3, r0
 800410a:	3401      	adds	r4, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004112:	4827      	ldr	r0, [pc, #156]	; (80041b0 <_svfiprintf_r+0x1f4>)
 8004114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004118:	2206      	movs	r2, #6
 800411a:	f7fc f859 	bl	80001d0 <memchr>
 800411e:	2800      	cmp	r0, #0
 8004120:	d038      	beq.n	8004194 <_svfiprintf_r+0x1d8>
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <_svfiprintf_r+0x1f8>)
 8004124:	bb1b      	cbnz	r3, 800416e <_svfiprintf_r+0x1b2>
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	3307      	adds	r3, #7
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	3308      	adds	r3, #8
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004134:	4433      	add	r3, r6
 8004136:	9309      	str	r3, [sp, #36]	; 0x24
 8004138:	e767      	b.n	800400a <_svfiprintf_r+0x4e>
 800413a:	fb0c 3202 	mla	r2, ip, r2, r3
 800413e:	460c      	mov	r4, r1
 8004140:	2001      	movs	r0, #1
 8004142:	e7a5      	b.n	8004090 <_svfiprintf_r+0xd4>
 8004144:	2300      	movs	r3, #0
 8004146:	3401      	adds	r4, #1
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	4619      	mov	r1, r3
 800414c:	f04f 0c0a 	mov.w	ip, #10
 8004150:	4620      	mov	r0, r4
 8004152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004156:	3a30      	subs	r2, #48	; 0x30
 8004158:	2a09      	cmp	r2, #9
 800415a:	d903      	bls.n	8004164 <_svfiprintf_r+0x1a8>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0c5      	beq.n	80040ec <_svfiprintf_r+0x130>
 8004160:	9105      	str	r1, [sp, #20]
 8004162:	e7c3      	b.n	80040ec <_svfiprintf_r+0x130>
 8004164:	fb0c 2101 	mla	r1, ip, r1, r2
 8004168:	4604      	mov	r4, r0
 800416a:	2301      	movs	r3, #1
 800416c:	e7f0      	b.n	8004150 <_svfiprintf_r+0x194>
 800416e:	ab03      	add	r3, sp, #12
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	462a      	mov	r2, r5
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <_svfiprintf_r+0x1fc>)
 8004176:	a904      	add	r1, sp, #16
 8004178:	4638      	mov	r0, r7
 800417a:	f3af 8000 	nop.w
 800417e:	1c42      	adds	r2, r0, #1
 8004180:	4606      	mov	r6, r0
 8004182:	d1d6      	bne.n	8004132 <_svfiprintf_r+0x176>
 8004184:	89ab      	ldrh	r3, [r5, #12]
 8004186:	065b      	lsls	r3, r3, #25
 8004188:	f53f af2c 	bmi.w	8003fe4 <_svfiprintf_r+0x28>
 800418c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800418e:	b01d      	add	sp, #116	; 0x74
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004194:	ab03      	add	r3, sp, #12
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	462a      	mov	r2, r5
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <_svfiprintf_r+0x1fc>)
 800419c:	a904      	add	r1, sp, #16
 800419e:	4638      	mov	r0, r7
 80041a0:	f000 f87a 	bl	8004298 <_printf_i>
 80041a4:	e7eb      	b.n	800417e <_svfiprintf_r+0x1c2>
 80041a6:	bf00      	nop
 80041a8:	08004800 	.word	0x08004800
 80041ac:	08004806 	.word	0x08004806
 80041b0:	0800480a 	.word	0x0800480a
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08003f05 	.word	0x08003f05

080041bc <_printf_common>:
 80041bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	4616      	mov	r6, r2
 80041c2:	4699      	mov	r9, r3
 80041c4:	688a      	ldr	r2, [r1, #8]
 80041c6:	690b      	ldr	r3, [r1, #16]
 80041c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	bfb8      	it	lt
 80041d0:	4613      	movlt	r3, r2
 80041d2:	6033      	str	r3, [r6, #0]
 80041d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041d8:	4607      	mov	r7, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	b10a      	cbz	r2, 80041e2 <_printf_common+0x26>
 80041de:	3301      	adds	r3, #1
 80041e0:	6033      	str	r3, [r6, #0]
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	0699      	lsls	r1, r3, #26
 80041e6:	bf42      	ittt	mi
 80041e8:	6833      	ldrmi	r3, [r6, #0]
 80041ea:	3302      	addmi	r3, #2
 80041ec:	6033      	strmi	r3, [r6, #0]
 80041ee:	6825      	ldr	r5, [r4, #0]
 80041f0:	f015 0506 	ands.w	r5, r5, #6
 80041f4:	d106      	bne.n	8004204 <_printf_common+0x48>
 80041f6:	f104 0a19 	add.w	sl, r4, #25
 80041fa:	68e3      	ldr	r3, [r4, #12]
 80041fc:	6832      	ldr	r2, [r6, #0]
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	42ab      	cmp	r3, r5
 8004202:	dc26      	bgt.n	8004252 <_printf_common+0x96>
 8004204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004208:	1e13      	subs	r3, r2, #0
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	bf18      	it	ne
 800420e:	2301      	movne	r3, #1
 8004210:	0692      	lsls	r2, r2, #26
 8004212:	d42b      	bmi.n	800426c <_printf_common+0xb0>
 8004214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004218:	4649      	mov	r1, r9
 800421a:	4638      	mov	r0, r7
 800421c:	47c0      	blx	r8
 800421e:	3001      	adds	r0, #1
 8004220:	d01e      	beq.n	8004260 <_printf_common+0xa4>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	68e5      	ldr	r5, [r4, #12]
 8004226:	6832      	ldr	r2, [r6, #0]
 8004228:	f003 0306 	and.w	r3, r3, #6
 800422c:	2b04      	cmp	r3, #4
 800422e:	bf08      	it	eq
 8004230:	1aad      	subeq	r5, r5, r2
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	6922      	ldr	r2, [r4, #16]
 8004236:	bf0c      	ite	eq
 8004238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800423c:	2500      	movne	r5, #0
 800423e:	4293      	cmp	r3, r2
 8004240:	bfc4      	itt	gt
 8004242:	1a9b      	subgt	r3, r3, r2
 8004244:	18ed      	addgt	r5, r5, r3
 8004246:	2600      	movs	r6, #0
 8004248:	341a      	adds	r4, #26
 800424a:	42b5      	cmp	r5, r6
 800424c:	d11a      	bne.n	8004284 <_printf_common+0xc8>
 800424e:	2000      	movs	r0, #0
 8004250:	e008      	b.n	8004264 <_printf_common+0xa8>
 8004252:	2301      	movs	r3, #1
 8004254:	4652      	mov	r2, sl
 8004256:	4649      	mov	r1, r9
 8004258:	4638      	mov	r0, r7
 800425a:	47c0      	blx	r8
 800425c:	3001      	adds	r0, #1
 800425e:	d103      	bne.n	8004268 <_printf_common+0xac>
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004268:	3501      	adds	r5, #1
 800426a:	e7c6      	b.n	80041fa <_printf_common+0x3e>
 800426c:	18e1      	adds	r1, r4, r3
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	2030      	movs	r0, #48	; 0x30
 8004272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004276:	4422      	add	r2, r4
 8004278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800427c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004280:	3302      	adds	r3, #2
 8004282:	e7c7      	b.n	8004214 <_printf_common+0x58>
 8004284:	2301      	movs	r3, #1
 8004286:	4622      	mov	r2, r4
 8004288:	4649      	mov	r1, r9
 800428a:	4638      	mov	r0, r7
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d0e6      	beq.n	8004260 <_printf_common+0xa4>
 8004292:	3601      	adds	r6, #1
 8004294:	e7d9      	b.n	800424a <_printf_common+0x8e>
	...

08004298 <_printf_i>:
 8004298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	7e0f      	ldrb	r7, [r1, #24]
 800429e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042a0:	2f78      	cmp	r7, #120	; 0x78
 80042a2:	4691      	mov	r9, r2
 80042a4:	4680      	mov	r8, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	469a      	mov	sl, r3
 80042aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042ae:	d807      	bhi.n	80042c0 <_printf_i+0x28>
 80042b0:	2f62      	cmp	r7, #98	; 0x62
 80042b2:	d80a      	bhi.n	80042ca <_printf_i+0x32>
 80042b4:	2f00      	cmp	r7, #0
 80042b6:	f000 80d8 	beq.w	800446a <_printf_i+0x1d2>
 80042ba:	2f58      	cmp	r7, #88	; 0x58
 80042bc:	f000 80a3 	beq.w	8004406 <_printf_i+0x16e>
 80042c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c8:	e03a      	b.n	8004340 <_printf_i+0xa8>
 80042ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ce:	2b15      	cmp	r3, #21
 80042d0:	d8f6      	bhi.n	80042c0 <_printf_i+0x28>
 80042d2:	a101      	add	r1, pc, #4	; (adr r1, 80042d8 <_printf_i+0x40>)
 80042d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d8:	08004331 	.word	0x08004331
 80042dc:	08004345 	.word	0x08004345
 80042e0:	080042c1 	.word	0x080042c1
 80042e4:	080042c1 	.word	0x080042c1
 80042e8:	080042c1 	.word	0x080042c1
 80042ec:	080042c1 	.word	0x080042c1
 80042f0:	08004345 	.word	0x08004345
 80042f4:	080042c1 	.word	0x080042c1
 80042f8:	080042c1 	.word	0x080042c1
 80042fc:	080042c1 	.word	0x080042c1
 8004300:	080042c1 	.word	0x080042c1
 8004304:	08004451 	.word	0x08004451
 8004308:	08004375 	.word	0x08004375
 800430c:	08004433 	.word	0x08004433
 8004310:	080042c1 	.word	0x080042c1
 8004314:	080042c1 	.word	0x080042c1
 8004318:	08004473 	.word	0x08004473
 800431c:	080042c1 	.word	0x080042c1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042c1 	.word	0x080042c1
 8004328:	080042c1 	.word	0x080042c1
 800432c:	0800443b 	.word	0x0800443b
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	602a      	str	r2, [r5, #0]
 8004338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800433c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004340:	2301      	movs	r3, #1
 8004342:	e0a3      	b.n	800448c <_printf_i+0x1f4>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	6829      	ldr	r1, [r5, #0]
 8004348:	0606      	lsls	r6, r0, #24
 800434a:	f101 0304 	add.w	r3, r1, #4
 800434e:	d50a      	bpl.n	8004366 <_printf_i+0xce>
 8004350:	680e      	ldr	r6, [r1, #0]
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	2e00      	cmp	r6, #0
 8004356:	da03      	bge.n	8004360 <_printf_i+0xc8>
 8004358:	232d      	movs	r3, #45	; 0x2d
 800435a:	4276      	negs	r6, r6
 800435c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004360:	485e      	ldr	r0, [pc, #376]	; (80044dc <_printf_i+0x244>)
 8004362:	230a      	movs	r3, #10
 8004364:	e019      	b.n	800439a <_printf_i+0x102>
 8004366:	680e      	ldr	r6, [r1, #0]
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800436e:	bf18      	it	ne
 8004370:	b236      	sxthne	r6, r6
 8004372:	e7ef      	b.n	8004354 <_printf_i+0xbc>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	1d19      	adds	r1, r3, #4
 800437a:	6029      	str	r1, [r5, #0]
 800437c:	0601      	lsls	r1, r0, #24
 800437e:	d501      	bpl.n	8004384 <_printf_i+0xec>
 8004380:	681e      	ldr	r6, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0xf2>
 8004384:	0646      	lsls	r6, r0, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0xe8>
 8004388:	881e      	ldrh	r6, [r3, #0]
 800438a:	4854      	ldr	r0, [pc, #336]	; (80044dc <_printf_i+0x244>)
 800438c:	2f6f      	cmp	r7, #111	; 0x6f
 800438e:	bf0c      	ite	eq
 8004390:	2308      	moveq	r3, #8
 8004392:	230a      	movne	r3, #10
 8004394:	2100      	movs	r1, #0
 8004396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800439a:	6865      	ldr	r5, [r4, #4]
 800439c:	60a5      	str	r5, [r4, #8]
 800439e:	2d00      	cmp	r5, #0
 80043a0:	bfa2      	ittt	ge
 80043a2:	6821      	ldrge	r1, [r4, #0]
 80043a4:	f021 0104 	bicge.w	r1, r1, #4
 80043a8:	6021      	strge	r1, [r4, #0]
 80043aa:	b90e      	cbnz	r6, 80043b0 <_printf_i+0x118>
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	d04d      	beq.n	800444c <_printf_i+0x1b4>
 80043b0:	4615      	mov	r5, r2
 80043b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043b6:	fb03 6711 	mls	r7, r3, r1, r6
 80043ba:	5dc7      	ldrb	r7, [r0, r7]
 80043bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043c0:	4637      	mov	r7, r6
 80043c2:	42bb      	cmp	r3, r7
 80043c4:	460e      	mov	r6, r1
 80043c6:	d9f4      	bls.n	80043b2 <_printf_i+0x11a>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d10b      	bne.n	80043e4 <_printf_i+0x14c>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	07de      	lsls	r6, r3, #31
 80043d0:	d508      	bpl.n	80043e4 <_printf_i+0x14c>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	6861      	ldr	r1, [r4, #4]
 80043d6:	4299      	cmp	r1, r3
 80043d8:	bfde      	ittt	le
 80043da:	2330      	movle	r3, #48	; 0x30
 80043dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043e4:	1b52      	subs	r2, r2, r5
 80043e6:	6122      	str	r2, [r4, #16]
 80043e8:	f8cd a000 	str.w	sl, [sp]
 80043ec:	464b      	mov	r3, r9
 80043ee:	aa03      	add	r2, sp, #12
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff fee2 	bl	80041bc <_printf_common>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d14c      	bne.n	8004496 <_printf_i+0x1fe>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b004      	add	sp, #16
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	4835      	ldr	r0, [pc, #212]	; (80044dc <_printf_i+0x244>)
 8004408:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800440c:	6829      	ldr	r1, [r5, #0]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f851 6b04 	ldr.w	r6, [r1], #4
 8004414:	6029      	str	r1, [r5, #0]
 8004416:	061d      	lsls	r5, r3, #24
 8004418:	d514      	bpl.n	8004444 <_printf_i+0x1ac>
 800441a:	07df      	lsls	r7, r3, #31
 800441c:	bf44      	itt	mi
 800441e:	f043 0320 	orrmi.w	r3, r3, #32
 8004422:	6023      	strmi	r3, [r4, #0]
 8004424:	b91e      	cbnz	r6, 800442e <_printf_i+0x196>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f023 0320 	bic.w	r3, r3, #32
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	2310      	movs	r3, #16
 8004430:	e7b0      	b.n	8004394 <_printf_i+0xfc>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	f043 0320 	orr.w	r3, r3, #32
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	2378      	movs	r3, #120	; 0x78
 800443c:	4828      	ldr	r0, [pc, #160]	; (80044e0 <_printf_i+0x248>)
 800443e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004442:	e7e3      	b.n	800440c <_printf_i+0x174>
 8004444:	0659      	lsls	r1, r3, #25
 8004446:	bf48      	it	mi
 8004448:	b2b6      	uxthmi	r6, r6
 800444a:	e7e6      	b.n	800441a <_printf_i+0x182>
 800444c:	4615      	mov	r5, r2
 800444e:	e7bb      	b.n	80043c8 <_printf_i+0x130>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	6826      	ldr	r6, [r4, #0]
 8004454:	6961      	ldr	r1, [r4, #20]
 8004456:	1d18      	adds	r0, r3, #4
 8004458:	6028      	str	r0, [r5, #0]
 800445a:	0635      	lsls	r5, r6, #24
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	d501      	bpl.n	8004464 <_printf_i+0x1cc>
 8004460:	6019      	str	r1, [r3, #0]
 8004462:	e002      	b.n	800446a <_printf_i+0x1d2>
 8004464:	0670      	lsls	r0, r6, #25
 8004466:	d5fb      	bpl.n	8004460 <_printf_i+0x1c8>
 8004468:	8019      	strh	r1, [r3, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	4615      	mov	r5, r2
 8004470:	e7ba      	b.n	80043e8 <_printf_i+0x150>
 8004472:	682b      	ldr	r3, [r5, #0]
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	602a      	str	r2, [r5, #0]
 8004478:	681d      	ldr	r5, [r3, #0]
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	2100      	movs	r1, #0
 800447e:	4628      	mov	r0, r5
 8004480:	f7fb fea6 	bl	80001d0 <memchr>
 8004484:	b108      	cbz	r0, 800448a <_printf_i+0x1f2>
 8004486:	1b40      	subs	r0, r0, r5
 8004488:	6060      	str	r0, [r4, #4]
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	2300      	movs	r3, #0
 8004490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004494:	e7a8      	b.n	80043e8 <_printf_i+0x150>
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	462a      	mov	r2, r5
 800449a:	4649      	mov	r1, r9
 800449c:	4640      	mov	r0, r8
 800449e:	47d0      	blx	sl
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0ab      	beq.n	80043fc <_printf_i+0x164>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	079b      	lsls	r3, r3, #30
 80044a8:	d413      	bmi.n	80044d2 <_printf_i+0x23a>
 80044aa:	68e0      	ldr	r0, [r4, #12]
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	4298      	cmp	r0, r3
 80044b0:	bfb8      	it	lt
 80044b2:	4618      	movlt	r0, r3
 80044b4:	e7a4      	b.n	8004400 <_printf_i+0x168>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4632      	mov	r2, r6
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	47d0      	blx	sl
 80044c0:	3001      	adds	r0, #1
 80044c2:	d09b      	beq.n	80043fc <_printf_i+0x164>
 80044c4:	3501      	adds	r5, #1
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	9903      	ldr	r1, [sp, #12]
 80044ca:	1a5b      	subs	r3, r3, r1
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dcf2      	bgt.n	80044b6 <_printf_i+0x21e>
 80044d0:	e7eb      	b.n	80044aa <_printf_i+0x212>
 80044d2:	2500      	movs	r5, #0
 80044d4:	f104 0619 	add.w	r6, r4, #25
 80044d8:	e7f5      	b.n	80044c6 <_printf_i+0x22e>
 80044da:	bf00      	nop
 80044dc:	08004811 	.word	0x08004811
 80044e0:	08004822 	.word	0x08004822

080044e4 <memcpy>:
 80044e4:	440a      	add	r2, r1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044ec:	d100      	bne.n	80044f0 <memcpy+0xc>
 80044ee:	4770      	bx	lr
 80044f0:	b510      	push	{r4, lr}
 80044f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fa:	4291      	cmp	r1, r2
 80044fc:	d1f9      	bne.n	80044f2 <memcpy+0xe>
 80044fe:	bd10      	pop	{r4, pc}

08004500 <memmove>:
 8004500:	4288      	cmp	r0, r1
 8004502:	b510      	push	{r4, lr}
 8004504:	eb01 0402 	add.w	r4, r1, r2
 8004508:	d902      	bls.n	8004510 <memmove+0x10>
 800450a:	4284      	cmp	r4, r0
 800450c:	4623      	mov	r3, r4
 800450e:	d807      	bhi.n	8004520 <memmove+0x20>
 8004510:	1e43      	subs	r3, r0, #1
 8004512:	42a1      	cmp	r1, r4
 8004514:	d008      	beq.n	8004528 <memmove+0x28>
 8004516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800451a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800451e:	e7f8      	b.n	8004512 <memmove+0x12>
 8004520:	4402      	add	r2, r0
 8004522:	4601      	mov	r1, r0
 8004524:	428a      	cmp	r2, r1
 8004526:	d100      	bne.n	800452a <memmove+0x2a>
 8004528:	bd10      	pop	{r4, pc}
 800452a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800452e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004532:	e7f7      	b.n	8004524 <memmove+0x24>

08004534 <_free_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4605      	mov	r5, r0
 8004538:	2900      	cmp	r1, #0
 800453a:	d041      	beq.n	80045c0 <_free_r+0x8c>
 800453c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004540:	1f0c      	subs	r4, r1, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfb8      	it	lt
 8004546:	18e4      	addlt	r4, r4, r3
 8004548:	f000 f912 	bl	8004770 <__malloc_lock>
 800454c:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <_free_r+0x90>)
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	b933      	cbnz	r3, 8004560 <_free_r+0x2c>
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	6014      	str	r4, [r2, #0]
 8004556:	4628      	mov	r0, r5
 8004558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800455c:	f000 b90e 	b.w	800477c <__malloc_unlock>
 8004560:	42a3      	cmp	r3, r4
 8004562:	d908      	bls.n	8004576 <_free_r+0x42>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	1821      	adds	r1, r4, r0
 8004568:	428b      	cmp	r3, r1
 800456a:	bf01      	itttt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	1809      	addeq	r1, r1, r0
 8004572:	6021      	streq	r1, [r4, #0]
 8004574:	e7ed      	b.n	8004552 <_free_r+0x1e>
 8004576:	461a      	mov	r2, r3
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	b10b      	cbz	r3, 8004580 <_free_r+0x4c>
 800457c:	42a3      	cmp	r3, r4
 800457e:	d9fa      	bls.n	8004576 <_free_r+0x42>
 8004580:	6811      	ldr	r1, [r2, #0]
 8004582:	1850      	adds	r0, r2, r1
 8004584:	42a0      	cmp	r0, r4
 8004586:	d10b      	bne.n	80045a0 <_free_r+0x6c>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	4401      	add	r1, r0
 800458c:	1850      	adds	r0, r2, r1
 800458e:	4283      	cmp	r3, r0
 8004590:	6011      	str	r1, [r2, #0]
 8004592:	d1e0      	bne.n	8004556 <_free_r+0x22>
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	6053      	str	r3, [r2, #4]
 800459a:	4401      	add	r1, r0
 800459c:	6011      	str	r1, [r2, #0]
 800459e:	e7da      	b.n	8004556 <_free_r+0x22>
 80045a0:	d902      	bls.n	80045a8 <_free_r+0x74>
 80045a2:	230c      	movs	r3, #12
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	e7d6      	b.n	8004556 <_free_r+0x22>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	1821      	adds	r1, r4, r0
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf04      	itt	eq
 80045b0:	6819      	ldreq	r1, [r3, #0]
 80045b2:	685b      	ldreq	r3, [r3, #4]
 80045b4:	6063      	str	r3, [r4, #4]
 80045b6:	bf04      	itt	eq
 80045b8:	1809      	addeq	r1, r1, r0
 80045ba:	6021      	streq	r1, [r4, #0]
 80045bc:	6054      	str	r4, [r2, #4]
 80045be:	e7ca      	b.n	8004556 <_free_r+0x22>
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
 80045c2:	bf00      	nop
 80045c4:	200004c0 	.word	0x200004c0

080045c8 <sbrk_aligned>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4e0e      	ldr	r6, [pc, #56]	; (8004604 <sbrk_aligned+0x3c>)
 80045cc:	460c      	mov	r4, r1
 80045ce:	6831      	ldr	r1, [r6, #0]
 80045d0:	4605      	mov	r5, r0
 80045d2:	b911      	cbnz	r1, 80045da <sbrk_aligned+0x12>
 80045d4:	f000 f8bc 	bl	8004750 <_sbrk_r>
 80045d8:	6030      	str	r0, [r6, #0]
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 f8b7 	bl	8004750 <_sbrk_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	d00a      	beq.n	80045fc <sbrk_aligned+0x34>
 80045e6:	1cc4      	adds	r4, r0, #3
 80045e8:	f024 0403 	bic.w	r4, r4, #3
 80045ec:	42a0      	cmp	r0, r4
 80045ee:	d007      	beq.n	8004600 <sbrk_aligned+0x38>
 80045f0:	1a21      	subs	r1, r4, r0
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 f8ac 	bl	8004750 <_sbrk_r>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d101      	bne.n	8004600 <sbrk_aligned+0x38>
 80045fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004600:	4620      	mov	r0, r4
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	200004c4 	.word	0x200004c4

08004608 <_malloc_r>:
 8004608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460c:	1ccd      	adds	r5, r1, #3
 800460e:	f025 0503 	bic.w	r5, r5, #3
 8004612:	3508      	adds	r5, #8
 8004614:	2d0c      	cmp	r5, #12
 8004616:	bf38      	it	cc
 8004618:	250c      	movcc	r5, #12
 800461a:	2d00      	cmp	r5, #0
 800461c:	4607      	mov	r7, r0
 800461e:	db01      	blt.n	8004624 <_malloc_r+0x1c>
 8004620:	42a9      	cmp	r1, r5
 8004622:	d905      	bls.n	8004630 <_malloc_r+0x28>
 8004624:	230c      	movs	r3, #12
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	2600      	movs	r6, #0
 800462a:	4630      	mov	r0, r6
 800462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004630:	4e2e      	ldr	r6, [pc, #184]	; (80046ec <_malloc_r+0xe4>)
 8004632:	f000 f89d 	bl	8004770 <__malloc_lock>
 8004636:	6833      	ldr	r3, [r6, #0]
 8004638:	461c      	mov	r4, r3
 800463a:	bb34      	cbnz	r4, 800468a <_malloc_r+0x82>
 800463c:	4629      	mov	r1, r5
 800463e:	4638      	mov	r0, r7
 8004640:	f7ff ffc2 	bl	80045c8 <sbrk_aligned>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	4604      	mov	r4, r0
 8004648:	d14d      	bne.n	80046e6 <_malloc_r+0xde>
 800464a:	6834      	ldr	r4, [r6, #0]
 800464c:	4626      	mov	r6, r4
 800464e:	2e00      	cmp	r6, #0
 8004650:	d140      	bne.n	80046d4 <_malloc_r+0xcc>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	4631      	mov	r1, r6
 8004656:	4638      	mov	r0, r7
 8004658:	eb04 0803 	add.w	r8, r4, r3
 800465c:	f000 f878 	bl	8004750 <_sbrk_r>
 8004660:	4580      	cmp	r8, r0
 8004662:	d13a      	bne.n	80046da <_malloc_r+0xd2>
 8004664:	6821      	ldr	r1, [r4, #0]
 8004666:	3503      	adds	r5, #3
 8004668:	1a6d      	subs	r5, r5, r1
 800466a:	f025 0503 	bic.w	r5, r5, #3
 800466e:	3508      	adds	r5, #8
 8004670:	2d0c      	cmp	r5, #12
 8004672:	bf38      	it	cc
 8004674:	250c      	movcc	r5, #12
 8004676:	4629      	mov	r1, r5
 8004678:	4638      	mov	r0, r7
 800467a:	f7ff ffa5 	bl	80045c8 <sbrk_aligned>
 800467e:	3001      	adds	r0, #1
 8004680:	d02b      	beq.n	80046da <_malloc_r+0xd2>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	442b      	add	r3, r5
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	e00e      	b.n	80046a8 <_malloc_r+0xa0>
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	1b52      	subs	r2, r2, r5
 800468e:	d41e      	bmi.n	80046ce <_malloc_r+0xc6>
 8004690:	2a0b      	cmp	r2, #11
 8004692:	d916      	bls.n	80046c2 <_malloc_r+0xba>
 8004694:	1961      	adds	r1, r4, r5
 8004696:	42a3      	cmp	r3, r4
 8004698:	6025      	str	r5, [r4, #0]
 800469a:	bf18      	it	ne
 800469c:	6059      	strne	r1, [r3, #4]
 800469e:	6863      	ldr	r3, [r4, #4]
 80046a0:	bf08      	it	eq
 80046a2:	6031      	streq	r1, [r6, #0]
 80046a4:	5162      	str	r2, [r4, r5]
 80046a6:	604b      	str	r3, [r1, #4]
 80046a8:	4638      	mov	r0, r7
 80046aa:	f104 060b 	add.w	r6, r4, #11
 80046ae:	f000 f865 	bl	800477c <__malloc_unlock>
 80046b2:	f026 0607 	bic.w	r6, r6, #7
 80046b6:	1d23      	adds	r3, r4, #4
 80046b8:	1af2      	subs	r2, r6, r3
 80046ba:	d0b6      	beq.n	800462a <_malloc_r+0x22>
 80046bc:	1b9b      	subs	r3, r3, r6
 80046be:	50a3      	str	r3, [r4, r2]
 80046c0:	e7b3      	b.n	800462a <_malloc_r+0x22>
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	bf0c      	ite	eq
 80046c8:	6032      	streq	r2, [r6, #0]
 80046ca:	605a      	strne	r2, [r3, #4]
 80046cc:	e7ec      	b.n	80046a8 <_malloc_r+0xa0>
 80046ce:	4623      	mov	r3, r4
 80046d0:	6864      	ldr	r4, [r4, #4]
 80046d2:	e7b2      	b.n	800463a <_malloc_r+0x32>
 80046d4:	4634      	mov	r4, r6
 80046d6:	6876      	ldr	r6, [r6, #4]
 80046d8:	e7b9      	b.n	800464e <_malloc_r+0x46>
 80046da:	230c      	movs	r3, #12
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4638      	mov	r0, r7
 80046e0:	f000 f84c 	bl	800477c <__malloc_unlock>
 80046e4:	e7a1      	b.n	800462a <_malloc_r+0x22>
 80046e6:	6025      	str	r5, [r4, #0]
 80046e8:	e7de      	b.n	80046a8 <_malloc_r+0xa0>
 80046ea:	bf00      	nop
 80046ec:	200004c0 	.word	0x200004c0

080046f0 <_realloc_r>:
 80046f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	4680      	mov	r8, r0
 80046f6:	4614      	mov	r4, r2
 80046f8:	460e      	mov	r6, r1
 80046fa:	b921      	cbnz	r1, 8004706 <_realloc_r+0x16>
 80046fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	4611      	mov	r1, r2
 8004702:	f7ff bf81 	b.w	8004608 <_malloc_r>
 8004706:	b92a      	cbnz	r2, 8004714 <_realloc_r+0x24>
 8004708:	f7ff ff14 	bl	8004534 <_free_r>
 800470c:	4625      	mov	r5, r4
 800470e:	4628      	mov	r0, r5
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004714:	f000 f838 	bl	8004788 <_malloc_usable_size_r>
 8004718:	4284      	cmp	r4, r0
 800471a:	4607      	mov	r7, r0
 800471c:	d802      	bhi.n	8004724 <_realloc_r+0x34>
 800471e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004722:	d812      	bhi.n	800474a <_realloc_r+0x5a>
 8004724:	4621      	mov	r1, r4
 8004726:	4640      	mov	r0, r8
 8004728:	f7ff ff6e 	bl	8004608 <_malloc_r>
 800472c:	4605      	mov	r5, r0
 800472e:	2800      	cmp	r0, #0
 8004730:	d0ed      	beq.n	800470e <_realloc_r+0x1e>
 8004732:	42bc      	cmp	r4, r7
 8004734:	4622      	mov	r2, r4
 8004736:	4631      	mov	r1, r6
 8004738:	bf28      	it	cs
 800473a:	463a      	movcs	r2, r7
 800473c:	f7ff fed2 	bl	80044e4 <memcpy>
 8004740:	4631      	mov	r1, r6
 8004742:	4640      	mov	r0, r8
 8004744:	f7ff fef6 	bl	8004534 <_free_r>
 8004748:	e7e1      	b.n	800470e <_realloc_r+0x1e>
 800474a:	4635      	mov	r5, r6
 800474c:	e7df      	b.n	800470e <_realloc_r+0x1e>
	...

08004750 <_sbrk_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4d06      	ldr	r5, [pc, #24]	; (800476c <_sbrk_r+0x1c>)
 8004754:	2300      	movs	r3, #0
 8004756:	4604      	mov	r4, r0
 8004758:	4608      	mov	r0, r1
 800475a:	602b      	str	r3, [r5, #0]
 800475c:	f000 f81e 	bl	800479c <_sbrk>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_sbrk_r+0x1a>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_sbrk_r+0x1a>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200004c8 	.word	0x200004c8

08004770 <__malloc_lock>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__malloc_lock+0x8>)
 8004772:	f000 b811 	b.w	8004798 <__retarget_lock_acquire_recursive>
 8004776:	bf00      	nop
 8004778:	200004cc 	.word	0x200004cc

0800477c <__malloc_unlock>:
 800477c:	4801      	ldr	r0, [pc, #4]	; (8004784 <__malloc_unlock+0x8>)
 800477e:	f000 b80c 	b.w	800479a <__retarget_lock_release_recursive>
 8004782:	bf00      	nop
 8004784:	200004cc 	.word	0x200004cc

08004788 <_malloc_usable_size_r>:
 8004788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800478c:	1f18      	subs	r0, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfbc      	itt	lt
 8004792:	580b      	ldrlt	r3, [r1, r0]
 8004794:	18c0      	addlt	r0, r0, r3
 8004796:	4770      	bx	lr

08004798 <__retarget_lock_acquire_recursive>:
 8004798:	4770      	bx	lr

0800479a <__retarget_lock_release_recursive>:
 800479a:	4770      	bx	lr

0800479c <_sbrk>:
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <_sbrk+0x14>)
 800479e:	6811      	ldr	r1, [r2, #0]
 80047a0:	4603      	mov	r3, r0
 80047a2:	b909      	cbnz	r1, 80047a8 <_sbrk+0xc>
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <_sbrk+0x18>)
 80047a6:	6011      	str	r1, [r2, #0]
 80047a8:	6810      	ldr	r0, [r2, #0]
 80047aa:	4403      	add	r3, r0
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4770      	bx	lr
 80047b0:	200004d0 	.word	0x200004d0
 80047b4:	200004d4 	.word	0x200004d4

080047b8 <_init>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

080047c4 <_fini>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr
